var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"AddressBook - Level 4 was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"tohcheryl"},"content":"\u003d\u003d\u003d Jackson Huang"},{"lineNumber":13,"author":{"gitID":"tohcheryl"},"content":"image::jaxony.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"tohcheryl"},"content":"{empty}[https://github.com/jaxony[github]]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":17,"author":{"gitID":"tohcheryl"},"content":"In charge of UI"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"tohcheryl"},"content":"\u003d\u003d\u003d Sam Xie"},{"lineNumber":22,"author":{"gitID":"tohcheryl"},"content":"image::samzx.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"tohcheryl"},"content":"{empty}[http://github.com/samzx[github]]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":26,"author":{"gitID":"tohcheryl"},"content":"In charge of Logic"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"tohcheryl"},"content":"\u003d\u003d\u003d Cheryl Toh"},{"lineNumber":31,"author":{"gitID":"tohcheryl"},"content":"image::tohcheryl.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":32,"author":{"gitID":"tohcheryl"},"content":"{empty}[http://github.com/tohcheryl[github]]"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":35,"author":{"gitID":"tohcheryl"},"content":"In charge of Model"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"tohcheryl":12,"-":25}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"tohcheryl"},"content":"\u003d HackEat - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"tohcheryl"},"content":"HackEat is for those who *prefer to use a desktop app for ordering food*. More importantly, HackEat is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, HackEat can get food to your door in no time. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Address Book."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"tohcheryl"},"content":"* *`list`* : lists all food"},{"lineNumber":41,"author":{"gitID":"tohcheryl"},"content":"* **`add`**`n/Sweet Chili Fish Burger p/67773777 e/hanbaobao@mcds.sg a/10 Jalan Serene, #01-01, Serene Centre` : adds a food called `Sweet Chili Fish Burger` to HackEat."},{"lineNumber":42,"author":{"gitID":"tohcheryl"},"content":"* **`delete`**`3` : deletes the 3rd food shown in the current list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"tohcheryl"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Sweet Chili Fish Burger`."},{"lineNumber":54,"author":{"gitID":"tohcheryl"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/Sweet Chili Fish Burger t/western` or as `n/Sweet Chili Fish Burger`."},{"lineNumber":55,"author":{"gitID":"tohcheryl"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/western`, `t/western t/vegetarian` etc."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a food: `add`"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"Adds a food to HackEat +"},{"lineNumber":66,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":69,"author":{"gitID":"-"},"content":"Name and phone fields must not be left blank"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":72,"author":{"gitID":"-"},"content":"A food can have any number of tags (including 0)"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"tohcheryl"},"content":"* `add n/Sweet Chili Fish Burger p/67773777 e/hanbaobao@mcds.sg a/10 Jalan Serene, #01-01, Serene Centre`"},{"lineNumber":77,"author":{"gitID":"tohcheryl"},"content":"* `add n/Hainanese Chicken Rice t/chinese e/tiantianchicken@maxwell.sg a/Maxwell Food Centre p/96914852 t/protein`"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all foods : `list`"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"Shows a list of all foods in HackEat. +"},{"lineNumber":82,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a food : `edit`"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"Edits an existing food in HackEat. +"},{"lineNumber":87,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"****"},{"lineNumber":90,"author":{"gitID":"-"},"content":"* Edits the food at the specified `INDEX`. The index refers to the index number shown in the last food listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":91,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":92,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":93,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the food will be removed i.e adding of tags is not cumulative."},{"lineNumber":94,"author":{"gitID":"-"},"content":"* You can remove all the food\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":95,"author":{"gitID":"-"},"content":"****"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"tohcheryl"},"content":"* `edit 1 p/61234567 e/ilovehanbaobao@mcds.sg` +"},{"lineNumber":100,"author":{"gitID":"tohcheryl"},"content":"Edits the phone number and email address of the 1st food to be `61234567` and `ilovehanbaobao@mcds.sg` respectively."},{"lineNumber":101,"author":{"gitID":"tohcheryl"},"content":"* `edit 2 n/Chicken Rice t/` +"},{"lineNumber":102,"author":{"gitID":"tohcheryl"},"content":"Edits the name of the 2nd food to be `Chicken Rice` and clears all existing tags."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating foods by name: `find`"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"Finds foods whose names contain any of the given keywords. +"},{"lineNumber":107,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"****"},{"lineNumber":110,"author":{"gitID":"tohcheryl"},"content":"* The search is case insensitive. e.g `steak` will match `Steak`"},{"lineNumber":111,"author":{"gitID":"tohcheryl"},"content":"* The order of the keywords does not matter. e.g. `Ribeye Steak` will match `Steak Ribeye`"},{"lineNumber":112,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":113,"author":{"gitID":"tohcheryl"},"content":"* Only full words will be matched e.g. `Steak` will not match `Steaks`"},{"lineNumber":114,"author":{"gitID":"tohcheryl"},"content":"* Foods matching at least one keyword will be returned (i.e. `OR` search). e.g. `Ribeye Steak` will return `Sirloin Steak`, `Ribeye Roast`"},{"lineNumber":115,"author":{"gitID":"-"},"content":"****"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"tohcheryl"},"content":"* `find Chicken` +"},{"lineNumber":120,"author":{"gitID":"tohcheryl"},"content":"Returns `chicken` and `Chicken Cutlet`"},{"lineNumber":121,"author":{"gitID":"tohcheryl"},"content":"* `find Chicken Carrot Fries` +"},{"lineNumber":122,"author":{"gitID":"tohcheryl"},"content":"Returns any food having names `Chicken`, `Carrot`, or `Fries`"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a food : `delete`"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"Deletes the specified food from HackEat. +"},{"lineNumber":127,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"****"},{"lineNumber":130,"author":{"gitID":"-"},"content":"* Deletes the food at the specified `INDEX`."},{"lineNumber":131,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":133,"author":{"gitID":"-"},"content":"****"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":138,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":139,"author":{"gitID":"-"},"content":"Deletes the 2nd food in HackEat."},{"lineNumber":140,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":141,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":142,"author":{"gitID":"-"},"content":"Deletes the 1st food in the results of the `find` command."},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a food : `select`"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"Selects the food identified by the index number used in the last food listing. +"},{"lineNumber":147,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"****"},{"lineNumber":150,"author":{"gitID":"-"},"content":"* Selects the food and loads the Google search page the food at the specified `INDEX`."},{"lineNumber":151,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":152,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":153,"author":{"gitID":"-"},"content":"****"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":158,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":159,"author":{"gitID":"-"},"content":"Selects the 2nd food in HackEat."},{"lineNumber":160,"author":{"gitID":"tohcheryl"},"content":"* `find Rice` +"},{"lineNumber":161,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":162,"author":{"gitID":"-"},"content":"Selects the 1st food in the results of the `find` command."},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":167,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":170,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":171,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":172,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":175,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"Restores HackEat to the state before the previous _undoable_ command was executed. +"},{"lineNumber":178,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":181,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":182,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify HackEat\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":183,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":188,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":189,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":192,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":193,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":194,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":197,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":198,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":199,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":204,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":209,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":210,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":213,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":214,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":217,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":218,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":219,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":220,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":222,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"// tag::userconfig[]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting user profile: `userconfig`"},{"lineNumber":226,"author":{"gitID":"-"},"content":"Sets user details to personalise the HackEat application so that food"},{"lineNumber":227,"author":{"gitID":"-"},"content":"can be delivered to the correct address and deliverers can contact the user via his/her phone number."},{"lineNumber":228,"author":{"gitID":"-"},"content":"Users can also specify their allergies so that certain foods can removed from HackEat\u0027s smart food"},{"lineNumber":229,"author":{"gitID":"-"},"content":"recommendations."},{"lineNumber":230,"author":{"gitID":"-"},"content":"Format: `userconfig n/NAME p/PHONE a/ADDRESS [alg/ALLERGY]`"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"* `userconfig n/Herbert Williams p/02142433532 a/12 Maccas Drive Singapore 4210 alg/lactose alg/gluten`"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"Sets user profile of Herbert Williams."},{"lineNumber":237,"author":{"gitID":"-"},"content":"// end::userconfig[]"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"Clears all entries from HackEat. +"},{"lineNumber":242,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Order food: `order` [Proposed to finish in v1.5]"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"Orders food given with or without an index. If no index is given, a food will be chosen for you. May take some time as"},{"lineNumber":247,"author":{"gitID":"-"},"content":"phone call is in progress. Otherwise, will order the food at the specified index."},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"Format: `order [INDEX]` or `order`"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":254,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"tohcheryl"},"content":"HackEat data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":262,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":265,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":270,"author":{"gitID":"tohcheryl"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous HackEat folder."},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":275,"author":{"gitID":"tohcheryl"},"content":"e.g. `add n/Mee Rebus p/22224444 e/meerebus@example.com a/123, Clementi Rd, 1234665 t/malay t/spicy`"},{"lineNumber":276,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":277,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":278,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":279,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":280,"author":{"gitID":"tohcheryl"},"content":"e.g. `edit 2 n/Mee Soto e/meesoto@example.com`"},{"lineNumber":281,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":282,"author":{"gitID":"tohcheryl"},"content":"e.g. `find Laksa Sushi`"},{"lineNumber":283,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":284,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":285,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":286,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":287,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":288,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":289,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"tohcheryl":28,"-":261}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d 🔥 HackEat 🔥"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"tohcheryl"},"content":"https://travis-ci.org/CS2103JAN2018-W10-B3/main[image:https://travis-ci.org/CS2103JAN2018-W10-B3/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"tohcheryl"},"content":"https://coveralls.io/github/CS2103JAN2018-W10-B3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W10-B3/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"Welcome to the home of HackEat! HackEat is a next-gen food recommendation and ordering app for the hackers, the programmers, the creators of world bustling and bursting with world-changing ideas but running short on time ⏰⏳."},{"lineNumber":19,"author":{"gitID":"-"},"content":"* Perfect for the busy software developer or desk hermit: Use _CLI commands_ to accelerate the chore of finding the right food."},{"lineNumber":20,"author":{"gitID":"-"},"content":"* HackEat takes the stress, thinking and time-waste out of deciding what to eat. Order your food in style with developer-friendly commands like `ls` and `mkfood` to stay _in the zone_ even when you\u0027re not programming."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d How to Use"},{"lineNumber":23,"author":{"gitID":"-"},"content":"Hackers don\u0027t need manuals. But here it is for you anyway."},{"lineNumber":24,"author":{"gitID":"-"},"content":"* `ls`: list the favourite foods you\u0027ve added to your trusty collection"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* `order rand`: order a random dish from your collection to save time when you need to make that PR deadline before your Wednesday tutorial!"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* `mkfood`: add a new food item to your collection of scrumptious dishes for those energy-consuming hack sessions we all know and dread/love"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* `rm \u003cfood\u003e`: remove food item from your collection. Maybe the McChicken just isn\u0027t the same as it used to be?"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":33,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":38,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":39,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"* the original source of the code i.e. AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/[se-edu]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"tohcheryl":2,"-":40}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_APPLE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BANANA;"},{"lineNumber":6,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_LACTOSE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_APPLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BANANA;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_APPLE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BANANA;"},{"lineNumber":20,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_APPLE;"},{"lineNumber":21,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BANANA;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_APPLE;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_BANANA;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIED;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NUTS;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_APPLE;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BANANA;"},{"lineNumber":28,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_LACTOSE;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_APPLE;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BANANA;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_APPLE;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_APPLE;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BANANA;"},{"lineNumber":35,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_APPLE;"},{"lineNumber":36,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BANANA;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_APPLE;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BANANA;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIED;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalFoods.ALMOND;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalFoods.APPLE;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalFoods.BANANA;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalFoods.CAKE;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalFoods.HAM;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalFoods.ICECREAM;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalFoods.KEYWORD_MATCHING_MOUSSE;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Address;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Email;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Name;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Phone;"},{"lineNumber":62,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.Price;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Rating;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.model.food.exceptions.DuplicateFoodException;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.testutil.FoodBuilder;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import seedu.address.testutil.FoodUtil;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: add a food without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":78,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":79,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Food toAdd \u003d APPLE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_APPLE + \"  \" + PHONE_DESC_APPLE + \" \""},{"lineNumber":82,"author":{"gitID":"tohcheryl"},"content":"                + EMAIL_DESC_APPLE + \"   \" + ADDRESS_DESC_APPLE + \"   \" + PRICE_DESC_APPLE + \"   \""},{"lineNumber":83,"author":{"gitID":"tohcheryl"},"content":"                + RATING_DESC_APPLE + \"  \" + TAG_DESC_FRIED + \" \" + ALLERGY_DESC_LACTOSE + \" \";"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        model.addFood(toAdd);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: add a food with all fields same as another food in HackEat except name -\u003e added */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        toAdd \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_APPLE)"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_APPLE)"},{"lineNumber":100,"author":{"gitID":"tohcheryl"},"content":"                .withTags(VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BANANA + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"},{"lineNumber":102,"author":{"gitID":"tohcheryl"},"content":"                + PRICE_DESC_APPLE + RATING_DESC_APPLE + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: add a food with all fields same as another food in HackEat except phone -\u003e added */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_BANANA).withEmail(VALID_EMAIL_APPLE)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_APPLE)"},{"lineNumber":108,"author":{"gitID":"tohcheryl"},"content":"                .withTags(VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_BANANA + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"},{"lineNumber":110,"author":{"gitID":"tohcheryl"},"content":"                + PRICE_DESC_APPLE + RATING_DESC_APPLE + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: add a food with all fields same as another food in HackEat except email -\u003e added */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_BANANA)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_APPLE)"},{"lineNumber":116,"author":{"gitID":"tohcheryl"},"content":"                .withTags(VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_BANANA + ADDRESS_DESC_APPLE"},{"lineNumber":118,"author":{"gitID":"tohcheryl"},"content":"                + PRICE_DESC_APPLE + RATING_DESC_APPLE + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: add a food with all fields same as another food in HackEat except address -\u003e added */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_APPLE)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BANANA).withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_APPLE)"},{"lineNumber":124,"author":{"gitID":"tohcheryl"},"content":"                .withTags(VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_BANANA"},{"lineNumber":126,"author":{"gitID":"tohcheryl"},"content":"                + PRICE_DESC_APPLE + RATING_DESC_APPLE + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"tohcheryl"},"content":"        /* Case: add a food with all fields same as another food in HackEat except price -\u003e added */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_APPLE)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_BANANA).withRating(VALID_RATING_APPLE)"},{"lineNumber":132,"author":{"gitID":"tohcheryl"},"content":"                .withTags(VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"},{"lineNumber":134,"author":{"gitID":"tohcheryl"},"content":"                + PRICE_DESC_BANANA + RATING_DESC_APPLE + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: add a food with all fields same as another food in HackEat except rating -\u003e added */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_APPLE)"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_BANANA)"},{"lineNumber":140,"author":{"gitID":"tohcheryl"},"content":"                .withTags(VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"},{"lineNumber":142,"author":{"gitID":"tohcheryl"},"content":"                + PRICE_DESC_APPLE + RATING_DESC_BANANA + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        deleteAllFoods();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALMOND);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: add a food with tags, command with parameters in random order -\u003e added */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        toAdd \u003d BANANA;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIED + PHONE_DESC_BANANA + ADDRESS_DESC_BANANA + NAME_DESC_BANANA"},{"lineNumber":152,"author":{"gitID":"tohcheryl"},"content":"                + TAG_DESC_NUTS + EMAIL_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + ALLERGY_DESC_LACTOSE;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add with missing fields (optional fields) ------------------------------*/"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: add a food, missing tags -\u003e added */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HAM);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: add a food, missing email -\u003e added */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_APPLE)"},{"lineNumber":163,"author":{"gitID":"tohcheryl"},"content":"                .withTags(VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"},{"lineNumber":164,"author":{"gitID":"tohcheryl"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + ADDRESS_DESC_APPLE"},{"lineNumber":165,"author":{"gitID":"tohcheryl"},"content":"                + PRICE_DESC_APPLE + RATING_DESC_APPLE + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: add a food, missing address -\u003e added */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_BANANA)"},{"lineNumber":170,"author":{"gitID":"tohcheryl"},"content":"                .withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_APPLE).withTags(VALID_TAG_FRIED)"},{"lineNumber":171,"author":{"gitID":"tohcheryl"},"content":"                .withAllergies(VALID_ALLERGY_LACTOSE).build();"},{"lineNumber":172,"author":{"gitID":"tohcheryl"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_BANANA"},{"lineNumber":173,"author":{"gitID":"tohcheryl"},"content":"                + PRICE_DESC_APPLE + RATING_DESC_APPLE  + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"tohcheryl"},"content":"        /* Case: add a food, missing price -\u003e added */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_BANANA)"},{"lineNumber":178,"author":{"gitID":"tohcheryl"},"content":"                .withAddress(VALID_ADDRESS_APPLE).withRating(VALID_RATING_APPLE).withTags(VALID_TAG_FRIED)"},{"lineNumber":179,"author":{"gitID":"tohcheryl"},"content":"                .withAllergies(VALID_ALLERGY_LACTOSE).build();"},{"lineNumber":180,"author":{"gitID":"tohcheryl"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_BANANA"},{"lineNumber":181,"author":{"gitID":"tohcheryl"},"content":"                + ADDRESS_DESC_APPLE + RATING_DESC_APPLE  + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: add a food, missing rating -\u003e added */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_BANANA)"},{"lineNumber":186,"author":{"gitID":"tohcheryl"},"content":"                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE).withTags(VALID_TAG_FRIED)"},{"lineNumber":187,"author":{"gitID":"tohcheryl"},"content":"                .withAllergies(VALID_ALLERGY_LACTOSE).build();"},{"lineNumber":188,"author":{"gitID":"tohcheryl"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_BANANA"},{"lineNumber":189,"author":{"gitID":"tohcheryl"},"content":"                + ADDRESS_DESC_APPLE + PRICE_DESC_APPLE + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /* Case: filters the food list before adding -\u003e added */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        showFoodsWithName(KEYWORD_MATCHING_MOUSSE);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ICECREAM);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a food card is selected --------------------------- */"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the food list, add a food -\u003e added, card selection remains unchanged */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        selectFood(Index.fromOneBased(1));"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CAKE);"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate food -\u003e rejected */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        command \u003d FoodUtil.getAddCommand(HAM);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_FOOD);"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate food except with different tags -\u003e rejected */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalFoods#ALMOND"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        // AddressBook#addFood(Food)"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        command \u003d FoodUtil.getAddCommand(HAM) + \" \" + PREFIX_TAG.getPrefix() + \"fried\";"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_FOOD);"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":218,"author":{"gitID":"tohcheryl"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"},{"lineNumber":219,"author":{"gitID":"tohcheryl"},"content":"                + PRICE_DESC_APPLE + RATING_DESC_APPLE + ALLERGY_DESC_LACTOSE;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":223,"author":{"gitID":"tohcheryl"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"},{"lineNumber":224,"author":{"gitID":"tohcheryl"},"content":"                + PRICE_DESC_APPLE + RATING_DESC_APPLE + ALLERGY_DESC_LACTOSE;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + FoodUtil.getFoodDetails(toAdd);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_APPLE + EMAIL_DESC_APPLE"},{"lineNumber":233,"author":{"gitID":"tohcheryl"},"content":"                + ADDRESS_DESC_APPLE + PRICE_DESC_APPLE + RATING_DESC_APPLE + ALLERGY_DESC_LACTOSE;"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + INVALID_PHONE_DESC + EMAIL_DESC_APPLE"},{"lineNumber":238,"author":{"gitID":"tohcheryl"},"content":"                + ADDRESS_DESC_APPLE + PRICE_DESC_APPLE + RATING_DESC_APPLE + ALLERGY_DESC_LACTOSE;"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + INVALID_EMAIL_DESC"},{"lineNumber":243,"author":{"gitID":"tohcheryl"},"content":"                + ADDRESS_DESC_APPLE + PRICE_DESC_APPLE + RATING_DESC_APPLE + ALLERGY_DESC_LACTOSE;"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE"},{"lineNumber":248,"author":{"gitID":"tohcheryl"},"content":"                + INVALID_ADDRESS_DESC + PRICE_DESC_APPLE + RATING_DESC_APPLE + ALLERGY_DESC_LACTOSE;"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"tohcheryl"},"content":"        /* Case: invalid price -\u003e rejected */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE"},{"lineNumber":253,"author":{"gitID":"tohcheryl"},"content":"                + ADDRESS_DESC_APPLE + INVALID_PRICE_DESC + RATING_DESC_APPLE + ALLERGY_DESC_LACTOSE;"},{"lineNumber":254,"author":{"gitID":"tohcheryl"},"content":"        assertCommandFailure(command, Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":255,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        /* Case: invalid rating -\u003e rejected */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE"},{"lineNumber":258,"author":{"gitID":"tohcheryl"},"content":"                + ADDRESS_DESC_APPLE + RATING_DESC_APPLE + INVALID_RATING_DESC + ALLERGY_DESC_LACTOSE;"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"},{"lineNumber":263,"author":{"gitID":"tohcheryl"},"content":"                + PRICE_DESC_APPLE + RATING_DESC_APPLE + INVALID_TAG_DESC + ALLERGY_DESC_LACTOSE;"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code FoodListPanel} equal to the corresponding components in"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Food toAdd) {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertCommandSuccess(FoodUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Food)}. Executes {@code command}"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Food)"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Food toAdd) {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"            expectedModel.addFood(toAdd);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        } catch (DuplicateFoodException dpe) {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Food)} except asserts that"},{"lineNumber":304,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":305,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":306,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code FoodListPanel} equal to the corresponding components in"},{"lineNumber":307,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":308,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Food)"},{"lineNumber":309,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":319,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":320,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":321,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":322,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":323,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code FoodListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":324,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":325,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":326,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":327,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":328,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":329,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":335,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":337,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":338,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":54,"-":284}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d AddressBook Level 4 - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `FoodListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a food) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cFood\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of HackEat (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of HackEat before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":246,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"----"},{"lineNumber":248,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"----"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":257,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"----"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th food in HackEat. The current state of HackEat is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new food."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"The user now decides that adding the food was a mistake, and decides to undo that action using `undo`."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore HackEat to the state before the `add` command executed."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":296,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores HackEat to the state after the command is executed)."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":326,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the food being deleted)."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies HackEat (`add`, `clear`, `edit`)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":348,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":359,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"tohcheryl"},"content":"// tag:: makeshortcuts[]"},{"lineNumber":362,"author":{"gitID":"tohcheryl"},"content":"\u003d\u003d\u003d [Proposed] Add Shortcuts"},{"lineNumber":363,"author":{"gitID":"tohcheryl"},"content":"\u003d\u003d\u003d\u003d Proposed Implementation"},{"lineNumber":364,"author":{"gitID":"tohcheryl"},"content":"A new Command class `AddShortcutCommand` will be created. A `Shortcut` class will be added to Model. An ArrayList of Commands that is linked to a particular shortcut will be saved. Every `Person` object will have a HashMap which stores the different Shortcuts they have created."},{"lineNumber":365,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":366,"author":{"gitID":"tohcheryl"},"content":"Suppose that a user has just launched the application. The user decides to create a new shortcut for ordering his favorite food. He will type in `mksc orderfave` and he will then be prompted to type in the commands that he would like to associate with that particular shortcut, for e.g. `find butter, order 1`."},{"lineNumber":367,"author":{"gitID":"tohcheryl"},"content":"The sequence of commands he has typed in will be stored in a `List`. The `List`, together with the name of the shortcut will then be stored in a `HashMap` as part of the attributes of the `Person` class."},{"lineNumber":368,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":369,"author":{"gitID":"tohcheryl"},"content":"image::UpdatedLogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":370,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"tohcheryl"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Whether to make AddShortcut undoable"},{"lineNumber":373,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":374,"author":{"gitID":"tohcheryl"},"content":"* **Alternative 1:** Make it undoable"},{"lineNumber":375,"author":{"gitID":"tohcheryl"},"content":"** Pros: Provides user with greater flexibility"},{"lineNumber":376,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":377,"author":{"gitID":"tohcheryl"},"content":"** Cons: Harder to implement"},{"lineNumber":378,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":379,"author":{"gitID":"tohcheryl"},"content":"* **Alternative 2:** Do not make it undoable"},{"lineNumber":380,"author":{"gitID":"tohcheryl"},"content":"** Pros: Easier to implement"},{"lineNumber":381,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":382,"author":{"gitID":"tohcheryl"},"content":"** Cons: Less user friendly"},{"lineNumber":383,"author":{"gitID":"tohcheryl"},"content":"//end::addshortcuts[]"},{"lineNumber":384,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"// tag:: userconfig[]"},{"lineNumber":386,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuring the User Profile"},{"lineNumber":387,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Motivation"},{"lineNumber":388,"author":{"gitID":"-"},"content":"It\u0027s nice to have someone greet you as your friend. HackEat makes its users comfortable and feel"},{"lineNumber":389,"author":{"gitID":"-"},"content":"welcomed whenever they open their app. This is possible because a new feature has been implemented that"},{"lineNumber":390,"author":{"gitID":"-"},"content":"takes in the user\u0027s name and other information. The user is then greeted upon opening the app."},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Changes to Commands"},{"lineNumber":393,"author":{"gitID":"-"},"content":"A new Command class `UserConfigCommand` is created which allows the user to type in `userconfig n/NAME p/PHONE a/ADDRESS [alg/ALLERGY]` to update"},{"lineNumber":394,"author":{"gitID":"-"},"content":"their profile. Thus a new `UserConfigCommandParser` class was also created to handle the parsing of the user input:"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":397,"author":{"gitID":"-"},"content":"----"},{"lineNumber":398,"author":{"gitID":"-"},"content":"case UserConfigCommand.COMMAND_WORD:"},{"lineNumber":399,"author":{"gitID":"-"},"content":"    return new UserConfigCommandParser().parse(arguments);"},{"lineNumber":400,"author":{"gitID":"-"},"content":"----"},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Changes to the Model"},{"lineNumber":403,"author":{"gitID":"-"},"content":"In order to support the user profile, a new package was created under the `Model` component, specifically a `user` package."},{"lineNumber":404,"author":{"gitID":"-"},"content":"Inside it contains a `UserProfile` class, which holds the app state of the user\u0027s profile. `Allergy` is also a new object"},{"lineNumber":405,"author":{"gitID":"-"},"content":"in HackEat, and so an `Allergy` class was created in a new `allergy` package of the `Model` component. In order to support"},{"lineNumber":406,"author":{"gitID":"-"},"content":"multiple allergies for a single user, a `UniqueAllergyList` was also created under the same package."},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Saving to Storage"},{"lineNumber":409,"author":{"gitID":"-"},"content":"Executing the `UserConfigCommand` triggers the `model#updateUserProfile` method, which then posts an event to the `EventCenter`"},{"lineNumber":410,"author":{"gitID":"-"},"content":"indicating that `HackEat` data has changed. The model data is then saved to XML format for persistent data."},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":"New classes required to support XML of User Profile:"},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"* `XMLAdaptedUserProfile`"},{"lineNumber":415,"author":{"gitID":"-"},"content":"* `XMLAdaptedAllergy`"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Loading from storage"},{"lineNumber":418,"author":{"gitID":"-"},"content":"This was quite simple. Only one new method was required to be added to the `AddressBook` class to initialize"},{"lineNumber":419,"author":{"gitID":"-"},"content":"an `AddressBook` with the loaded `UserProfile`."},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d `Update` instead of `Add`"},{"lineNumber":425,"author":{"gitID":"-"},"content":"It was simpler to implement a single `AddressBook#updateUserProfile` method instead of"},{"lineNumber":426,"author":{"gitID":"-"},"content":"an `AddressBook#addUserProfile` and an update method. The update method simply sets the current `profile`"},{"lineNumber":427,"author":{"gitID":"-"},"content":"property in `AddressBook` to the new incoming `profile`."},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"By simply replacing the property, you don\u0027t need to check if the property is not null before"},{"lineNumber":430,"author":{"gitID":"-"},"content":"updating the profile. You also don\u0027t need to check if the profile is null before choosing to add a new"},{"lineNumber":431,"author":{"gitID":"-"},"content":"profile to the application. Separating add and update functionalities works for Food, but not for profile as the"},{"lineNumber":432,"author":{"gitID":"-"},"content":"additional complexity is unnecessary."},{"lineNumber":433,"author":{"gitID":"-"},"content":"//end::userconfig[]"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":436,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":437,"author":{"gitID":"-"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":447,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":448,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":453,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":454,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":455,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":456,"author":{"gitID":"-"},"content":""},{"lineNumber":457,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":458,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d `order` command feature"},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d What"},{"lineNumber":465,"author":{"gitID":"-"},"content":"The order command is the core of the application. It allows the program to order the food for the user. At it\u0027s core,"},{"lineNumber":466,"author":{"gitID":"-"},"content":"it job is to select the most probable food that the user desires and orders it via phone."},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Why"},{"lineNumber":469,"author":{"gitID":"-"},"content":"The motivation is that programmers are lazy and that eating food is mandatory even amidst long hacking sessions."},{"lineNumber":470,"author":{"gitID":"-"},"content":"This command automates the food ordering process with a quick command, that is the `order` command, streamlining the"},{"lineNumber":471,"author":{"gitID":"-"},"content":"food selecting and ordering process."},{"lineNumber":472,"author":{"gitID":"-"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d How"},{"lineNumber":474,"author":{"gitID":"-"},"content":"image::order-command-flow-chart.png[width\u003d\"450\"]"},{"lineNumber":475,"author":{"gitID":"-"},"content":". Order command searches through existing Foods in the HackEat book"},{"lineNumber":476,"author":{"gitID":"-"},"content":".. Within each Food, a score is derived based on number of factors such as: times ordered, mood, rating, price and"},{"lineNumber":477,"author":{"gitID":"-"},"content":" allergies."},{"lineNumber":478,"author":{"gitID":"-"},"content":". The foods with a score that is similar (within a given threshold) is randomly or heuristically chosen."},{"lineNumber":479,"author":{"gitID":"-"},"content":". The program will initiate a phone call via Twillio (or an equivalent service) to the chosen food\u0027s phone number."},{"lineNumber":480,"author":{"gitID":"-"},"content":". TwiML (or equivalent service) will be used to translate text to voice to communicate with the restaurant on the"},{"lineNumber":481,"author":{"gitID":"-"},"content":"other end and order a food with a pre-canned message."},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"The restaurant will then send the food over and the user will pay for the food."},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Alternatives and future considerations"},{"lineNumber":486,"author":{"gitID":"-"},"content":"A promising alternative is to use an existing API from UberEats or other food ordering services to allow more services"},{"lineNumber":487,"author":{"gitID":"-"},"content":"added such as: delivery time tracking, more restaurants. This would guarantee the service more reliably."},{"lineNumber":488,"author":{"gitID":"-"},"content":""},{"lineNumber":489,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":494,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":499,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":500,"author":{"gitID":"-"},"content":""},{"lineNumber":501,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":510,"author":{"gitID":"-"},"content":""},{"lineNumber":511,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":512,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":513,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":514,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":515,"author":{"gitID":"-"},"content":""},{"lineNumber":516,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":517,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":520,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":527,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":528,"author":{"gitID":"-"},"content":""},{"lineNumber":529,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":532,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":539,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":552,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":553,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":554,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":555,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":556,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":557,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":558,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":559,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":560,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":564,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":567,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":584,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":591,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":592,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":593,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":598,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":599,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":602,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":603,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":606,"author":{"gitID":"-"},"content":""},{"lineNumber":607,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":608,"author":{"gitID":"-"},"content":""},{"lineNumber":609,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":610,"author":{"gitID":"-"},"content":""},{"lineNumber":611,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":612,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":617,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":622,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":623,"author":{"gitID":"-"},"content":""},{"lineNumber":624,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all foods in the list."},{"lineNumber":625,"author":{"gitID":"-"},"content":"+"},{"lineNumber":626,"author":{"gitID":"-"},"content":"****"},{"lineNumber":627,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":628,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":629,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":630,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":631,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":632,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":633,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":634,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":635,"author":{"gitID":"-"},"content":"****"},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":638,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in HackEat, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":643,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":644,"author":{"gitID":"-"},"content":""},{"lineNumber":645,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in HackEat."},{"lineNumber":646,"author":{"gitID":"-"},"content":"+"},{"lineNumber":647,"author":{"gitID":"-"},"content":"****"},{"lineNumber":648,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":649,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":650,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":651,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/food/Food.java[`Food`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a food, and link:{repoURL}/src/main/java/seedu/address/model/food/Food.java[`Food`] allows you to update the tags."},{"lineNumber":652,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":653,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each food, and remove the `tag` from each food."},{"lineNumber":654,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":655,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":656,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":657,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":658,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":659,"author":{"gitID":"-"},"content":"****"},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":662,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":663,"author":{"gitID":"-"},"content":""},{"lineNumber":664,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last food in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":667,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":". Use different colors for different tags inside food cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":670,"author":{"gitID":"-"},"content":"+"},{"lineNumber":671,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":672,"author":{"gitID":"-"},"content":"+"},{"lineNumber":673,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":674,"author":{"gitID":"-"},"content":"+"},{"lineNumber":675,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":676,"author":{"gitID":"-"},"content":"+"},{"lineNumber":677,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":678,"author":{"gitID":"-"},"content":"+"},{"lineNumber":679,"author":{"gitID":"-"},"content":"****"},{"lineNumber":680,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":681,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/FoodCard.java[the `FoodCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":682,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":683,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":684,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":685,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `FoodCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":686,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":687,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":688,"author":{"gitID":"-"},"content":"****"},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":691,"author":{"gitID":"-"},"content":"+"},{"lineNumber":692,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":693,"author":{"gitID":"-"},"content":"+"},{"lineNumber":694,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":695,"author":{"gitID":"-"},"content":"+"},{"lineNumber":696,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":697,"author":{"gitID":"-"},"content":"+"},{"lineNumber":698,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":699,"author":{"gitID":"-"},"content":"+"},{"lineNumber":700,"author":{"gitID":"-"},"content":"****"},{"lineNumber":701,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":702,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":703,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":704,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":705,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":706,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":707,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":708,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":709,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":710,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":711,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":712,"author":{"gitID":"-"},"content":"****"},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in HackEat."},{"lineNumber":715,"author":{"gitID":"-"},"content":"+"},{"lineNumber":716,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":717,"author":{"gitID":"-"},"content":"+"},{"lineNumber":718,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":719,"author":{"gitID":"-"},"content":"+"},{"lineNumber":720,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":721,"author":{"gitID":"-"},"content":"+"},{"lineNumber":722,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":723,"author":{"gitID":"-"},"content":"+"},{"lineNumber":724,"author":{"gitID":"-"},"content":"****"},{"lineNumber":725,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":726,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":727,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever HackEat is updated."},{"lineNumber":728,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":729,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of foods when the application just started."},{"lineNumber":730,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of foods whenever there are new changes to the addressbook."},{"lineNumber":731,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":732,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of foods status bar."},{"lineNumber":733,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":734,"author":{"gitID":"-"},"content":"****"},{"lineNumber":735,"author":{"gitID":"-"},"content":""},{"lineNumber":736,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":737,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving HackEat to the cloud. However, the current implementation of the application constantly saves HackEat after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for HackEat storage."},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":742,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that HackEat can be saved in a fixed temporary location."},{"lineNumber":745,"author":{"gitID":"-"},"content":"+"},{"lineNumber":746,"author":{"gitID":"-"},"content":"****"},{"lineNumber":747,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":748,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":749,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":750,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":751,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":752,"author":{"gitID":"-"},"content":"****"},{"lineNumber":753,"author":{"gitID":"-"},"content":""},{"lineNumber":754,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":755,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":756,"author":{"gitID":"-"},"content":""},{"lineNumber":757,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":760,"author":{"gitID":"-"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":762,"author":{"gitID":"-"},"content":"Edits the remark for a food specified in the `INDEX`. +"},{"lineNumber":763,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":768,"author":{"gitID":"-"},"content":"Edits the remark for the first food to `Likes to drink coffee.`"},{"lineNumber":769,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":770,"author":{"gitID":"-"},"content":"Removes the remark for the first food."},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":775,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":780,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":785,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":788,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":793,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":794,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":799,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":800,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":801,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":802,"author":{"gitID":"-"},"content":""},{"lineNumber":803,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `FoodCard`"},{"lineNumber":804,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/FoodCard.java[`FoodCard`] s to display a remark for each food later."},{"lineNumber":805,"author":{"gitID":"-"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/FoodListCard.fxml[`FoodListCard.fxml`]."},{"lineNumber":809,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/FoodCard.java[`FoodCard`] to tie the variable to the actual label."},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":812,"author":{"gitID":"-"},"content":""},{"lineNumber":813,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/FoodCardHandle.java[`FoodCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":814,"author":{"gitID":"-"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":816,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/food/Food.java[`Food`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":819,"author":{"gitID":"-"},"content":""},{"lineNumber":820,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/food/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":821,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":826,"author":{"gitID":"-"},"content":""},{"lineNumber":827,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Food` to support a `Remark` field"},{"lineNumber":828,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/food/Food.java[`Food`]."},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":831,"author":{"gitID":"-"},"content":""},{"lineNumber":832,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/food/Food.java[`Food`]."},{"lineNumber":833,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the food will be created without a remark)."},{"lineNumber":834,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedFood` class"},{"lineNumber":837,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Food` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedFood.java[`XmlAdaptedFood`] to include a `Remark` field so that it will be saved."},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":". Fix `invalidAndValidFoodAddressBook.xml`, `typicalFoodsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":846,"author":{"gitID":"-"},"content":""},{"lineNumber":847,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `FoodBuilder`"},{"lineNumber":848,"author":{"gitID":"-"},"content":"Since `Food` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/FoodBuilder.java[`FoodBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/food/Food.java[`Food`]."},{"lineNumber":849,"author":{"gitID":"-"},"content":""},{"lineNumber":850,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/FoodBuilder.java[`FoodBuilder`]. This method will create a new `Remark` for the food that it is currently building."},{"lineNumber":853,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Food` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalFoods.java[`TypicalFoods`]."},{"lineNumber":854,"author":{"gitID":"-"},"content":""},{"lineNumber":855,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `FoodCard`"},{"lineNumber":856,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/FoodCard.java[`FoodCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/FoodCard.java[`FoodCard`]\u0027s constructor to bind the `Remark` field to the `Food` \u0027s remark."},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":863,"author":{"gitID":"-"},"content":""},{"lineNumber":864,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysFood(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":865,"author":{"gitID":"-"},"content":""},{"lineNumber":866,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":867,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a food."},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":882,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"* Developers/Hackers"},{"lineNumber":887,"author":{"gitID":"-"},"content":"** is picky and has a need to manage/order a significant number of pre-approved foods"},{"lineNumber":888,"author":{"gitID":"-"},"content":"** prefer desktop apps over other types"},{"lineNumber":889,"author":{"gitID":"-"},"content":"** can type fast"},{"lineNumber":890,"author":{"gitID":"-"},"content":"** prefers typing over mouse input"},{"lineNumber":891,"author":{"gitID":"-"},"content":"** is reasonably comfortable using CLI apps"},{"lineNumber":892,"author":{"gitID":"-"},"content":"** busy working on projects and immersed to change train of thought"},{"lineNumber":893,"author":{"gitID":"-"},"content":"** does not care about their body/health and willing to order food to doorstep"},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"*Value proposition*: Order food with as little disruption as possible to the user\u0027s workflow"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Feature contribution"},{"lineNumber":898,"author":{"gitID":"-"},"content":"*Major Enhancements:*"},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":"* Order command - Sam"},{"lineNumber":901,"author":{"gitID":"-"},"content":"** Allows users to order food from the HackEat book. Designed to choose a food that best suits the scenario, making it"},{"lineNumber":902,"author":{"gitID":"-"},"content":"trustworthy enough for hackers that are too lazy to order themselves."},{"lineNumber":903,"author":{"gitID":"-"},"content":"* Food Profile - Jackson"},{"lineNumber":904,"author":{"gitID":"-"},"content":"** Allows the user to browse through the HackEat book while showing visual statistics of the foods. Hackers, when not"},{"lineNumber":905,"author":{"gitID":"-"},"content":"hacking can optimise their foods and get insightful knowledge through data visualisation."},{"lineNumber":906,"author":{"gitID":"-"},"content":"* User shortcuts - Cheryl"},{"lineNumber":907,"author":{"gitID":"-"},"content":"** Sometimes ordering can still be tedious. With the shortcut system, users can create new shortcuts which minmises the"},{"lineNumber":908,"author":{"gitID":"-"},"content":"number of characters required to order foods. This is especially handy for the super users who need food ASAP. The"},{"lineNumber":909,"author":{"gitID":"-"},"content":"system will also include single commands to execute multiple commands, so users can order multiple foods with just one"},{"lineNumber":910,"author":{"gitID":"-"},"content":"command!"},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":""},{"lineNumber":913,"author":{"gitID":"-"},"content":"*Minor Enhancements:*"},{"lineNumber":914,"author":{"gitID":"-"},"content":""},{"lineNumber":915,"author":{"gitID":"-"},"content":"* Addition of User profile - Jackson"},{"lineNumber":916,"author":{"gitID":"-"},"content":"** User profile will save the preferences of the user, including allergies and how frugal they are. It also stores"},{"lineNumber":917,"author":{"gitID":"-"},"content":"personal information so the `order` command can order food to their address."},{"lineNumber":918,"author":{"gitID":"-"},"content":"* Addition of Price property - Cheryl"},{"lineNumber":919,"author":{"gitID":"-"},"content":"** Price property is required to track budgeting and control expenses. If the user is frugal, expensive foods will be"},{"lineNumber":920,"author":{"gitID":"-"},"content":"ordered less frequently."},{"lineNumber":921,"author":{"gitID":"-"},"content":"* Addition of Rating property - Sam"},{"lineNumber":922,"author":{"gitID":"-"},"content":"** Rating property of a food is essential to gather knowledge on what food the user enjoys. Highly rated foods will be"},{"lineNumber":923,"author":{"gitID":"-"},"content":"recommended more often, until it is too frequent."},{"lineNumber":924,"author":{"gitID":"-"},"content":""},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":928,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":931,"author":{"gitID":"-"},"content":""},{"lineNumber":932,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":933,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":934,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":935,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":936,"author":{"gitID":"-"},"content":""},{"lineNumber":937,"author":{"gitID":"tohcheryl"},"content":"|`* * *` |expert programmer |Use CLI to add food that I like | I can get recommended meals that I will likely enjoy"},{"lineNumber":938,"author":{"gitID":"-"},"content":""},{"lineNumber":939,"author":{"gitID":"tohcheryl"},"content":"|`* * *` |picky user |delete a food | I can avoid meals that I will probably not enjoy"},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"tohcheryl"},"content":"|`* * *` |picky user |find a food by name | to see how many times I’ve ordered certain foods"},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"tohcheryl"},"content":"|`* * *` |health-conscious user |Add my allergies | I can eat safely and not die"},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"tohcheryl"},"content":"|`* * *` |health-conscious user | Be blocked from adding food preferences | Be told if the food cannot be accepted due to allergies and not die"},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"tohcheryl"},"content":"|`* * *` |picky user | Edit my food preferences | I can have meals which fit my current requirements"},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"tohcheryl"},"content":"|`* * *` |critical user | Contact support | Fix any issues that may happen with the application"},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"tohcheryl"},"content":"|`* * *` |expert programmer  | Can use Unix-y commands to do actions | I am not dis-immersed from coding-work when ordering food"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"tohcheryl"},"content":"|`* * *` |speedy user |Pre-fill/browse local area/people nearby food address books/playlists | Save time building my own book"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"tohcheryl"},"content":"|`* *` |critical user | Rate a meal on a scale from 1 to 5 | I can get recommended meals that I will likely enjoy"},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"tohcheryl"},"content":"|`* *` |budget-conscious user | Set a price range for orders | to help with budgeting"},{"lineNumber":958,"author":{"gitID":"-"},"content":""},{"lineNumber":959,"author":{"gitID":"tohcheryl"},"content":"|`* *` |speedy user | Add shortcuts for my favourite commands | Increase the speed in which I order food"},{"lineNumber":960,"author":{"gitID":"-"},"content":""},{"lineNumber":961,"author":{"gitID":"tohcheryl"},"content":"|`* *` |health-conscious user | See how much calories in each meal | to better track and align my personal health goals"},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"tohcheryl"},"content":"|`* *` |cultured user | Add culture tags to the food items that I like | The app can recommend certain types of cultural dishes"},{"lineNumber":964,"author":{"gitID":"-"},"content":""},{"lineNumber":965,"author":{"gitID":"tohcheryl"},"content":"|`* *` |curious user | Discover new restaurants | I can try new types of cuisine"},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"tohcheryl"},"content":"|`* *` |speedy user | order a random meal that I will probably like to my doorstep | I can minimise distraction of food ordering and focus on my work"},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"tohcheryl"},"content":"|`* *` |visual user | See images of how the food looks like | So that I know how a dish appears if I have never heard of the name before"},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"tohcheryl"},"content":"|`* *` |indecisive user | Type in my mood and get a list of recommended foods | I can decide more quickly on what to eat"},{"lineNumber":972,"author":{"gitID":"-"},"content":""},{"lineNumber":973,"author":{"gitID":"tohcheryl"},"content":"|`* *` |private user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing the food by accident"},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"tohcheryl"},"content":"|`* *` |indecisive user |Use different criteria to help decide where my food will be ordered from |I can order food based on my current needs e.g. fastest chicken rice(if I am starving)"},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"tohcheryl"},"content":"|`* *` |indecisive user |Set a maximum number of food or restaurants to be shown |I will not be overwhelmed by all the information"},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"tohcheryl"},"content":"|`* *` |budget-conscious user |Search, add and order for foods with a sale or discounted price | Save money and get good value for money"},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"tohcheryl"},"content":"|`*` |time-conscious user |Check how long my food will take to arrive |I have an idea of the waiting time"},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"tohcheryl"},"content":"|`*` |picky user |Save restaurants that I like |I can order food from my preferred restaurants more easily"},{"lineNumber":984,"author":{"gitID":"-"},"content":""},{"lineNumber":985,"author":{"gitID":"tohcheryl"},"content":"|`*` |health-conscious user |Set personal goals |I can get recommended meals which are aligned with my objectives"},{"lineNumber":986,"author":{"gitID":"-"},"content":""},{"lineNumber":987,"author":{"gitID":"tohcheryl"},"content":"|`*` |social user |Add friends using the app |So I can know what they’re eating and talk about it"},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"tohcheryl"},"content":"|`*` |hungry user |See the delivery rate of the deliverer |I can estimate the probability of the chances of my food arriving"},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"tohcheryl"},"content":"|`*` |picky user |See the rating of a restaurant |I know how reliable/how good the food is from that restaurant"},{"lineNumber":992,"author":{"gitID":"-"},"content":""},{"lineNumber":993,"author":{"gitID":"tohcheryl"},"content":"|`*` |picky user |Delete restaurants that I have saved | So that I can keep an updated list of restaurants I like"},{"lineNumber":994,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":999,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1004,"author":{"gitID":"tohcheryl"},"content":"\u003d\u003d Use case: Rate a meal"},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"tohcheryl"},"content":"1. User types in a food that he would like to eat"},{"lineNumber":1009,"author":{"gitID":"tohcheryl"},"content":"2. Hackeat orders the food"},{"lineNumber":1010,"author":{"gitID":"tohcheryl"},"content":"3. User rates the meal he just had"},{"lineNumber":1011,"author":{"gitID":"tohcheryl"},"content":"4. Hackeat saves the rating."},{"lineNumber":1012,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1013,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1018,"author":{"gitID":"tohcheryl"},"content":"* 1a. Food contains ingredients that he is allergic to."},{"lineNumber":1019,"author":{"gitID":"tohcheryl"},"content":"+"},{"lineNumber":1020,"author":{"gitID":"tohcheryl"},"content":"[none]"},{"lineNumber":1021,"author":{"gitID":"tohcheryl"},"content":"** 1a1. Hackeat informs user of his allergy."},{"lineNumber":1022,"author":{"gitID":"tohcheryl"},"content":"** 1a2. User decides whether to go ahead with the order."},{"lineNumber":1023,"author":{"gitID":"tohcheryl"},"content":"+"},{"lineNumber":1024,"author":{"gitID":"tohcheryl"},"content":"** Use case ends."},{"lineNumber":1025,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":1026,"author":{"gitID":"tohcheryl"},"content":"[discrete]"},{"lineNumber":1027,"author":{"gitID":"tohcheryl"},"content":"\u003d\u003d Use case: Edit food preferences"},{"lineNumber":1028,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":1029,"author":{"gitID":"tohcheryl"},"content":"*MSS*"},{"lineNumber":1030,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":1031,"author":{"gitID":"tohcheryl"},"content":"1. User types in a command to view his food preferences."},{"lineNumber":1032,"author":{"gitID":"tohcheryl"},"content":"2. Hackeat displays a list of food preferences."},{"lineNumber":1033,"author":{"gitID":"tohcheryl"},"content":"3. User types in command to modify his food preferences."},{"lineNumber":1034,"author":{"gitID":"tohcheryl"},"content":"4. Hackeat updates user\u0027s food preferences."},{"lineNumber":1035,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1036,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1039,"author":{"gitID":"-"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1041,"author":{"gitID":"tohcheryl"},"content":"* 3a. User types in a food preference that already exists."},{"lineNumber":1042,"author":{"gitID":"tohcheryl"},"content":"+"},{"lineNumber":1043,"author":{"gitID":"tohcheryl"},"content":"[none]"},{"lineNumber":1044,"author":{"gitID":"tohcheryl"},"content":"** 3a1. Hackeat informs user that food preference already exists."},{"lineNumber":1045,"author":{"gitID":"tohcheryl"},"content":"+"},{"lineNumber":1046,"author":{"gitID":"tohcheryl"},"content":"** Use case ends."},{"lineNumber":1047,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":1048,"author":{"gitID":"tohcheryl"},"content":"[discrete]"},{"lineNumber":1049,"author":{"gitID":"tohcheryl"},"content":"\u003d\u003d Use case: Search, add and order food on sale"},{"lineNumber":1050,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":1051,"author":{"gitID":"tohcheryl"},"content":"*MSS*"},{"lineNumber":1052,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":1053,"author":{"gitID":"tohcheryl"},"content":"1. User searches for food which are on sale."},{"lineNumber":1054,"author":{"gitID":"tohcheryl"},"content":"2. Hackeat returns a list of relevant food."},{"lineNumber":1055,"author":{"gitID":"tohcheryl"},"content":"3. User picks one of the food to order."},{"lineNumber":1056,"author":{"gitID":"tohcheryl"},"content":"4. Hackeat helps to order the food."},{"lineNumber":1057,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1058,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1059,"author":{"gitID":"-"},"content":""},{"lineNumber":1060,"author":{"gitID":"tohcheryl"},"content":"*Extensions*"},{"lineNumber":1061,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":1062,"author":{"gitID":"tohcheryl"},"content":"[none]"},{"lineNumber":1063,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":1064,"author":{"gitID":"tohcheryl"},"content":"* 1a. No food is on sale"},{"lineNumber":1065,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1066,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":1067,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":""},{"lineNumber":1069,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1070,"author":{"gitID":"-"},"content":""},{"lineNumber":1071,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1072,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1075,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 foods without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1076,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1077,"author":{"gitID":"-"},"content":".  A programmer should be able to select and order food faster than using a mobile application like UberEats, Foodora, etc. given that the user has set-up his/her food preferences."},{"lineNumber":1078,"author":{"gitID":"-"},"content":".  The security measures required for safe handling of payments, home addresses and \u003c\u003ccredit-card-details, credit card details\u003e\u003e should be industry-standard."},{"lineNumber":1079,"author":{"gitID":"-"},"content":".  Complex tasks such as payment should be outsourced to existing, leading payment providers such as Stripe so that we can benefit from well-developed products."},{"lineNumber":1080,"author":{"gitID":"-"},"content":".  A reliable \u003c\u003cfood-delivery-network, food delivery network\u003e\u003e should be used to actually fulfill the food orders and deliveries."},{"lineNumber":1081,"author":{"gitID":"-"},"content":".  The food delivery services we use to power the backend of the app should offer a \u003c\u003cjava-api, Java API\u003e\u003e."},{"lineNumber":1082,"author":{"gitID":"-"},"content":".  The user experience should be similar to the \u003c\u003cenvironment, environment\u003e\u003e that programmers are used."},{"lineNumber":1083,"author":{"gitID":"-"},"content":".  After asking for a food suggestion, the system should respond within 1 second."},{"lineNumber":1084,"author":{"gitID":"-"},"content":".  The service provided by us should be cost-neutral or profitable."},{"lineNumber":1085,"author":{"gitID":"-"},"content":".  The user interface should be simple and minimise distractions so that programmers can continue with their work in a focused manner."},{"lineNumber":1086,"author":{"gitID":"-"},"content":".  A user should not be bored with the food that the app suggests and orders, as a certain level of novelty and surprise must be provided with each experience."},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1090,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1093,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1094,"author":{"gitID":"-"},"content":""},{"lineNumber":1095,"author":{"gitID":"-"},"content":"[[food-delivery-network]] Food delivery network::"},{"lineNumber":1096,"author":{"gitID":"-"},"content":"Companies such as delivery.com, eatstreet.com, and ordr.in that offer APIs to access their food delivery service."},{"lineNumber":1097,"author":{"gitID":"-"},"content":"These services handle the communication with restaurants and deliverers for successful delivery of the food."},{"lineNumber":1098,"author":{"gitID":"-"},"content":""},{"lineNumber":1099,"author":{"gitID":"-"},"content":"[[environment]] Environment::"},{"lineNumber":1100,"author":{"gitID":"-"},"content":"Refers to the visual landscape inhabited by code monkeys. Such landscapes are characterised by certain fonts,"},{"lineNumber":1101,"author":{"gitID":"-"},"content":"commands, and the plain look and feel of terminal applications."},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"[[java-api]] Java API::"},{"lineNumber":1104,"author":{"gitID":"-"},"content":"Refers to a Java library that can be used to programmatically access a food delivery service."},{"lineNumber":1105,"author":{"gitID":"-"},"content":""},{"lineNumber":1106,"author":{"gitID":"-"},"content":"[[price-range]] Price Range::"},{"lineNumber":1107,"author":{"gitID":"-"},"content":"Price of the food. Can be 1, 2, or 3."},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"[[cuisine]] Cuisine::"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"The country from which the food originates."},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":"[[credit-card-details]] Credit card details::"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"Card number, card holder\u0027s name, expiry date and CSC (card security code)."},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"-"},"content":"[[order]] Order::"},{"lineNumber":1116,"author":{"gitID":"-"},"content":"An set of food items that a user asks the app to deliver."},{"lineNumber":1117,"author":{"gitID":"-"},"content":""},{"lineNumber":1118,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1119,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1124,"author":{"gitID":"-"},"content":""},{"lineNumber":1125,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1126,"author":{"gitID":"-"},"content":""},{"lineNumber":1127,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1128,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1133,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1134,"author":{"gitID":"-"},"content":""},{"lineNumber":1135,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1136,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1137,"author":{"gitID":"-"},"content":""},{"lineNumber":1138,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1141,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1144,"author":{"gitID":"-"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1148,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1149,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1150,"author":{"gitID":"-"},"content":""},{"lineNumber":1151,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1154,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1155,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1156,"author":{"gitID":"-"},"content":""},{"lineNumber":1157,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1158,"author":{"gitID":"-"},"content":""},{"lineNumber":1159,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a food"},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"-"},"content":". Deleting a food while all foods are listed"},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"-"},"content":".. Prerequisites: List all foods using the `list` command. Multiple foods in the list."},{"lineNumber":1164,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1165,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1166,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1167,"author":{"gitID":"-"},"content":"   Expected: No food is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1168,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1169,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1174,"author":{"gitID":"-"},"content":""},{"lineNumber":1175,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1176,"author":{"gitID":"-"},"content":""},{"lineNumber":1177,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1178,"author":{"gitID":"-"},"content":""},{"lineNumber":1179,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"tohcheryl":96,"-":1083}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":19,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.user.UserProfile;"},{"lineNumber":21,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":22,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.storage.XmlAdaptedAllergy;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedFood;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.FoodBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final File MISSING_FOOD_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingFoodField.xml\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final File INVALID_FOOD_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidFoodField.xml\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final File VALID_FOOD_FILE \u003d new File(TEST_DATA_FOLDER + \"validFood.xml\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":47,"author":{"gitID":"tohcheryl"},"content":"    private static final String VALID_PRICE \u003d \"$0\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String VALID_RATING \u003d \"0\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":50,"author":{"gitID":"tohcheryl"},"content":"    private static final List\u003cXmlAdaptedAllergy\u003e VALID_ALLERGIES \u003d Collections.singletonList("},{"lineNumber":51,"author":{"gitID":"tohcheryl"},"content":"            new XmlAdaptedAllergy(\"lactose\"));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getFoodList().size());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void xmlAdaptedFoodFromFile_fileWithMissingFoodField_validResult() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        XmlAdaptedFood actualFood \u003d XmlUtil.getDataFromFile("},{"lineNumber":90,"author":{"gitID":"-"},"content":"                MISSING_FOOD_FIELD_FILE, XmlAdaptedFoodWithRootElement.class);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedFood expectedFood \u003d new XmlAdaptedFood("},{"lineNumber":92,"author":{"gitID":"tohcheryl"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING, VALID_TAGS, VALID_ALLERGIES);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertEquals(expectedFood, actualFood);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void xmlAdaptedFoodFromFile_fileWithInvalidFoodField_validResult() throws Exception {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        XmlAdaptedFood actualFood \u003d XmlUtil.getDataFromFile("},{"lineNumber":99,"author":{"gitID":"-"},"content":"                INVALID_FOOD_FIELD_FILE, XmlAdaptedFoodWithRootElement.class);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAdaptedFood expectedFood \u003d new XmlAdaptedFood("},{"lineNumber":101,"author":{"gitID":"tohcheryl"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING,"},{"lineNumber":102,"author":{"gitID":"tohcheryl"},"content":"                VALID_TAGS, VALID_ALLERGIES);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedFood, actualFood);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void xmlAdaptedFoodFromFile_fileWithValidFood_validResult() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        XmlAdaptedFood actualFood \u003d XmlUtil.getDataFromFile("},{"lineNumber":109,"author":{"gitID":"-"},"content":"                VALID_FOOD_FILE, XmlAdaptedFoodWithRootElement.class);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        XmlAdaptedFood expectedFood \u003d new XmlAdaptedFood("},{"lineNumber":111,"author":{"gitID":"tohcheryl"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING,"},{"lineNumber":112,"author":{"gitID":"tohcheryl"},"content":"                VALID_TAGS, VALID_ALLERGIES);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertEquals(expectedFood, actualFood);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":137,"author":{"gitID":"tohcheryl"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBookStub());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"tohcheryl"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBookStub());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":144,"author":{"gitID":"-"},"content":"                builder.withFood(new FoodBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedFood}"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"food\")"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedFoodWithRootElement extends XmlAdaptedFood {}"},{"lineNumber":157,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":158,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"tohcheryl"},"content":"     * An AddressBookStub with a default user profile"},{"lineNumber":160,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"tohcheryl"},"content":"    private class AddressBookStub extends AddressBook {"},{"lineNumber":162,"author":{"gitID":"tohcheryl"},"content":"        final UniqueFoodList foods;"},{"lineNumber":163,"author":{"gitID":"tohcheryl"},"content":"        final UniqueTagList tags;"},{"lineNumber":164,"author":{"gitID":"tohcheryl"},"content":"        private UserProfile profile;"},{"lineNumber":165,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":166,"author":{"gitID":"tohcheryl"},"content":"        public AddressBookStub() {"},{"lineNumber":167,"author":{"gitID":"tohcheryl"},"content":"            this.foods \u003d new UniqueFoodList();"},{"lineNumber":168,"author":{"gitID":"tohcheryl"},"content":"            this.tags \u003d new UniqueTagList();"},{"lineNumber":169,"author":{"gitID":"tohcheryl"},"content":"            this.profile \u003d SampleDataUtil.getSampleProfile();"},{"lineNumber":170,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":172,"author":{"gitID":"tohcheryl"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"tohcheryl"},"content":"        public UserProfile getUserProfile() {"},{"lineNumber":174,"author":{"gitID":"tohcheryl"},"content":"            return profile;"},{"lineNumber":175,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":35,"-":142}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_APPLE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BANANA;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_APPLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BANANA;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_APPLE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BANANA;"},{"lineNumber":20,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_APPLE;"},{"lineNumber":21,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BANANA;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_APPLE;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_BANANA;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIED;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NUTS;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BANANA;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BANANA;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BANANA;"},{"lineNumber":30,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BANANA;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BANANA;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIED;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NUTS;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FOODS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalFoods.APPLE;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalFoods.BANANA;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalFoods.KEYWORD_MATCHING_MOUSSE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Address;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Email;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Phone;"},{"lineNumber":54,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.Price;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Rating;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.food.exceptions.DuplicateFoodException;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.food.exceptions.FoodNotFoundException;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.testutil.FoodBuilder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.testutil.FoodUtil;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_FOOD;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BANANA + \"  \""},{"lineNumber":75,"author":{"gitID":"tohcheryl"},"content":"                + PHONE_DESC_BANANA + \" \" + EMAIL_DESC_BANANA + \"  \" + ADDRESS_DESC_BANANA"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                +  \"  \" + PRICE_DESC_BANANA + \" \" + RATING_DESC_BANANA + \" \" + TAG_DESC_NUTS + \" \";"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Food editedFood \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"},{"lineNumber":78,"author":{"gitID":"tohcheryl"},"content":"                .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA).withPrice(VALID_PRICE_BANANA)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withRating(VALID_RATING_BANANA).withTags(VALID_TAG_NUTS).build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedFood);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last food in the list -\u003e last food restored */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last food in the list -\u003e last food edited again */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        model.updateFood("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                getModel().getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased()), editedFood);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: edit a food with new values same as existing values -\u003e edited */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BANANA + PHONE_DESC_BANANA"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BANANA + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIED + TAG_DESC_NUTS;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BANANA);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_FOOD;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIED;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Food foodToEdit \u003d getModel().getFilteredFoodList().get(index.getZeroBased());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        editedFood \u003d new FoodBuilder(foodToEdit).withTags(VALID_TAG_FRIED).build();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedFood);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_FOOD;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        editedFood \u003d new FoodBuilder(foodToEdit).withTags().build();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedFood);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* Case: filtered food list, edit index within bounds of address book and food list -\u003e edited */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        showFoodsWithName(KEYWORD_MATCHING_MOUSSE);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_FOOD;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredFoodList().size());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BANANA;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        foodToEdit \u003d getModel().getFilteredFoodList().get(index.getZeroBased());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        editedFood \u003d new FoodBuilder(foodToEdit).withName(VALID_NAME_BANANA).build();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedFood);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: filtered food list, edit index within bounds of address book but out of bounds of food list"},{"lineNumber":125,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":126,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        showFoodsWithName(KEYWORD_MATCHING_MOUSSE);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getFoodList().size();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BANANA,"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a food card is selected -------------------------- */"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the food list, edit a food -\u003e edited, card selection remains unchanged but"},{"lineNumber":135,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":136,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        showAllFoods();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_FOOD;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        selectFood(index);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_APPLE + PHONE_DESC_APPLE"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE + PRICE_DESC_APPLE + RATING_DESC_APPLE + TAG_DESC_FRIED;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new food\u0027s name"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, APPLE, index);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BANANA,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BANANA,"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredFoodList().size() + 1;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BANANA,"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BANANA,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased(),"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"tohcheryl"},"content":"        /* Case: invalid price -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"tohcheryl"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased() + INVALID_PRICE_DESC,"},{"lineNumber":187,"author":{"gitID":"tohcheryl"},"content":"                Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: invalid rating -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased() + INVALID_RATING_DESC,"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        /* Case: edit a food with new values same as another food\u0027s values -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        executeCommand(FoodUtil.getAddCommand(BANANA));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getFoodList().contains(BANANA));"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_FOOD;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredFoodList().get(index.getZeroBased()).equals(BANANA));"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BANANA + PHONE_DESC_BANANA"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BANANA + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA"},{"lineNumber":204,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIED + TAG_DESC_NUTS;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_FOOD);"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        /* Case: edit a food with new values same as another food\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BANANA + PHONE_DESC_BANANA"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BANANA + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA"},{"lineNumber":210,"author":{"gitID":"-"},"content":"                + TAG_DESC_NUTS;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_FOOD);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Food, Index)} except that"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Food, Index)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Food editedFood) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedFood, null);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the food at index {@code toEdit} being"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedFood}.\u003cbr\u003e"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Food editedFood,"},{"lineNumber":235,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            expectedModel.updateFood("},{"lineNumber":239,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredFoodList().get(toEdit.getZeroBased()), editedFood);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        } catch (DuplicateFoodException | FoodNotFoundException e) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":243,"author":{"gitID":"-"},"content":"                    \"editedFood is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":247,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood), expectedSelectedCardIndex);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":276,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":11,"-":299}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_APPLE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BANANA;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_APPLE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BANANA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_APPLE;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BANANA;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":21,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_APPLE;"},{"lineNumber":22,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BANANA;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_APPLE;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_BANANA;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIED;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NUTS;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_APPLE;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BANANA;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_APPLE;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BANANA;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_APPLE;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_APPLE;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BANANA;"},{"lineNumber":35,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_APPLE;"},{"lineNumber":36,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BANANA;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_APPLE;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BANANA;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIED;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NUTS;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Address;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Email;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Phone;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Price;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Rating;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.FoodBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Food expectedFood \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA)"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                .withPrice(VALID_PRICE_BANANA).withRating(VALID_RATING_BANANA).withTags(VALID_TAG_FRIED).build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BANANA + PHONE_DESC_BANANA"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                        + EMAIL_DESC_BANANA + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                        + TAG_DESC_FRIED, new AddCommand(expectedFood));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_APPLE + NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_FRIED,"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                new AddCommand(expectedFood));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BANANA + PHONE_DESC_APPLE + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_FRIED,"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                new AddCommand(expectedFood));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_APPLE + EMAIL_DESC_BANANA"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_FRIED,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                new AddCommand(expectedFood));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                        + ADDRESS_DESC_APPLE + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                        + TAG_DESC_FRIED, new AddCommand(expectedFood));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Food expectedFoodMultipleTags \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"},{"lineNumber":93,"author":{"gitID":"tohcheryl"},"content":"                .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA).withPrice(VALID_PRICE_BANANA)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .withRating(VALID_RATING_BANANA).withTags(VALID_TAG_FRIED, VALID_TAG_NUTS).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_NUTS + TAG_DESC_FRIED,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                new AddCommand(expectedFoodMultipleTags));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Food expectedFood \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE)"},{"lineNumber":104,"author":{"gitID":"tohcheryl"},"content":"                .withEmail(VALID_EMAIL_APPLE).withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .withRating(VALID_RATING_APPLE).withTags().build();"},{"lineNumber":106,"author":{"gitID":"tohcheryl"},"content":"        assertParseSuccess(parser, NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                        + ADDRESS_DESC_APPLE + PRICE_DESC_APPLE + RATING_DESC_APPLE,"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                new AddCommand(expectedFood));"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Food expectedFoodNoEmail \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE)"},{"lineNumber":112,"author":{"gitID":"tohcheryl"},"content":"                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE).withTags().build();"},{"lineNumber":113,"author":{"gitID":"tohcheryl"},"content":"        assertParseSuccess(parser, NAME_DESC_APPLE + PHONE_DESC_APPLE + ADDRESS_DESC_APPLE + PRICE_DESC_APPLE,"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                new AddCommand(expectedFoodNoEmail));"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Food expectedFoodNoAddress \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE)"},{"lineNumber":118,"author":{"gitID":"tohcheryl"},"content":"                .withEmail(VALID_EMAIL_APPLE).withPrice(VALID_PRICE_APPLE).withTags().build();"},{"lineNumber":119,"author":{"gitID":"tohcheryl"},"content":"        assertParseSuccess(parser, NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + PRICE_DESC_APPLE,"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                new AddCommand(expectedFoodNoAddress));"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"tohcheryl"},"content":"        // missing price prefix"},{"lineNumber":123,"author":{"gitID":"tohcheryl"},"content":"        Food expectedFoodNoPrice \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE)"},{"lineNumber":124,"author":{"gitID":"tohcheryl"},"content":"                .withEmail(VALID_EMAIL_APPLE).withAddress(VALID_ADDRESS_APPLE).withRating(VALID_RATING_APPLE)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .withTags().build();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"},{"lineNumber":127,"author":{"gitID":"tohcheryl"},"content":"                        + RATING_DESC_APPLE,"},{"lineNumber":128,"author":{"gitID":"tohcheryl"},"content":"                new AddCommand(expectedFoodNoPrice));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // missing rating"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Food expectedFoodNoRating \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_APPLE).withEmail(VALID_EMAIL_APPLE).withPrice(VALID_PRICE_APPLE)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                .withTags().build();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                        + PRICE_DESC_APPLE, new AddCommand(expectedFoodNoRating));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA + ADDRESS_DESC_BANANA,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + VALID_PHONE_BANANA + EMAIL_DESC_BANANA + ADDRESS_DESC_BANANA,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BANANA + VALID_PHONE_BANANA + VALID_EMAIL_BANANA + VALID_ADDRESS_BANANA,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":158,"author":{"gitID":"tohcheryl"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                        + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_NUTS"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                        + TAG_DESC_FRIED, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + INVALID_PHONE_DESC + EMAIL_DESC_BANANA"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                        + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_NUTS"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIED, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + INVALID_EMAIL_DESC"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                        + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_NUTS"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIED, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                        + INVALID_ADDRESS_DESC + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_NUTS"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIED, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":177,"author":{"gitID":"tohcheryl"},"content":"        // invalid price"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                        + ADDRESS_DESC_BANANA + INVALID_PRICE_DESC + RATING_DESC_BANANA + TAG_DESC_NUTS"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIED, Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        // invalid rating"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"},{"lineNumber":184,"author":{"gitID":"-"},"content":"                        + ADDRESS_DESC_BANANA + VALID_PRICE_BANANA + INVALID_RATING_DESC + TAG_DESC_NUTS"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                        + TAG_DESC_FRIED, Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                        + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + INVALID_TAG_DESC"},{"lineNumber":190,"author":{"gitID":"-"},"content":"                        + VALID_TAG_FRIED, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":193,"author":{"gitID":"tohcheryl"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                        + INVALID_ADDRESS_DESC + PRICE_DESC_BANANA + RATING_DESC_BANANA, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BANANA + PHONE_DESC_BANANA"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                        + EMAIL_DESC_BANANA + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                        + TAG_DESC_NUTS + TAG_DESC_FRIED,"},{"lineNumber":200,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":21,"-":181}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.food.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.food.exceptions.FoodNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditFoodDescriptorBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_APPLE \u003d \"Apple Pie\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BANANA \u003d \"Banana Smoothie\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_APPLE \u003d \"11111111\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BANANA \u003d \"22222222\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_APPLE \u003d \"appleshop@example.com\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BANANA \u003d \"bananashop@example.com\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_APPLE \u003d \"Block 312, Apple Street 1\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BANANA \u003d \"Block 123, Banana Street 3\";"},{"lineNumber":43,"author":{"gitID":"tohcheryl"},"content":"    public static final String VALID_PRICE_APPLE \u003d \"$0.50\";"},{"lineNumber":44,"author":{"gitID":"tohcheryl"},"content":"    public static final String VALID_PRICE_BANANA \u003d \"$0.80\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_RATING_APPLE \u003d \"3\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_RATING_BANANA \u003d \"5\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_NUTS \u003d \"nuts\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIED \u003d \"fried\";"},{"lineNumber":49,"author":{"gitID":"tohcheryl"},"content":"    public static final String VALID_ALLERGY_LACTOSE \u003d \"lactose\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_APPLE \u003d \" \" + PREFIX_NAME + VALID_NAME_APPLE;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BANANA \u003d \" \" + PREFIX_NAME + VALID_NAME_BANANA;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_APPLE \u003d \" \" + PREFIX_PHONE + VALID_PHONE_APPLE;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BANANA \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BANANA;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_APPLE \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_APPLE;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BANANA \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BANANA;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_APPLE \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_APPLE;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BANANA \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BANANA;"},{"lineNumber":59,"author":{"gitID":"tohcheryl"},"content":"    public static final String PRICE_DESC_APPLE \u003d \" \" + PREFIX_PRICE + VALID_PRICE_APPLE;"},{"lineNumber":60,"author":{"gitID":"tohcheryl"},"content":"    public static final String PRICE_DESC_BANANA \u003d \" \" + PREFIX_PRICE + VALID_PRICE_BANANA;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String RATING_DESC_APPLE \u003d \" \" + PREFIX_RATING + VALID_RATING_APPLE;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String RATING_DESC_BANANA \u003d \" \" + PREFIX_RATING + VALID_RATING_BANANA;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIED \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIED;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_NUTS \u003d \" \" + PREFIX_TAG + VALID_TAG_NUTS;"},{"lineNumber":65,"author":{"gitID":"tohcheryl"},"content":"    public static final String ALLERGY_DESC_LACTOSE \u003d \" \" + PREFIX_ALLERGIES + VALID_ALLERGY_LACTOSE;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Panc\u0026ke\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"banana!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":71,"author":{"gitID":"tohcheryl"},"content":"    public static final String INVALID_PRICE_DESC \u003d \" \" + PREFIX_PRICE + \"e.40\"; // letters not allowed for prices"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String INVALID_RATING_DESC \u003d \" \" + PREFIX_RATING + \"9\"; // out of range"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"poise*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":74,"author":{"gitID":"tohcheryl"},"content":"    public static final String INVALID_ALLERGY_DESC \u003d \" \" + PREFIX_ALLERGIES + \"#peanut\"; // \u0027#\u0027 not allowed in allergy"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditFoodDescriptor DESC_APPLE;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditFoodDescriptor DESC_BANANA;"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        DESC_APPLE \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_APPLE)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_APPLE).withAddress(VALID_ADDRESS_APPLE)"},{"lineNumber":85,"author":{"gitID":"tohcheryl"},"content":"                .withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_APPLE).withTags(VALID_TAG_FRIED)"},{"lineNumber":86,"author":{"gitID":"tohcheryl"},"content":"                .withAllergies(VALID_ALLERGY_LACTOSE).build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        DESC_BANANA \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_BANANA)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BANANA).withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .withPrice(VALID_PRICE_BANANA).withRating(VALID_RATING_BANANA)"},{"lineNumber":90,"author":{"gitID":"tohcheryl"},"content":"                .withTags(VALID_TAG_NUTS, VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * - HackEat and the filtered food list in the {@code actualModel} remain unchanged"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":118,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        List\u003cFood\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFoodList());"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredFoodList());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the food at the given {@code targetIndex} in the"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public static void showFoodAtIndex(Model model, Index targetIndex) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFoodList().size());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Food food \u003d model.getFilteredFoodList().get(targetIndex.getZeroBased());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d food.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        model.updateFilteredFoodList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredFoodList().size());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Deletes the first food in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public static void deleteFirstFood(Model model) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        Food firstFood \u003d model.getFilteredFoodList().get(0);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            model.deleteFood(firstFood);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        } catch (FoodNotFoundException pnfe) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Food in filtered list must exist in model.\", pnfe);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":13,"-":161}},{"path":"src/test/java/seedu/address/logic/parser/UserConfigCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"tohcheryl"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_APPLE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BANANA;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_APPLE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BANANA;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_APPLE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BANANA;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_APPLE;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_APPLE;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BANANA;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":21,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.model.util.SampleDataUtil.getAllergySet;"},{"lineNumber":22,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":23,"author":{"gitID":"tohcheryl"},"content":"import org.junit.Test;"},{"lineNumber":24,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UserConfigCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Address;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.food.allergy.Allergy;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.user.UserProfile;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"tohcheryl"},"content":"public class UserConfigCommandParserTest {"},{"lineNumber":33,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":34,"author":{"gitID":"tohcheryl"},"content":"    // temp fix"},{"lineNumber":35,"author":{"gitID":"tohcheryl"},"content":"    private static final String ALLERGIES_DESC_APPLE \u003d \" \" + PREFIX_ALLERGIES + \"lactose\";"},{"lineNumber":36,"author":{"gitID":"tohcheryl"},"content":"    private static final String INVALID_ALLERGIES_DESC \u003d \" \" + PREFIX_ALLERGIES + \"#lactose\";"},{"lineNumber":37,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":38,"author":{"gitID":"tohcheryl"},"content":"    private UserConfigCommandParser parser \u003d new UserConfigCommandParser();"},{"lineNumber":39,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":43,"author":{"gitID":"tohcheryl"},"content":"        UserProfile expectedUserProfile \u003d new UserProfile(new Name(VALID_NAME_APPLE), new Phone(VALID_PHONE_APPLE),"},{"lineNumber":44,"author":{"gitID":"tohcheryl"},"content":"                new Address(VALID_ADDRESS_APPLE), getAllergySet(\"lactose\"));"},{"lineNumber":45,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":46,"author":{"gitID":"tohcheryl"},"content":"        assertParseSuccess(parser, NAME_DESC_APPLE + PHONE_DESC_APPLE + ADDRESS_DESC_APPLE + ALLERGIES_DESC_APPLE,"},{"lineNumber":47,"author":{"gitID":"tohcheryl"},"content":"                new UserConfigCommand(expectedUserProfile));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":52,"author":{"gitID":"tohcheryl"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UserConfigCommand.MESSAGE_USAGE);"},{"lineNumber":53,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":54,"author":{"gitID":"tohcheryl"},"content":"        // missing name prefix"},{"lineNumber":55,"author":{"gitID":"tohcheryl"},"content":"        assertParseFailure(parser, VALID_NAME_BANANA + PHONE_DESC_BANANA + ADDRESS_DESC_BANANA,"},{"lineNumber":56,"author":{"gitID":"tohcheryl"},"content":"                expectedMessage);"},{"lineNumber":57,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":58,"author":{"gitID":"tohcheryl"},"content":"        // missing phone prefix"},{"lineNumber":59,"author":{"gitID":"tohcheryl"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + VALID_PHONE_BANANA + ADDRESS_DESC_BANANA,"},{"lineNumber":60,"author":{"gitID":"tohcheryl"},"content":"                expectedMessage);"},{"lineNumber":61,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":62,"author":{"gitID":"tohcheryl"},"content":"        // missing address prefix - to be implemented"},{"lineNumber":63,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":64,"author":{"gitID":"tohcheryl"},"content":"        // all prefixes missing"},{"lineNumber":65,"author":{"gitID":"tohcheryl"},"content":"        assertParseFailure(parser, VALID_NAME_BANANA + VALID_PHONE_BANANA + VALID_ADDRESS_BANANA,"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":72,"author":{"gitID":"tohcheryl"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BANANA + ADDRESS_DESC_BANANA,"},{"lineNumber":73,"author":{"gitID":"tohcheryl"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":74,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":75,"author":{"gitID":"tohcheryl"},"content":"        // invalid phone"},{"lineNumber":76,"author":{"gitID":"tohcheryl"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + INVALID_PHONE_DESC + ADDRESS_DESC_BANANA,"},{"lineNumber":77,"author":{"gitID":"tohcheryl"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":79,"author":{"gitID":"tohcheryl"},"content":"        // invalid address - to be implemented"},{"lineNumber":80,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":81,"author":{"gitID":"tohcheryl"},"content":"        // invalid allergies"},{"lineNumber":82,"author":{"gitID":"tohcheryl"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + ADDRESS_DESC_BANANA"},{"lineNumber":83,"author":{"gitID":"tohcheryl"},"content":"                + INVALID_ALLERGIES_DESC, Allergy.MESSAGE_ALLERGY_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"tohcheryl"},"content":"}"}],"authorContributionMap":{"tohcheryl":47,"-":38}},{"path":"src/test/java/seedu/address/logic/commands/UserConfigCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.model.util.SampleDataUtil.getAllergySet;"},{"lineNumber":5,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":6,"author":{"gitID":"tohcheryl"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":8,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":11,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Phone;"},{"lineNumber":17,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.user.UserProfile;"},{"lineNumber":18,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":19,"author":{"gitID":"tohcheryl"},"content":"public class UserConfigCommandTest {"},{"lineNumber":20,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":21,"author":{"gitID":"tohcheryl"},"content":"    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"tohcheryl"},"content":"    private UserProfile validUserProfile \u003d new UserProfile(new Name(\"Wei wei\"), new Phone(\"92304333\"),"},{"lineNumber":23,"author":{"gitID":"tohcheryl"},"content":"                new Address(\"Blk 343 Serangoon Ave 3 #23-23 Singapore 349343\"), getAllergySet(\"banana\"));"},{"lineNumber":24,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":25,"author":{"gitID":"tohcheryl"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"tohcheryl"},"content":"    public void execute_validUserProfile_setSuccessfully() throws Exception {"},{"lineNumber":27,"author":{"gitID":"tohcheryl"},"content":"        CommandResult commandResult \u003d getUserConfigCommand(validUserProfile, model).execute();"},{"lineNumber":28,"author":{"gitID":"tohcheryl"},"content":"        assertEquals(UserConfigCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"},{"lineNumber":29,"author":{"gitID":"tohcheryl"},"content":"        assertEquals(validUserProfile, model.getAddressBook().getUserProfile());"},{"lineNumber":30,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":32,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"tohcheryl"},"content":"     * Generates a new UserConfigCommand."},{"lineNumber":34,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"tohcheryl"},"content":"    private UserConfigCommand getUserConfigCommand(UserProfile userProfile, Model model) {"},{"lineNumber":36,"author":{"gitID":"tohcheryl"},"content":"        UserConfigCommand command \u003d new UserConfigCommand(userProfile);"},{"lineNumber":37,"author":{"gitID":"tohcheryl"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":38,"author":{"gitID":"tohcheryl"},"content":"        return command;"},{"lineNumber":39,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"tohcheryl"},"content":"}"}],"authorContributionMap":{"tohcheryl":34,"-":6}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.food.exceptions.DuplicateFoodException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.food.exceptions.FoodNotFoundException;"},{"lineNumber":27,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.user.UserProfile;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.FoodBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void constructor_nullFood_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_foodAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelStubAcceptingFoodAdded modelStub \u003d new ModelStubAcceptingFoodAdded();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Food validFood \u003d new FoodBuilder().build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForFood(validFood, modelStub).execute();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFood), commandResult.feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validFood), modelStub.foodsAdded);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_duplicateFood_throwsCommandException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateFoodException();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Food validFood \u003d new FoodBuilder().build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_FOOD);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getAddCommandForFood(validFood, modelStub).execute();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Food apple \u003d new FoodBuilder().withName(\"Apple\").build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Food banana \u003d new FoodBuilder().withName(\"Banana\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddCommand addAppleCommand \u003d new AddCommand(apple);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddCommand addBananaCommand \u003d new AddCommand(banana);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(addAppleCommand.equals(addAppleCommand));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddCommand addAppleCommandCopy \u003d new AddCommand(apple);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAppleCommand.equals(addAppleCommandCopy));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(addAppleCommand.equals(1));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAppleCommand.equals(null));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // different food -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAppleCommand.equals(addBananaCommand));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given food."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForFood(Food food, Model model) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(food);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        public void addFood(Food food) throws DuplicateFoodException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        public void deleteFood(Food target) throws FoodNotFoundException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        public void updateFood(Food target, Food editedFood)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                throws DuplicateFoodException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        public ObservableList\u003cFood\u003e getFilteredFoodList() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":138,"author":{"gitID":"tohcheryl"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"tohcheryl"},"content":"        public void updateUserProfile(UserProfile userProfile) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicateFoodException when trying to add a food."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicateFoodException extends ModelStub {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public void addFood(Food food) throws DuplicateFoodException {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            throw new DuplicateFoodException();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the food being added."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingFoodAdded extends ModelStub {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        final ArrayList\u003cFood\u003e foodsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public void addFood(Food food) throws DuplicateFoodException {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            requireNonNull(food);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            foodsAdded.add(food);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":5,"-":172}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedFoodTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedFood.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalFoods.BACON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Phone;"},{"lineNumber":18,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.Price;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Rating;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAdaptedFoodTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@nch\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":27,"author":{"gitID":"tohcheryl"},"content":"    private static final String INVALID_PRICE \u003d \"0a.3\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_RATING \u003d \"9\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#fried\";"},{"lineNumber":30,"author":{"gitID":"tohcheryl"},"content":"    private static final String INVALID_ALLERGY \u003d \"#lactose\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BACON.getName().toString();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BACON.getPhone().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BACON.getEmail().toString();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BACON.getAddress().toString();"},{"lineNumber":36,"author":{"gitID":"tohcheryl"},"content":"    private static final String VALID_PRICE \u003d BACON.getPrice().toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_RATING \u003d BACON.getRating().toString();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BACON.getTags().stream()"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":41,"author":{"gitID":"tohcheryl"},"content":"    private static final List\u003cXmlAdaptedAllergy\u003e VALID_ALLERGIES \u003d BACON.getAllergies().stream()"},{"lineNumber":42,"author":{"gitID":"tohcheryl"},"content":"            .map(XmlAdaptedAllergy::new)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void toModelType_validFoodDetails_returnsFood() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        XmlAdaptedFood food \u003d new XmlAdaptedFood(BACON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(BACON, food.toModelType());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        XmlAdaptedFood food \u003d"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                new XmlAdaptedFood(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING,"},{"lineNumber":55,"author":{"gitID":"tohcheryl"},"content":"                        VALID_TAGS, VALID_ALLERGIES);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"tohcheryl"},"content":"        XmlAdaptedFood food \u003d new XmlAdaptedFood(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":63,"author":{"gitID":"tohcheryl"},"content":"                VALID_PRICE, VALID_RATING, VALID_TAGS, VALID_ALLERGIES);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlAdaptedFood food \u003d"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                new XmlAdaptedFood(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING,"},{"lineNumber":72,"author":{"gitID":"tohcheryl"},"content":"                        VALID_TAGS, VALID_ALLERGIES);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlAdaptedFood food \u003d new XmlAdaptedFood(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE,"},{"lineNumber":80,"author":{"gitID":"tohcheryl"},"content":"                VALID_RATING, VALID_TAGS, VALID_ALLERGIES);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        XmlAdaptedFood food \u003d"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                new XmlAdaptedFood(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING,"},{"lineNumber":89,"author":{"gitID":"tohcheryl"},"content":"                        VALID_TAGS, VALID_ALLERGIES);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlAdaptedFood food \u003d new XmlAdaptedFood(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_PRICE,"},{"lineNumber":97,"author":{"gitID":"tohcheryl"},"content":"                VALID_RATING, VALID_TAGS, VALID_ALLERGIES);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        XmlAdaptedFood food \u003d"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_PRICE, VALID_RATING,"},{"lineNumber":106,"author":{"gitID":"tohcheryl"},"content":"                        VALID_TAGS, VALID_ALLERGIES);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        XmlAdaptedFood food \u003d new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_PRICE,"},{"lineNumber":114,"author":{"gitID":"tohcheryl"},"content":"                VALID_RATING, VALID_TAGS, VALID_ALLERGIES);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"tohcheryl"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"tohcheryl"},"content":"    public void toModelType_invalidPrice_throwsIllegalValueException() {"},{"lineNumber":121,"author":{"gitID":"tohcheryl"},"content":"        XmlAdaptedFood food \u003d"},{"lineNumber":122,"author":{"gitID":"tohcheryl"},"content":"                new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_PRICE, VALID_RATING,"},{"lineNumber":123,"author":{"gitID":"tohcheryl"},"content":"                        VALID_TAGS, VALID_ALLERGIES);"},{"lineNumber":124,"author":{"gitID":"tohcheryl"},"content":"        String expectedMessage \u003d Price.MESSAGE_PRICE_CONSTRAINTS;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"tohcheryl"},"content":"    public void toModelType_nullPrice_throwsIllegalValueException() {"},{"lineNumber":130,"author":{"gitID":"tohcheryl"},"content":"        XmlAdaptedFood food \u003d new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null,"},{"lineNumber":131,"author":{"gitID":"tohcheryl"},"content":"                VALID_RATING, VALID_TAGS, VALID_ALLERGIES);"},{"lineNumber":132,"author":{"gitID":"tohcheryl"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void toModelType_invalidRating_throwsIllegalValueException() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        XmlAdaptedFood food \u003d"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, INVALID_RATING,"},{"lineNumber":140,"author":{"gitID":"tohcheryl"},"content":"                        VALID_TAGS, VALID_ALLERGIES);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Rating.MESSAGE_RATING_CONSTRAINTS;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void toModelType_nullRating_throwsIllegalValueException() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        XmlAdaptedFood food \u003d new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE,"},{"lineNumber":148,"author":{"gitID":"tohcheryl"},"content":"                null, VALID_TAGS, VALID_ALLERGIES);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        XmlAdaptedFood food \u003d"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING,"},{"lineNumber":159,"author":{"gitID":"tohcheryl"},"content":"                        invalidTags, VALID_ALLERGIES);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, food::toModelType);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"tohcheryl"},"content":"    @Test"},{"lineNumber":164,"author":{"gitID":"tohcheryl"},"content":"    public void toModelType_invalidAllergies_throwsIllegalValueException() {"},{"lineNumber":165,"author":{"gitID":"tohcheryl"},"content":"        List\u003cXmlAdaptedAllergy\u003e invalidAllergies \u003d new ArrayList\u003c\u003e(VALID_ALLERGIES);"},{"lineNumber":166,"author":{"gitID":"tohcheryl"},"content":"        invalidAllergies.add(new XmlAdaptedAllergy(INVALID_ALLERGY));"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        XmlAdaptedFood food \u003d"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING,"},{"lineNumber":169,"author":{"gitID":"tohcheryl"},"content":"                        VALID_TAGS, invalidAllergies);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, food::toModelType);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":33,"-":140}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalFoods.ALMOND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalFoods.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.user.UserProfile;"},{"lineNumber":22,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getFoodList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicateFoods_throwsAssertionError() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // Repeat ALMOND twice"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cFood\u003e newFoods \u003d Arrays.asList(ALMOND, ALMOND);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALMOND.getTags());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newFoods, newTags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void getFoodList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        addressBook.getFoodList().remove(0);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose foods and tags lists can violate interface constraints."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cFood\u003e foods \u003d FXCollections.observableArrayList();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":79,"author":{"gitID":"tohcheryl"},"content":"        private UserProfile profile;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cFood\u003e foods, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":82,"author":{"gitID":"tohcheryl"},"content":"            this.profile \u003d SampleDataUtil.getSampleProfile();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            this.foods.setAll(foods);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        public ObservableList\u003cFood\u003e getFoodList() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return foods;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":97,"author":{"gitID":"tohcheryl"},"content":"        @Override"},{"lineNumber":98,"author":{"gitID":"tohcheryl"},"content":"        public UserProfile getUserProfile() {"},{"lineNumber":99,"author":{"gitID":"tohcheryl"},"content":"            return profile;"},{"lineNumber":100,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":9,"-":94}},{"path":"src/test/java/seedu/address/model/food/allergy/AllergyTest.java","lines":[{"lineNumber":1,"author":{"gitID":"tohcheryl"},"content":"package seedu.address.model.food.allergy;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"tohcheryl"},"content":"public class AllergyTest {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitID":"tohcheryl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Allergy(null));"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {"},{"lineNumber":16,"author":{"gitID":"tohcheryl"},"content":"        String invalidAllergyName \u003d \"\";"},{"lineNumber":17,"author":{"gitID":"tohcheryl"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Allergy(invalidAllergyName));"},{"lineNumber":18,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":20,"author":{"gitID":"tohcheryl"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"tohcheryl"},"content":"    public void isValidAllergyName() {"},{"lineNumber":22,"author":{"gitID":"tohcheryl"},"content":"        // null tag name"},{"lineNumber":23,"author":{"gitID":"tohcheryl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Allergy.isValidAllergyName(null));"},{"lineNumber":24,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"tohcheryl"},"content":"}"}],"authorContributionMap":{"tohcheryl":13,"-":12}},{"path":"src/test/java/seedu/address/model/food/allergy/UniqueAllergyListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"tohcheryl"},"content":"package seedu.address.model.food.allergy;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":7,"author":{"gitID":"tohcheryl"},"content":"public class UniqueAllergyListTest {"},{"lineNumber":8,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":13,"author":{"gitID":"tohcheryl"},"content":"        UniqueAllergyList uniqueAllergyList \u003d new UniqueAllergyList();"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":15,"author":{"gitID":"tohcheryl"},"content":"        uniqueAllergyList.asObservableList().remove(0);"},{"lineNumber":16,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"tohcheryl"},"content":"}"}],"authorContributionMap":{"tohcheryl":7,"-":10}},{"path":"src/test/java/seedu/address/testutil/FoodUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class for Food."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class FoodUtil {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code food}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Food food) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getFoodDetails(food);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code food}\u0027s details."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static String getFoodDetails(Food food) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + food.getName().fullName + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + food.getPhone().value + \" \");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + food.getEmail().value + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + food.getAddress().value + \" \");"},{"lineNumber":36,"author":{"gitID":"tohcheryl"},"content":"        sb.append(PREFIX_PRICE + food.getPrice().getValue() + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_RATING + food.getRating().value + \" \");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        food.getTags().stream().forEach("},{"lineNumber":39,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":41,"author":{"gitID":"tohcheryl"},"content":"        food.getAllergies().stream().forEach("},{"lineNumber":42,"author":{"gitID":"tohcheryl"},"content":"            s -\u003e sb.append(PREFIX_ALLERGIES + s.allergyName + \" \")"},{"lineNumber":43,"author":{"gitID":"tohcheryl"},"content":"        );"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":6,"-":40}},{"path":"src/test/java/seedu/address/testutil/FoodBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Email;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Phone;"},{"lineNumber":11,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.Price;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Rating;"},{"lineNumber":13,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.allergy.Allergy;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class to help with building Food objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class FoodBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Apple Pie\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d Email.DEFAULT_EMAIL;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d Address.DEFAULT_ADDRESS;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PRICE \u003d Price.DEFAULT_PRICE;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_RATING \u003d Rating.DEFAULT_RATING;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"fried\";"},{"lineNumber":30,"author":{"gitID":"tohcheryl"},"content":"    public static final String DEFAULT_ALLERGIES \u003d \"lactose\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":36,"author":{"gitID":"tohcheryl"},"content":"    private Price price;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Rating rating;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":39,"author":{"gitID":"tohcheryl"},"content":"    private Set\u003cAllergy\u003e allergies;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public FoodBuilder() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":46,"author":{"gitID":"tohcheryl"},"content":"        price \u003d new Price(DEFAULT_PRICE);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        rating \u003d new Rating(DEFAULT_RATING);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":49,"author":{"gitID":"tohcheryl"},"content":"        allergies \u003d SampleDataUtil.getAllergySet(DEFAULT_ALLERGIES);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Initializes the FoodBuilder with the data of {@code foodToCopy}."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public FoodBuilder(Food foodToCopy) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        name \u003d foodToCopy.getName();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        phone \u003d foodToCopy.getPhone();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        email \u003d foodToCopy.getEmail();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        address \u003d foodToCopy.getAddress();"},{"lineNumber":60,"author":{"gitID":"tohcheryl"},"content":"        price \u003d foodToCopy.getPrice();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        rating \u003d foodToCopy.getRating();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(foodToCopy.getTags());"},{"lineNumber":63,"author":{"gitID":"tohcheryl"},"content":"        allergies \u003d new HashSet\u003c\u003e(foodToCopy.getAllergies());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Food} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public FoodBuilder withName(String name) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Food} that we are building."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public FoodBuilder withTags(String ... tags) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Food} that we are building."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public FoodBuilder withAddress(String address) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Food} that we are building."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public FoodBuilder withPhone(String phone) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Food} that we are building."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public FoodBuilder withEmail(String email) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"tohcheryl"},"content":"     * Sets the {@code Price} of the {@code Food} that we are building"},{"lineNumber":108,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"tohcheryl"},"content":"    public FoodBuilder withPrice(String price) {"},{"lineNumber":110,"author":{"gitID":"tohcheryl"},"content":"        this.price \u003d new Price(price);"},{"lineNumber":111,"author":{"gitID":"tohcheryl"},"content":"        return this;"},{"lineNumber":112,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Sets the {@code Rating} of the {@code Food} that we are building"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public FoodBuilder withRating(String rating) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        this.rating \u003d new Rating(rating);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"tohcheryl"},"content":"     * Parses the {@code allergies} into a {@code Set\u003cAllergy\u003e} and set it to the {@code Food} that we are building."},{"lineNumber":124,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"tohcheryl"},"content":"    public FoodBuilder withAllergies(String ... allergies) {"},{"lineNumber":126,"author":{"gitID":"tohcheryl"},"content":"        this.allergies \u003d SampleDataUtil.getAllergySet(allergies);"},{"lineNumber":127,"author":{"gitID":"tohcheryl"},"content":"        return this;"},{"lineNumber":128,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public Food build() {"},{"lineNumber":131,"author":{"gitID":"tohcheryl"},"content":"        return new Food(name, phone, email, address, price, rating, tags, allergies);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":26,"-":108}},{"path":"src/test/java/seedu/address/testutil/TypicalFoods.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_APPLE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BANANA;"},{"lineNumber":5,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_LACTOSE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_APPLE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BANANA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_APPLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_APPLE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BANANA;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_APPLE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BANANA;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIED;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NUTS;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.food.exceptions.DuplicateFoodException;"},{"lineNumber":24,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Food} objects to be used in tests."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class TypicalFoods {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final Food ALMOND \u003d new FoodBuilder().withName(\"Almond Biscuits\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"almond@example.com\")"},{"lineNumber":33,"author":{"gitID":"tohcheryl"},"content":"            .withPhone(\"85355255\").withPrice(\"$1\").withRating(\"0\").withTags(\"fried\")"},{"lineNumber":34,"author":{"gitID":"tohcheryl"},"content":"            .withAllergies(\"lactose\").build();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final Food BACON \u003d new FoodBuilder().withName(\"Bacon Mousse\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").withEmail(\"baconator@example.com\").withPhone(\"98765432\")"},{"lineNumber":37,"author":{"gitID":"tohcheryl"},"content":"            .withPrice(\"$2\").withRating(\"1\").withTags(\"avoid\", \"fried\").withAllergies(\"lactose\").build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final Food CAKE \u003d new FoodBuilder().withName(\"Cake Pops\").withPhone(\"95352563\")"},{"lineNumber":39,"author":{"gitID":"tohcheryl"},"content":"            .withEmail(\"caker@example.com\").withAddress(\"dessert street\")"},{"lineNumber":40,"author":{"gitID":"tohcheryl"},"content":"            .withPrice(\"$3\").withRating(\"2\").withAllergies(\"lactose\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Food DUMPLING \u003d new FoodBuilder().withName(\"Dumpling Mousse\").withPhone(\"87652533\")"},{"lineNumber":42,"author":{"gitID":"tohcheryl"},"content":"            .withEmail(\"dumper@example.com\").withAddress(\"10th street\")"},{"lineNumber":43,"author":{"gitID":"tohcheryl"},"content":"            .withPrice(\"$4\").withRating(\"3\").withAllergies(\"lactose\").build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Food EGG \u003d new FoodBuilder().withName(\"Egg Tart\").withPhone(\"9482224\")"},{"lineNumber":45,"author":{"gitID":"tohcheryl"},"content":"            .withEmail(\"yumcha@example.com\").withAddress(\"china ave\")"},{"lineNumber":46,"author":{"gitID":"tohcheryl"},"content":"            .withPrice(\"$5\").withRating(\"4\").withAllergies(\"lactose\").build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final Food FRIES \u003d new FoodBuilder().withName(\"Fries and Gravy\").withPhone(\"9482427\")"},{"lineNumber":48,"author":{"gitID":"tohcheryl"},"content":"            .withEmail(\"maccas@example.com\").withAddress(\"little tokyo\")"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            .withPrice(\"$6\").withRating(\"5\").build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final Food GRAPE \u003d new FoodBuilder().withName(\"Grape Juice\").withPhone(\"9482442\")"},{"lineNumber":51,"author":{"gitID":"tohcheryl"},"content":"            .withEmail(\"boost@example.com\").withAddress(\"4th street\")"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            .withPrice(\"$7\").withRating(\"5\").build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final Food HAM \u003d new FoodBuilder().withName(\"Ham Mousse\").withPhone(\"8482424\")"},{"lineNumber":56,"author":{"gitID":"tohcheryl"},"content":"            .withEmail(\"weird@example.com\").withAddress(\"little india\")"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .withPrice(\"$8\").withRating(\"5\").build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final Food ICECREAM \u003d new FoodBuilder().withName(\"Ice Cream\").withPhone(\"8482131\")"},{"lineNumber":59,"author":{"gitID":"tohcheryl"},"content":"            .withEmail(\"cold@example.com\").withAddress(\"chicago ave\")"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            .withPrice(\"$9\").withRating(\"5\").build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    // Manually added - Food\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final Food APPLE \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE)"},{"lineNumber":64,"author":{"gitID":"tohcheryl"},"content":"            .withEmail(VALID_EMAIL_APPLE).withAddress(VALID_ADDRESS_APPLE)"},{"lineNumber":65,"author":{"gitID":"tohcheryl"},"content":"            .withPrice(\"$0.50\").withRating(VALID_RATING_APPLE).withTags(VALID_TAG_FRIED)"},{"lineNumber":66,"author":{"gitID":"tohcheryl"},"content":"            .withAllergies(VALID_ALLERGY_LACTOSE).build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final Food BANANA \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"},{"lineNumber":68,"author":{"gitID":"tohcheryl"},"content":"            .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA)"},{"lineNumber":69,"author":{"gitID":"tohcheryl"},"content":"            .withPrice(\"$0.80\").withRating(VALID_RATING_BANANA).withTags(VALID_TAG_NUTS, VALID_TAG_FRIED)"},{"lineNumber":70,"author":{"gitID":"tohcheryl"},"content":"            .withAllergies(VALID_ALLERGY_LACTOSE).build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MOUSSE \u003d \"Mousse\"; // A keyword that matches MOUSSE"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private TypicalFoods() {} // prevents instantiation"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"tohcheryl"},"content":"     * Returns an {@code AddressBook} with all the typical foods and default user profile"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":81,"author":{"gitID":"tohcheryl"},"content":"        ab.setUserProfile(SampleDataUtil.getSampleProfile());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        for (Food food : getTypicalFoods()) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                ab.addFood(food);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            } catch (DuplicateFoodException e) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static List\u003cFood\u003e getTypicalFoods() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALMOND, BACON, CAKE, DUMPLING, EGG, FRIES, GRAPE));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":23,"-":72}},{"path":"src/test/java/seedu/address/model/food/PriceTest.java","lines":[{"lineNumber":1,"author":{"gitID":"tohcheryl"},"content":"package seedu.address.model.food;"},{"lineNumber":2,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"tohcheryl"},"content":"public class PriceTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"tohcheryl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Price(null));"},{"lineNumber":16,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":18,"author":{"gitID":"tohcheryl"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"tohcheryl"},"content":"    public void constructor_invalidPrice_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"tohcheryl"},"content":"        String invalidPrice \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"tohcheryl"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"},{"lineNumber":22,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":24,"author":{"gitID":"tohcheryl"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"tohcheryl"},"content":"    public void isValidPrice() {"},{"lineNumber":26,"author":{"gitID":"tohcheryl"},"content":"        // null price"},{"lineNumber":27,"author":{"gitID":"tohcheryl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"},{"lineNumber":28,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":29,"author":{"gitID":"tohcheryl"},"content":"        // invalid prices in US"},{"lineNumber":30,"author":{"gitID":"tohcheryl"},"content":"        assertFalse(Price.isValidPrice(\"12a.45\"));"},{"lineNumber":31,"author":{"gitID":"tohcheryl"},"content":"        assertFalse(Price.isValidPrice(\"$12a.45\"));"},{"lineNumber":32,"author":{"gitID":"tohcheryl"},"content":"        assertFalse(Price.isValidPrice(\"$1.p0\"));"},{"lineNumber":33,"author":{"gitID":"tohcheryl"},"content":"        assertFalse(Price.isValidPrice(\"203$0\"));"},{"lineNumber":34,"author":{"gitID":"tohcheryl"},"content":"        assertFalse(Price.isValidPrice(\"10$\"));"},{"lineNumber":35,"author":{"gitID":"tohcheryl"},"content":"        assertFalse(Price.isValidPrice(\"12.40$\"));"},{"lineNumber":36,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":37,"author":{"gitID":"tohcheryl"},"content":"        // valid prices in US"},{"lineNumber":38,"author":{"gitID":"tohcheryl"},"content":"        assertTrue(Price.isValidPrice(\"$20\"));"},{"lineNumber":39,"author":{"gitID":"tohcheryl"},"content":"        assertTrue(Price.isValidPrice(\"$90.30\"));"},{"lineNumber":40,"author":{"gitID":"tohcheryl"},"content":"        assertTrue(Price.isValidPrice(\"$20.590\"));"},{"lineNumber":41,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":43,"author":{"gitID":"tohcheryl"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"tohcheryl"},"content":"    public void setPrice() {"},{"lineNumber":45,"author":{"gitID":"tohcheryl"},"content":"        Price p \u003d new Price(\"$23.40\");"},{"lineNumber":46,"author":{"gitID":"tohcheryl"},"content":"        p.setPrice(\"$40.00\");"},{"lineNumber":47,"author":{"gitID":"tohcheryl"},"content":"        assertEquals(\"40.00\", p.getValue());"},{"lineNumber":48,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":50,"author":{"gitID":"tohcheryl"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"tohcheryl"},"content":"    public void getValue() {"},{"lineNumber":52,"author":{"gitID":"tohcheryl"},"content":"        Price p \u003d new Price(\"$23.40\");"},{"lineNumber":53,"author":{"gitID":"tohcheryl"},"content":"        assertEquals(\"23.40\", p.getValue());"},{"lineNumber":54,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":56,"author":{"gitID":"tohcheryl"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"tohcheryl"},"content":"    public void toString_validPrice_returnsString() {"},{"lineNumber":58,"author":{"gitID":"tohcheryl"},"content":"        Price p \u003d new Price(\"$23.40\");"},{"lineNumber":59,"author":{"gitID":"tohcheryl"},"content":"        assertEquals(\"23.40\", p.toString());"},{"lineNumber":60,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":62,"author":{"gitID":"tohcheryl"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"tohcheryl"},"content":"    public void equals_validPrice_returnsEqual() {"},{"lineNumber":64,"author":{"gitID":"tohcheryl"},"content":"        Price p \u003d new Price(\"$23.40\");"},{"lineNumber":65,"author":{"gitID":"tohcheryl"},"content":"        Price p2 \u003d new Price(\"$23.40\");"},{"lineNumber":66,"author":{"gitID":"tohcheryl"},"content":"        assertEquals(p, p2);"},{"lineNumber":67,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":69,"author":{"gitID":"tohcheryl"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"tohcheryl"},"content":"    public void hashCode_validPrice_returnsHashCode() {"},{"lineNumber":71,"author":{"gitID":"tohcheryl"},"content":"        Price p \u003d new Price(\"$23.40\");"},{"lineNumber":72,"author":{"gitID":"tohcheryl"},"content":"        Price p2 \u003d new Price(\"$23.40\");"},{"lineNumber":73,"author":{"gitID":"tohcheryl"},"content":"        assertEquals(p.hashCode(), p2.hashCode());"},{"lineNumber":74,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"tohcheryl"},"content":"}"}],"authorContributionMap":{"tohcheryl":65,"-":10}},{"path":"src/test/java/seedu/address/testutil/EditFoodDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditFoodDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Phone;"},{"lineNumber":13,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.Price;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Rating;"},{"lineNumber":15,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.allergy.Allergy;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A utility class to help with building EditFoodDescriptor objects."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class EditFoodDescriptorBuilder {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private EditFoodDescriptor descriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public EditFoodDescriptorBuilder() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditFoodDescriptor();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public EditFoodDescriptorBuilder(EditFoodDescriptor descriptor) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditFoodDescriptor(descriptor);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns an {@code EditFoodDescriptor} with fields containing {@code food}\u0027s details"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public EditFoodDescriptorBuilder(Food food) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditFoodDescriptor();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setName(food.getName());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setPhone(food.getPhone());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setEmail(food.getEmail());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        descriptor.setAddress(food.getAddress());"},{"lineNumber":42,"author":{"gitID":"tohcheryl"},"content":"        descriptor.setPrice(food.getPrice());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        descriptor.setRating(food.getRating());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        descriptor.setTags(food.getTags());"},{"lineNumber":45,"author":{"gitID":"tohcheryl"},"content":"        descriptor.setAllergies(food.getAllergies());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditFoodDescriptor} that we are building."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public EditFoodDescriptorBuilder withName(String name) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditFoodDescriptor} that we are building."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public EditFoodDescriptorBuilder withPhone(String phone) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditFoodDescriptor} that we are building."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public EditFoodDescriptorBuilder withEmail(String email) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditFoodDescriptor} that we are building."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public EditFoodDescriptorBuilder withAddress(String address) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"tohcheryl"},"content":"     * Sets the {@code Price} of the {@code EditFoodDescriptor} that we are building."},{"lineNumber":82,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"tohcheryl"},"content":"    public EditFoodDescriptorBuilder withPrice(String price) {"},{"lineNumber":84,"author":{"gitID":"tohcheryl"},"content":"        descriptor.setPrice(new Price(price));"},{"lineNumber":85,"author":{"gitID":"tohcheryl"},"content":"        return this;"},{"lineNumber":86,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Sets the {@code Rating} of the {@code EditFoodDescriptor} that we are building."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public EditFoodDescriptorBuilder withRating(String rating) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        descriptor.setRating(new Rating(rating));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditFoodDescriptor}"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public EditFoodDescriptorBuilder withTags(String... tags) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"tohcheryl"},"content":"     * Parses the {@code allergies} into a {@code Set\u003cAllergy\u003e} and set it to the {@code EditFoodDescriptor}"},{"lineNumber":108,"author":{"gitID":"tohcheryl"},"content":"     * that we are building."},{"lineNumber":109,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"tohcheryl"},"content":"    public EditFoodDescriptorBuilder withAllergies(String... allergies) {"},{"lineNumber":111,"author":{"gitID":"tohcheryl"},"content":"        Set\u003cAllergy\u003e allergySet \u003d Stream.of(allergies).map(Allergy::new).collect(Collectors.toSet());"},{"lineNumber":112,"author":{"gitID":"tohcheryl"},"content":"        descriptor.setAllergies(allergySet);"},{"lineNumber":113,"author":{"gitID":"tohcheryl"},"content":"        return this;"},{"lineNumber":114,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public EditFoodDescriptor build() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":22,"-":97}},{"path":"src/main/java/seedu/address/ui/FoodCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Price;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Rating;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Food}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class FoodCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"FoodListCard.fxml\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final Food food;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Label price;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Label rating;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":47,"author":{"gitID":"tohcheryl"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"tohcheryl"},"content":"    private FlowPane allergies;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public FoodCard(Food food, int displayedIndex) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.food \u003d food;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        name.setText(food.getName().fullName);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        phone.setText(food.getPhone().value);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        address.setText(food.getAddress().value);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        price.setText(Price.displayString(food.getPrice().getValue()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        email.setText(food.getEmail().value);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        rating.setText(Rating.displayString(food.getRating().value));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        food.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":61,"author":{"gitID":"tohcheryl"},"content":"        food.getAllergies().forEach(allergy -\u003e allergies.getChildren().add(new Label(allergy.allergyName)));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        if (!(other instanceof FoodCard)) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        FoodCard card \u003d (FoodCard) other;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                \u0026\u0026 food.equals(card.food);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":3,"-":78}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Address;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Phone;"},{"lineNumber":24,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.Price;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Rating;"},{"lineNumber":26,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.allergy.Allergy;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":41,"author":{"gitID":"tohcheryl"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":42,"author":{"gitID":"tohcheryl"},"content":"                        PREFIX_ADDRESS, PREFIX_PRICE, PREFIX_RATING, PREFIX_TAG, PREFIX_ALLERGIES);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL))"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                    .orElse(new Email(Email.DEFAULT_EMAIL));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS))"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                    .orElse(new Address(Address.DEFAULT_ADDRESS));"},{"lineNumber":57,"author":{"gitID":"tohcheryl"},"content":"            Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE))"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                    .orElse(new Price(Price.DEFAULT_PRICE));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Rating rating \u003d ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING))"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                    .orElse(new Rating(Rating.DEFAULT_RATING));"},{"lineNumber":61,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":63,"author":{"gitID":"tohcheryl"},"content":"            Set\u003cAllergy\u003e allergyList \u003d ParserUtil.parseAllergies(argMultimap.getAllValues(PREFIX_ALLERGIES));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"tohcheryl"},"content":"            Food food \u003d new Food(name, phone, email, address, price, rating, tagList, allergyList);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new AddCommand(food);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":10,"-":71}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"tohcheryl"},"content":"    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"pr/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ALLERGIES \u003d new Prefix(\"alg/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":1,"-":17}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Phone;"},{"lineNumber":17,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.Price;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Rating;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.food.allergy.Allergy;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"tohcheryl"},"content":"     * Parses a {@code String price} into an {@code Price}."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":149,"author":{"gitID":"tohcheryl"},"content":"     * @throws IllegalValueException if the given {@code price} is invalid."},{"lineNumber":150,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"tohcheryl"},"content":"    public static Price parsePrice(String price) throws IllegalValueException {"},{"lineNumber":152,"author":{"gitID":"tohcheryl"},"content":"        requireNonNull(price);"},{"lineNumber":153,"author":{"gitID":"tohcheryl"},"content":"        String trimmedPrice \u003d price.trim();"},{"lineNumber":154,"author":{"gitID":"tohcheryl"},"content":"        if (!Price.isValidPrice(trimmedPrice)) {"},{"lineNumber":155,"author":{"gitID":"tohcheryl"},"content":"            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"tohcheryl"},"content":"        return new Price(trimmedPrice);"},{"lineNumber":158,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":160,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"tohcheryl"},"content":"     * Parses a {@code Optional\u003cString\u003e price} into an {@code Optional\u003cPrice\u003e} if {@code price} is present."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"tohcheryl"},"content":"    public static Optional\u003cPrice\u003e parsePrice(Optional\u003cString\u003e price) throws IllegalValueException {"},{"lineNumber":165,"author":{"gitID":"tohcheryl"},"content":"        requireNonNull(price);"},{"lineNumber":166,"author":{"gitID":"tohcheryl"},"content":"        return price.isPresent() ? Optional.of(parsePrice(price.get())) : Optional.empty();"},{"lineNumber":167,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":169,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"tohcheryl"},"content":"     * Parses a {@code String price} into an {@code Price}."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":173,"author":{"gitID":"tohcheryl"},"content":"     * @throws IllegalValueException if the given {@code price} is invalid."},{"lineNumber":174,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public static Rating parseRating(String rating) throws IllegalValueException {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        requireNonNull(rating);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        String trimmedRating \u003d rating.trim();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        if (!Rating.isValidRating(trimmedRating)) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        return new Rating(trimmedRating);"},{"lineNumber":182,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":184,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"tohcheryl"},"content":"     * Parses a {@code Optional\u003cString\u003e price} into an {@code Optional\u003cPrice\u003e} if {@code price} is present."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public static Optional\u003cRating\u003e parseRating(Optional\u003cString\u003e rating) throws IllegalValueException {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        requireNonNull(rating);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        return rating.isPresent() ? Optional.of(parseRating(rating.get())) : Optional.empty();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Parses a {@code String allergy} into a {@code Allergy}."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code allergy} is invalid."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public static Allergy parseAllergy(String allergy) throws IllegalValueException {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        requireNonNull(allergy);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        String trimmedAllergy \u003d allergy.trim();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        if (!Allergy.isValidAllergyName(trimmedAllergy)) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Allergy.MESSAGE_ALLERGY_CONSTRAINTS);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        return new Allergy(trimmedAllergy);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e allergies} into a {@code Set\u003cAllergy\u003e}."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public static Set\u003cAllergy\u003e parseAllergies(Collection\u003cString\u003e allergies) throws IllegalValueException {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        requireNonNull(allergies);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        final Set\u003cAllergy\u003e allergySet \u003d new HashSet\u003c\u003e();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        for (String allergyName : allergies) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            allergySet.add(parseAllergy(allergyName));"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        return allergySet;"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":29,"-":217}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditFoodDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.allergy.Allergy;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":40,"author":{"gitID":"tohcheryl"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":41,"author":{"gitID":"tohcheryl"},"content":"                        PREFIX_PRICE, PREFIX_RATING, PREFIX_TAG, PREFIX_ALLERGIES);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        EditFoodDescriptor editFoodDescriptor \u003d new EditFoodDescriptor();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editFoodDescriptor::setName);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editFoodDescriptor::setPhone);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editFoodDescriptor::setEmail);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editFoodDescriptor::setAddress);"},{"lineNumber":57,"author":{"gitID":"tohcheryl"},"content":"            ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE)).ifPresent(editFoodDescriptor::setPrice);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING)).ifPresent(editFoodDescriptor::setRating);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editFoodDescriptor::setTags);"},{"lineNumber":60,"author":{"gitID":"tohcheryl"},"content":"            parseAllergiesForEdit(argMultimap.getAllValues(PREFIX_ALLERGIES))"},{"lineNumber":61,"author":{"gitID":"tohcheryl"},"content":"                    .ifPresent(editFoodDescriptor::setAllergies);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!editFoodDescriptor.isAnyFieldEdited()) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editFoodDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"tohcheryl"},"content":"     * Parses {@code Collection\u003cString\u003e allergies} into a {@code Set\u003cTag\u003e} if {@code allergies} is non-empty."},{"lineNumber":90,"author":{"gitID":"tohcheryl"},"content":"     * If {@code allergies} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":91,"author":{"gitID":"tohcheryl"},"content":"     * {@code Set\u003cAllergy\u003e} containing zero allergies."},{"lineNumber":92,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"tohcheryl"},"content":"    private Optional\u003cSet\u003cAllergy\u003e\u003e parseAllergiesForEdit(Collection\u003cString\u003e allergies) throws IllegalValueException {"},{"lineNumber":94,"author":{"gitID":"tohcheryl"},"content":"        assert allergies !\u003d null;"},{"lineNumber":95,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":96,"author":{"gitID":"tohcheryl"},"content":"        if (allergies.isEmpty()) {"},{"lineNumber":97,"author":{"gitID":"tohcheryl"},"content":"            return Optional.empty();"},{"lineNumber":98,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"tohcheryl"},"content":"        Collection\u003cString\u003e allergySet \u003d allergies.size() \u003d\u003d 1 \u0026\u0026 allergies.contains(\"\")"},{"lineNumber":100,"author":{"gitID":"tohcheryl"},"content":"                ? Collections.emptySet() : allergies;"},{"lineNumber":101,"author":{"gitID":"tohcheryl"},"content":"        return Optional.of(ParserUtil.parseAllergies(allergySet));"},{"lineNumber":102,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":24,"-":80}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"tohcheryl"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FOODS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Address;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Email;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Phone;"},{"lineNumber":30,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.Price;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Rating;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.food.allergy.Allergy;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.food.exceptions.DuplicateFoodException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.food.exceptions.FoodNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Edits the details of an existing food in HackEat."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the food identified \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last food listing. \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":52,"author":{"gitID":"tohcheryl"},"content":"            + \"[\" + PREFIX_PRICE + \"PRICE] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_RATING + \"RATING]\""},{"lineNumber":54,"author":{"gitID":"tohcheryl"},"content":"            + \"[\" + PREFIX_ALLERGIES + \"ALLERGY]...\\n\""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_FOOD_SUCCESS \u003d \"Edited Food: %1$s\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food already exists in HackEat.\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private final EditFoodDescriptor editFoodDescriptor;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private Food foodToEdit;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private Food editedFood;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param index of the food in the filtered food list to edit"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @param editFoodDescriptor details to edit the food with"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditFoodDescriptor editFoodDescriptor) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(editFoodDescriptor);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.editFoodDescriptor \u003d new EditFoodDescriptor(editFoodDescriptor);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            model.updateFood(foodToEdit, editedFood);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        } catch (DuplicateFoodException dpe) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        } catch (FoodNotFoundException pnfe) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target food cannot be missing\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        model.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_FOOD_SUCCESS, editedFood));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        foodToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        editedFood \u003d createEditedFood(foodToEdit, editFoodDescriptor);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Food} with the details of {@code foodToEdit}"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * edited with {@code editFoodDescriptor}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private static Food createEditedFood(Food foodToEdit, EditFoodDescriptor editFoodDescriptor) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assert foodToEdit !\u003d null;"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editFoodDescriptor.getName().orElse(foodToEdit.getName());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editFoodDescriptor.getPhone().orElse(foodToEdit.getPhone());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editFoodDescriptor.getEmail().orElse(foodToEdit.getEmail());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editFoodDescriptor.getAddress().orElse(foodToEdit.getAddress());"},{"lineNumber":118,"author":{"gitID":"tohcheryl"},"content":"        Price updatedPrice \u003d editFoodDescriptor.getPrice().orElse(foodToEdit.getPrice());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Rating updatedRating \u003d editFoodDescriptor.getRating().orElse(foodToEdit.getRating());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editFoodDescriptor.getTags().orElse(foodToEdit.getTags());"},{"lineNumber":121,"author":{"gitID":"tohcheryl"},"content":"        Set\u003cAllergy\u003e updatedAllergies \u003d editFoodDescriptor.getAllergies().orElse(foodToEdit.getAllergies());"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return new Food(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedPrice, updatedRating,"},{"lineNumber":124,"author":{"gitID":"tohcheryl"},"content":"                updatedTags, updatedAllergies);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                \u0026\u0026 editFoodDescriptor.equals(e.editFoodDescriptor)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(foodToEdit, e.foodToEdit);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Stores the details to edit the food with. Each non-empty field value will replace the"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * corresponding field value of the food."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public static class EditFoodDescriptor {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":155,"author":{"gitID":"tohcheryl"},"content":"        private Price price;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        private Rating rating;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":158,"author":{"gitID":"tohcheryl"},"content":"        private Set\u003cAllergy\u003e allergies;"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public EditFoodDescriptor() {}"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":164,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":165,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public EditFoodDescriptor(EditFoodDescriptor toCopy) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":171,"author":{"gitID":"tohcheryl"},"content":"            setPrice(toCopy.price);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            setRating(toCopy.rating);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":174,"author":{"gitID":"tohcheryl"},"content":"            setAllergies(toCopy.allergies);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":179,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.price, this.rating,"},{"lineNumber":182,"author":{"gitID":"tohcheryl"},"content":"                    this.tags, this.allergies);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"tohcheryl"},"content":"        public void setPrice(Price price) {"},{"lineNumber":218,"author":{"gitID":"tohcheryl"},"content":"            this.price \u003d price;"},{"lineNumber":219,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":221,"author":{"gitID":"tohcheryl"},"content":"        public Optional\u003cPrice\u003e getPrice() {"},{"lineNumber":222,"author":{"gitID":"tohcheryl"},"content":"            return Optional.ofNullable(price);"},{"lineNumber":223,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        public void setRating(Rating rating) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            this.rating \u003d rating;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        public Optional\u003cRating\u003e getRating() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(rating);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":235,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":236,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":243,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":244,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":245,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"tohcheryl"},"content":"        /**"},{"lineNumber":251,"author":{"gitID":"tohcheryl"},"content":"         * Sets {@code allergies} to this object\u0027s {@code allergies}."},{"lineNumber":252,"author":{"gitID":"tohcheryl"},"content":"         * A defensive copy of {@code allergies} is used internally."},{"lineNumber":253,"author":{"gitID":"tohcheryl"},"content":"         */"},{"lineNumber":254,"author":{"gitID":"tohcheryl"},"content":"        public void setAllergies(Set\u003cAllergy\u003e allergies) {"},{"lineNumber":255,"author":{"gitID":"tohcheryl"},"content":"            this.allergies \u003d (allergies !\u003d null) ? new HashSet\u003c\u003e(allergies) : null;"},{"lineNumber":256,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":258,"author":{"gitID":"tohcheryl"},"content":"        /**"},{"lineNumber":259,"author":{"gitID":"tohcheryl"},"content":"         * Returns an unmodifiable allergy set, which throws {@code UnsupportedOperationException}"},{"lineNumber":260,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":261,"author":{"gitID":"tohcheryl"},"content":"         * Returns {@code Optional#empty()} if {@code allergies} is null."},{"lineNumber":262,"author":{"gitID":"tohcheryl"},"content":"         */"},{"lineNumber":263,"author":{"gitID":"tohcheryl"},"content":"        public Optional\u003cSet\u003cAllergy\u003e\u003e getAllergies() {"},{"lineNumber":264,"author":{"gitID":"tohcheryl"},"content":"            return (allergies !\u003d null) ? Optional.of(Collections.unmodifiableSet(allergies)) : Optional.empty();"},{"lineNumber":265,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":266,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":270,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":272,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":275,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditFoodDescriptor)) {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            EditFoodDescriptor e \u003d (EditFoodDescriptor) other;"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":283,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":284,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":285,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":286,"author":{"gitID":"tohcheryl"},"content":"                    \u0026\u0026 getPrice().equals(e.getPrice())"},{"lineNumber":287,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getRating().equals(e.getRating())"},{"lineNumber":288,"author":{"gitID":"tohcheryl"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())"},{"lineNumber":289,"author":{"gitID":"tohcheryl"},"content":"                    \u0026\u0026 getAllergies().equals(e.getAllergies());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":40,"-":252}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Phone;"},{"lineNumber":13,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.Price;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Rating;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.food.allergy.Allergy;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.food.exceptions.DuplicateFoodException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.user.UserProfile;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static Food[] getSampleFoods() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return new Food[] {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            new Food(new Name(\"Almond Biscuit\"), new Phone(\"87438807\"), new Email(\"almondhouse@example.com\"),"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Price(\"$0.50\"), new Rating(\"3\"),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                    getTagSet(\"snack\"), getAllergySet(\"peanut\")),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            new Food(new Name(\"Banana Smoothie\"), new Phone(\"99272758\"), new Email(\"bananastand@example.com\"),"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Price(\"$5\"), new Rating(\"4\"),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                    getTagSet(\"drink\", \"fruity\"), getAllergySet(\"lactose\")),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            new Food(new Name(\"Cheesecake\"), new Phone(\"93210283\"), new Email(\"cheesecakestore@example.com\"),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Price(\"$3\"), new Rating(\"5\"),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                    getTagSet(\"dessert\"), getAllergySet(\"lactose\")),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            new Food(new Name(\"Durian Milkshake\"), new Phone(\"91031282\"), new Email(\"durianmarket@example.com\"),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Price(\"$10\"), new Rating(\"2\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                    getTagSet(\"drink\"), getAllergySet(\"lactose\")),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            new Food(new Name(\"Ice cream\"), new Phone(\"92492021\"), new Email(\"icecreamshop@example.com\"),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Price(\"$2.5\"), new Rating(\"5\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                    getTagSet(\"dessert\"), getAllergySet(\"lactose\")),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            new Food(new Name(\"Roti\"), new Phone(\"92624417\"), new Email(\"rotirestraunt@example.com\"),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Price(\"$0.8\"), new Rating(\"3\"),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                    getTagSet(\"snack\"), getAllergySet(\"peanut\"))"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static UserProfile getSampleProfile() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new UserProfile(new Name(\"Hacker\"), new Phone(\"123456\"),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                new Address(\"Blk 71 One North MRT Station\"), getAllergySet(\"lactose\", \"peanut\", \"cinnamon\"));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            for (Food sampleFood : getSampleFoods()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                sampleAb.addFood(sampleFood);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (DuplicateFoodException e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate foods\", e);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns an allergy set containing the list of strings given."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static Set\u003cAllergy\u003e getAllergySet(String... strings) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        HashSet\u003cAllergy\u003e allergies \u003d new HashSet\u003c\u003e();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            allergies.add(new Allergy(s));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return allergies;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":1,"-":86}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedFood.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Phone;"},{"lineNumber":17,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.Price;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Rating;"},{"lineNumber":19,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.allergy.Allergy;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Food."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlAdaptedFood {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"tohcheryl"},"content":"    private String price;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private String rating;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"tohcheryl"},"content":"    @XmlElement"},{"lineNumber":45,"author":{"gitID":"tohcheryl"},"content":"    private List\u003cXmlAdaptedAllergy\u003e addedAllergies \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedFood."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public XmlAdaptedFood() {}"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedFood} with the given food details."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"tohcheryl"},"content":"    public XmlAdaptedFood(String name, String phone, String email, String address, String price,"},{"lineNumber":57,"author":{"gitID":"tohcheryl"},"content":"                          String rating, List\u003cXmlAdaptedTag\u003e tagged, List\u003cXmlAdaptedAllergy\u003e addedAllergies) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":62,"author":{"gitID":"tohcheryl"},"content":"        this.price \u003d price;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.rating \u003d rating;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"tohcheryl"},"content":"        if (addedAllergies !\u003d null) {"},{"lineNumber":68,"author":{"gitID":"tohcheryl"},"content":"            this.addedAllergies \u003d new ArrayList\u003c\u003e(addedAllergies);"},{"lineNumber":69,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Converts a given Food into this class for JAXB use."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedFood"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public XmlAdaptedFood(Food source) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":82,"author":{"gitID":"tohcheryl"},"content":"        price \u003d source.getPrice().getValue();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        rating \u003d source.getRating().value;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"tohcheryl"},"content":"        for (Allergy allergy: source.getAllergies()) {"},{"lineNumber":89,"author":{"gitID":"tohcheryl"},"content":"            addedAllergies.add(new XmlAdaptedAllergy(allergy));"},{"lineNumber":90,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted food object into the model\u0027s Food object."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted food"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public Food toModelType() throws IllegalValueException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":100,"author":{"gitID":"tohcheryl"},"content":"        final List\u003cAllergy\u003e foodAllergies \u003d new ArrayList\u003c\u003e();"},{"lineNumber":101,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"tohcheryl"},"content":"        for (XmlAdaptedAllergy allergy: addedAllergies) {"},{"lineNumber":107,"author":{"gitID":"tohcheryl"},"content":"            foodAllergies.add(allergy.toModelType());"},{"lineNumber":108,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"tohcheryl"},"content":"        if (this.price \u003d\u003d null) {"},{"lineNumber":143,"author":{"gitID":"tohcheryl"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"},{"lineNumber":144,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"tohcheryl"},"content":"        if (!Price.isValidPrice(this.price)) {"},{"lineNumber":146,"author":{"gitID":"tohcheryl"},"content":"            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"tohcheryl"},"content":"        final Price price \u003d new Price(this.price);"},{"lineNumber":149,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        if (this.rating \u003d\u003d null) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        if (!Rating.isValidRating(this.rating)) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        final Rating rating \u003d new Rating(this.rating);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":159,"author":{"gitID":"tohcheryl"},"content":"        final Set\u003cAllergy\u003e allergies \u003d new HashSet\u003c\u003e(foodAllergies);"},{"lineNumber":160,"author":{"gitID":"tohcheryl"},"content":"        return new Food(name, phone, email, address, price, rating, tags, allergies);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedFood)) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        XmlAdaptedFood otherFood \u003d (XmlAdaptedFood) other;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherFood.name)"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherFood.phone)"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherFood.email)"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherFood.address)"},{"lineNumber":178,"author":{"gitID":"tohcheryl"},"content":"                \u0026\u0026 Objects.equals(price, otherFood.price)"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(rating, otherFood.rating)"},{"lineNumber":180,"author":{"gitID":"tohcheryl"},"content":"                \u0026\u0026 tagged.equals(otherFood.tagged)"},{"lineNumber":181,"author":{"gitID":"tohcheryl"},"content":"                \u0026\u0026 addedAllergies.equals(otherFood.addedAllergies);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":34,"-":149}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.food.exceptions.DuplicateFoodException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.food.exceptions.FoodNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.user.UserProfile;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UniqueFoodList foods;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private UserProfile profile;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        foods \u003d new UniqueFoodList();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        profile \u003d SampleDataUtil.getSampleProfile();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Foods, Tags, and User Profile in the {@code toBeCopied}"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setFoods(List\u003cFood\u003e foods) throws DuplicateFoodException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.foods.setFoods(foods);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setUserProfile(UserProfile profile) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.profile \u003d profile;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        List\u003cFood\u003e syncedFoodList \u003d newData.getFoodList().stream()"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setUserProfile(newData.getUserProfile());"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            setFoods(syncedFoodList);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        } catch (DuplicateFoodException e) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate foods\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    //// food-level operations"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Adds a food to HackEat."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Also checks the new food\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the food to point to those in {@link #tags}."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * @throws DuplicateFoodException if an equivalent food already exists."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void addFood(Food p) throws DuplicateFoodException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Food food \u003d syncWithMasterTagList(p);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any food"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // in the food list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"        foods.add(food);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Replaces the given food {@code target} in the list with {@code editedFood}."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedFood}."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * @throws DuplicateFoodException if updating the food\u0027s details causes the food to be equivalent to"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *      another existing food in the list."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @throws FoodNotFoundException if {@code target} could not be found in the list."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Food)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void updateFood(Food target, Food editedFood)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throws DuplicateFoodException, FoodNotFoundException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        requireNonNull(editedFood);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Food syncedEditedFood \u003d syncWithMasterTagList(editedFood);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any food"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // in the food list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"        foods.setFood(target, syncedEditedFood);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Replaces the old profile with the new profile {@code newProfile}."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void updateUserProfile(UserProfile newProfile) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        profile \u003d newProfile;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code food} that are not in the list."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code food} such that every tag in this food points to a Tag object in the master"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    private Food syncWithMasterTagList(Food food) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(food.getTags());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // used for checking food tag references"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // Rebuild the list of food tags to point to the relevant tags in the master tag list."},{"lineNumber":148,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return new Food("},{"lineNumber":151,"author":{"gitID":"tohcheryl"},"content":"                food.getName(), food.getPhone(), food.getEmail(), food.getAddress(),"},{"lineNumber":152,"author":{"gitID":"tohcheryl"},"content":"                food.getPrice(), food.getRating() , correctTagReferences, food.getAllergies());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * @throws FoodNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public boolean removeFood(Food key) throws FoodNotFoundException {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        if (foods.remove(key)) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            throw new FoodNotFoundException();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return foods.asObservableList().size() + \" foods, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public ObservableList\u003cFood\u003e getFoodList() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return foods.asObservableList();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public UserProfile getUserProfile() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        return profile;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":200,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.foods.equals(((AddressBook) other).foods)"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        return Objects.hash(foods, tags);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":2,"-":207}},{"path":"src/main/java/seedu/address/model/user/UserProfile.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.user;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Address;"},{"lineNumber":8,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Phone;"},{"lineNumber":11,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.food.allergy.Allergy;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.food.allergy.UniqueAllergyList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Represents the profile of the HackEat user and contains"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * personal information such as name, phone and physical address."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UserProfile {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final UniqueAllergyList allergies;"},{"lineNumber":24,"author":{"gitID":"tohcheryl"},"content":"    private final UniqueFoodList recentFoods;"},{"lineNumber":25,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Constructs a {@code UserProfile} object."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *  @param name    Name of user"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @param phone   Phone number of user"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @param address Address of user for food delivery"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public UserProfile(Name name, Phone phone, Address address, Set\u003cAllergy\u003e allergies) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.allergies \u003d new UniqueAllergyList(allergies);"},{"lineNumber":38,"author":{"gitID":"tohcheryl"},"content":"        this.recentFoods \u003d new UniqueFoodList();"},{"lineNumber":39,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":41,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"tohcheryl"},"content":"     * Constructs a {@code UserProfile} object."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *  @param name    Name of user"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @param phone   Phone number of user"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @param address Address of user for food delivery"},{"lineNumber":46,"author":{"gitID":"tohcheryl"},"content":"     * @param recentFoods Food eaten recently"},{"lineNumber":47,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"tohcheryl"},"content":"    public UserProfile(Name name, Phone phone, Address address, Set\u003cAllergy\u003e allergies, Set\u003cFood\u003e recentFoods) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.allergies \u003d new UniqueAllergyList(allergies);"},{"lineNumber":53,"author":{"gitID":"tohcheryl"},"content":"        this.recentFoods \u003d new UniqueFoodList(recentFoods);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Returns an immutable allergy set, which throws {@code UnsupportedOperationException}"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public Set\u003cAllergy\u003e getAllergies() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(allergies.toSet());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"tohcheryl"},"content":"     * Returns an immutable Food set, which throws {@code UnsupportedOperationException}"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"tohcheryl"},"content":"    public Set\u003cFood\u003e getRecentFoods() {"},{"lineNumber":81,"author":{"gitID":"tohcheryl"},"content":"        return Collections.unmodifiableSet(recentFoods.toSet());"},{"lineNumber":82,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserProfile)) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        UserProfile otherUserProfile \u003d (UserProfile) other;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return otherUserProfile.getName().equals(this.getName())"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherUserProfile.getPhone().equals(this.getPhone())"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherUserProfile.getAddress().equals(this.getAddress())"},{"lineNumber":98,"author":{"gitID":"tohcheryl"},"content":"                \u0026\u0026 otherUserProfile.getAllergies().equals(this.getAllergies())"},{"lineNumber":99,"author":{"gitID":"tohcheryl"},"content":"                \u0026\u0026 otherUserProfile.getRecentFoods().equals(this.getRecentFoods());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":105,"author":{"gitID":"tohcheryl"},"content":"        return Objects.hash(name, phone, address, allergies, recentFoods);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .append(\" Allergies: \");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        getAllergies().forEach(builder::append);"},{"lineNumber":118,"author":{"gitID":"tohcheryl"},"content":"        builder.append(\"Recently ordered: \");"},{"lineNumber":119,"author":{"gitID":"tohcheryl"},"content":"        getRecentFoods().forEach(builder::append);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":24,"-":98}},{"path":"src/main/java/seedu/address/model/food/Food.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.food;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.food.allergy.Allergy;"},{"lineNumber":10,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.allergy.UniqueAllergyList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Represents a Food in HackEat."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class Food {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":24,"author":{"gitID":"tohcheryl"},"content":"    private final Price price;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Rating rating;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"tohcheryl"},"content":"    private final UniqueAllergyList allergies;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"tohcheryl"},"content":"    public Food(Name name, Phone phone, Email email, Address address, Price price, Rating rating,"},{"lineNumber":34,"author":{"gitID":"tohcheryl"},"content":"                Set\u003cTag\u003e tags, Set\u003cAllergy\u003e allergies) {"},{"lineNumber":35,"author":{"gitID":"tohcheryl"},"content":"        requireAllNonNull(name, phone, email, address, price, rating, tags, allergies);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":40,"author":{"gitID":"tohcheryl"},"content":"        this.price \u003d price;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.rating \u003d rating;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":44,"author":{"gitID":"tohcheryl"},"content":"        this.allergies \u003d new UniqueAllergyList(allergies);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"tohcheryl"},"content":"    public Price getPrice() {"},{"lineNumber":64,"author":{"gitID":"tohcheryl"},"content":"        return price;"},{"lineNumber":65,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public Rating getRating() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return rating;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":71,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"tohcheryl"},"content":"     * Returns an immutable allergy set, which throws {@code UnsupportedOperationException}"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"tohcheryl"},"content":"    public Set\u003cAllergy\u003e getAllergies() {"},{"lineNumber":76,"author":{"gitID":"tohcheryl"},"content":"        return Collections.unmodifiableSet(allergies.toSet());"},{"lineNumber":77,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!(other instanceof Food)) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Food otherFood \u003d (Food) other;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return otherFood.getName().equals(this.getName())"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherFood.getPhone().equals(this.getPhone())"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherFood.getEmail().equals(this.getEmail())"},{"lineNumber":101,"author":{"gitID":"tohcheryl"},"content":"                \u0026\u0026 otherFood.getAddress().equals(this.getAddress())"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherFood.getPrice().equals(this.getPrice())"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherFood.getRating().equals(this.getRating());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":109,"author":{"gitID":"tohcheryl"},"content":"        return Objects.hash(name, phone, email, address, price, rating, tags, allergies);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":122,"author":{"gitID":"tohcheryl"},"content":"                .append(\" Price: \")"},{"lineNumber":123,"author":{"gitID":"tohcheryl"},"content":"                .append(getPrice())"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .append(\" Rating: \")"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .append(getRating())"},{"lineNumber":126,"author":{"gitID":"tohcheryl"},"content":"                .append(\" Allergies: \");"},{"lineNumber":127,"author":{"gitID":"tohcheryl"},"content":"        getAllergies().forEach(builder::append);"},{"lineNumber":128,"author":{"gitID":"tohcheryl"},"content":"        builder.append(\" Tags: \");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":26,"-":107}},{"path":"src/main/java/seedu/address/model/food/Price.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.food;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"tohcheryl"},"content":"import java.math.BigDecimal;"},{"lineNumber":7,"author":{"gitID":"tohcheryl"},"content":"import java.util.Locale;"},{"lineNumber":8,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":9,"author":{"gitID":"tohcheryl"},"content":"import org.apache.commons.validator.routines.BigDecimalValidator;"},{"lineNumber":10,"author":{"gitID":"tohcheryl"},"content":"import org.apache.commons.validator.routines.CurrencyValidator;"},{"lineNumber":11,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":12,"author":{"gitID":"tohcheryl"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"tohcheryl"},"content":" * Represents a Food\u0027s price in HackEat."},{"lineNumber":14,"author":{"gitID":"tohcheryl"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"},{"lineNumber":15,"author":{"gitID":"tohcheryl"},"content":" */"},{"lineNumber":16,"author":{"gitID":"tohcheryl"},"content":"public class Price {"},{"lineNumber":17,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PRICE \u003d \"0\";"},{"lineNumber":19,"author":{"gitID":"tohcheryl"},"content":"    public static final String MESSAGE_PRICE_CONSTRAINTS \u003d"},{"lineNumber":20,"author":{"gitID":"tohcheryl"},"content":"            \"Price can only contain currency symbol and numbers\";"},{"lineNumber":21,"author":{"gitID":"tohcheryl"},"content":"    private static Locale currentLocale \u003d Locale.US;"},{"lineNumber":22,"author":{"gitID":"tohcheryl"},"content":"    private String value;"},{"lineNumber":23,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":24,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"tohcheryl"},"content":"     * Constructs a {@code Price}."},{"lineNumber":26,"author":{"gitID":"tohcheryl"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"tohcheryl"},"content":"     * @param price A valid price."},{"lineNumber":28,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"tohcheryl"},"content":"    public Price(String price) {"},{"lineNumber":30,"author":{"gitID":"tohcheryl"},"content":"        requireNonNull(price);"},{"lineNumber":31,"author":{"gitID":"tohcheryl"},"content":"        checkArgument(isValidPrice(price), MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"tohcheryl"},"content":"        setPrice(price);"},{"lineNumber":33,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":35,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"tohcheryl"},"content":"     * Returns true if a given string is a valid price."},{"lineNumber":37,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"tohcheryl"},"content":"    public static boolean isValidPrice(String inputPrice) {"},{"lineNumber":39,"author":{"gitID":"tohcheryl"},"content":"        if (inputPrice \u003d\u003d null) {"},{"lineNumber":40,"author":{"gitID":"tohcheryl"},"content":"            throw new NullPointerException();"},{"lineNumber":41,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":43,"author":{"gitID":"tohcheryl"},"content":"        BigDecimalValidator validator \u003d CurrencyValidator.getInstance();"},{"lineNumber":44,"author":{"gitID":"tohcheryl"},"content":"        BigDecimal amount \u003d validator.validate(inputPrice, currentLocale);"},{"lineNumber":45,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":46,"author":{"gitID":"tohcheryl"},"content":"        if (amount !\u003d null) {"},{"lineNumber":47,"author":{"gitID":"tohcheryl"},"content":"            return true;"},{"lineNumber":48,"author":{"gitID":"tohcheryl"},"content":"        } else {"},{"lineNumber":49,"author":{"gitID":"tohcheryl"},"content":"            return false;"},{"lineNumber":50,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":53,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"tohcheryl"},"content":"     * Sets price of Food without currency symbol."},{"lineNumber":55,"author":{"gitID":"tohcheryl"},"content":"     * Truncates given price to the appropriate number of dp."},{"lineNumber":56,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"tohcheryl"},"content":"    public void setPrice(String inputPrice) {"},{"lineNumber":58,"author":{"gitID":"tohcheryl"},"content":"        BigDecimalValidator validator \u003d CurrencyValidator.getInstance();"},{"lineNumber":59,"author":{"gitID":"tohcheryl"},"content":"        value \u003d validator.validate(inputPrice, currentLocale).toString();"},{"lineNumber":60,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Method to display price with pre-fix symbol \u0027$\u0027"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @return a string with \u0027$\u0027 prefix"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static String displayString(String value) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return \"$\" + value;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"tohcheryl"},"content":"     * Returns price of Food as a BigDecimal."},{"lineNumber":72,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"tohcheryl"},"content":"    public String getValue() {"},{"lineNumber":74,"author":{"gitID":"tohcheryl"},"content":"        return value;"},{"lineNumber":75,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":77,"author":{"gitID":"tohcheryl"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"tohcheryl"},"content":"    public String toString() {"},{"lineNumber":79,"author":{"gitID":"tohcheryl"},"content":"        return value;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":85,"author":{"gitID":"tohcheryl"},"content":"                || (other instanceof Price // instanceof handles nulls"},{"lineNumber":86,"author":{"gitID":"tohcheryl"},"content":"                \u0026\u0026 this.value.equals(((Price) other).value)); // state check"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"tohcheryl"},"content":"}"}],"authorContributionMap":{"tohcheryl":68,"-":25}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedUserProfile.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Address;"},{"lineNumber":13,"author":{"gitID":"tohcheryl"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.food.Phone;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.food.allergy.Allergy;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.user.UserProfile;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the User Profile."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAdaptedUserProfile {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"User Profile\u0027s %s field is missing!\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedAllergy\u003e allergies \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"tohcheryl"},"content":"    @XmlElement"},{"lineNumber":36,"author":{"gitID":"tohcheryl"},"content":"    private List\u003cXmlAdaptedFood\u003e recentFoods \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedUserProfile."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public XmlAdaptedUserProfile() {}"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedUserProfile} with the given food details."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"tohcheryl"},"content":"    public XmlAdaptedUserProfile(String name, String phone, String address, List\u003cXmlAdaptedAllergy\u003e allergies,"},{"lineNumber":49,"author":{"gitID":"tohcheryl"},"content":"                                 List\u003cXmlAdaptedFood\u003e foods) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (allergies !\u003d null) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.allergies \u003d new ArrayList\u003c\u003e(allergies);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":57,"author":{"gitID":"tohcheryl"},"content":"        if (foods !\u003d null) {"},{"lineNumber":58,"author":{"gitID":"tohcheryl"},"content":"            this.recentFoods \u003d new ArrayList\u003c\u003e(foods);"},{"lineNumber":59,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Converts a given Profile into this class for JAXB use."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedProfile"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public XmlAdaptedUserProfile(UserProfile source) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        for (Allergy allergy: source.getAllergies()) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            allergies.add(new XmlAdaptedAllergy(allergy));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"tohcheryl"},"content":"        for (Food food: source.getRecentFoods()) {"},{"lineNumber":75,"author":{"gitID":"tohcheryl"},"content":"            recentFoods.add(new XmlAdaptedFood(food));"},{"lineNumber":76,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted UserProfile object into the model\u0027s UserProfile object."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted UserProfile"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public UserProfile toModelType() throws IllegalValueException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        final List\u003cAllergy\u003e allergiesList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"tohcheryl"},"content":"        final List\u003cFood\u003e recentFoodsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        for (XmlAdaptedAllergy allergy : allergies) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            allergiesList.add(allergy.toModelType());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"tohcheryl"},"content":"        for (XmlAdaptedFood food : recentFoods) {"},{"lineNumber":92,"author":{"gitID":"tohcheryl"},"content":"            recentFoodsList.add(food.toModelType());"},{"lineNumber":93,"author":{"gitID":"tohcheryl"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        final Set\u003cAllergy\u003e allergies \u003d new HashSet\u003c\u003e(allergiesList);"},{"lineNumber":120,"author":{"gitID":"tohcheryl"},"content":"        final Set\u003cFood\u003e recentFoods \u003d new HashSet\u003c\u003e(recentFoodsList);"},{"lineNumber":121,"author":{"gitID":"tohcheryl"},"content":"        return new UserProfile(name, phone, address, allergies, recentFoods);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedUserProfile)) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        XmlAdaptedUserProfile otherProfile \u003d (XmlAdaptedUserProfile) other;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherProfile.name)"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherProfile.phone)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherProfile.address)"},{"lineNumber":138,"author":{"gitID":"tohcheryl"},"content":"                \u0026\u0026 allergies.equals(otherProfile.allergies)"},{"lineNumber":139,"author":{"gitID":"tohcheryl"},"content":"                \u0026\u0026 recentFoods.equals(otherProfile.recentFoods);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":21,"-":120}},{"path":"src/main/java/seedu/address/model/food/UniqueFoodList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.food;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"tohcheryl"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"tohcheryl"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.food.exceptions.DuplicateFoodException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.food.exceptions.FoodNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A list of foods that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"-"},"content":" *"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * @see Food#equals(Object)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class UniqueFoodList implements Iterable\u003cFood\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cFood\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"tohcheryl"},"content":"    public UniqueFoodList() {}"},{"lineNumber":30,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":31,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"tohcheryl"},"content":"     * Creates a UniqueFoodList using given foods."},{"lineNumber":33,"author":{"gitID":"tohcheryl"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"tohcheryl"},"content":"    public UniqueFoodList(Set\u003cFood\u003e foods) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(foods);"},{"lineNumber":37,"author":{"gitID":"tohcheryl"},"content":"        internalList.addAll(foods);"},{"lineNumber":38,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":39,"author":{"gitID":"tohcheryl"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent food as the given argument."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public boolean contains(Food toCheck) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Adds a food to the list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws DuplicateFoodException if the food to add is a duplicate of an existing food in the list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void add(Food toAdd) throws DuplicateFoodException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new DuplicateFoodException();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Replaces the food {@code target} in the list with {@code editedFood}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @throws DuplicateFoodException if the replacement is equivalent to another existing food in the list."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @throws FoodNotFoundException if {@code target} could not be found in the list."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void setFood(Food target, Food editedFood)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throws DuplicateFoodException, FoodNotFoundException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(editedFood);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throw new FoodNotFoundException();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (!target.equals(editedFood) \u0026\u0026 internalList.contains(editedFood)) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new DuplicateFoodException();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        internalList.set(index, editedFood);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Removes the equivalent food from the list."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws FoodNotFoundException if no such food could be found in the list."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public boolean remove(Food toRemove) throws FoodNotFoundException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new FoodNotFoundException();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void setFoods(UniqueFoodList replacement) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void setFoods(List\u003cFood\u003e foods) throws DuplicateFoodException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        requireAllNonNull(foods);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        final UniqueFoodList replacement \u003d new UniqueFoodList();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        for (final Food food : foods) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            replacement.add(food);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        setFoods(replacement);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"tohcheryl"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"tohcheryl"},"content":"     * Returns all Foods in this list as a Set."},{"lineNumber":114,"author":{"gitID":"tohcheryl"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":115,"author":{"gitID":"tohcheryl"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"tohcheryl"},"content":"    public Set\u003cFood\u003e toSet() {"},{"lineNumber":117,"author":{"gitID":"tohcheryl"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":118,"author":{"gitID":"tohcheryl"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":119,"author":{"gitID":"tohcheryl"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"tohcheryl"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public ObservableList\u003cFood\u003e asObservableList() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public Iterator\u003cFood\u003e iterator() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueFoodList // instanceof handles nulls"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueFoodList) other).internalList));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tohcheryl":23,"-":121}}]
