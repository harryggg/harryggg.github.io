var resultJson = [{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ReadOnlyPerson deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, \"\\n\" + deletedPerson);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, \"\\n\" + deletedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Removes the {@code ReadOnlyPerson} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private ReadOnlyPerson removePerson(Model model, Index index) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        ReadOnlyPerson targetPerson \u003d getPerson(model, index);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        ReadOnlyPerson deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":137,"author":{"gitID":"KeithSOC"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, \"\\n\" + deletedPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":3,"-":197}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FAVORITE_DESC_YES;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_FAV_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SOCIAL_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SOCIAL_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FAVORITE_YES;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SOCIAL_AMY_INSTAGRAM;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        ReadOnlyPerson toAdd \u003d AMY;"},{"lineNumber":71,"author":{"gitID":"KeithSOC"},"content":"        String command \u003d \"   \""},{"lineNumber":72,"author":{"gitID":"KeithSOC"},"content":"                + AddCommand.COMMAND_WORD + \"  \""},{"lineNumber":73,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_AMY + \"  \""},{"lineNumber":74,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_AMY + \" \""},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_AMY + \"   \""},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_AMY + \"   \""},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":"                + TAG_DESC_FRIEND + \" \""},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":"                + SOCIAL_DESC_AMY + \" \";"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":93,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":94,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_AMY"},{"lineNumber":95,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_AMY"},{"lineNumber":96,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_AMY"},{"lineNumber":97,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_AMY"},{"lineNumber":98,"author":{"gitID":"marvinchin"},"content":"                + TAG_DESC_FRIEND"},{"lineNumber":99,"author":{"gitID":"marvinchin"},"content":"                + SOCIAL_DESC_AMY;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // This test will fail is a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(ReadOnlyPerson)"},{"lineNumber":106,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":107,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_AMY"},{"lineNumber":108,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_AMY"},{"lineNumber":109,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_AMY"},{"lineNumber":110,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_AMY"},{"lineNumber":111,"author":{"gitID":"marvinchin"},"content":"                + \" \" + PREFIX_TAG.getPrefix() + \"friends\""},{"lineNumber":112,"author":{"gitID":"marvinchin"},"content":"                + SOCIAL_DESC_AMY;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":116,"author":{"gitID":"KeithSOC"},"content":"        toAdd \u003d new PersonBuilder()"},{"lineNumber":117,"author":{"gitID":"KeithSOC"},"content":"                .withName(VALID_NAME_BOB)"},{"lineNumber":118,"author":{"gitID":"KeithSOC"},"content":"                .withPhone(VALID_PHONE_AMY)"},{"lineNumber":119,"author":{"gitID":"KeithSOC"},"content":"                .withEmail(VALID_EMAIL_AMY)"},{"lineNumber":120,"author":{"gitID":"KeithSOC"},"content":"                .withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":121,"author":{"gitID":"KeithSOC"},"content":"                .withFavorite(VALID_FAVORITE_YES)"},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":"                .withTags(VALID_TAG_FRIEND)"},{"lineNumber":123,"author":{"gitID":"marvinchin"},"content":"                .withSocialInfos(VALID_SOCIAL_AMY_INSTAGRAM)"},{"lineNumber":124,"author":{"gitID":"KeithSOC"},"content":"                .build();"},{"lineNumber":125,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":126,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_BOB"},{"lineNumber":127,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_AMY"},{"lineNumber":128,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_AMY"},{"lineNumber":129,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_AMY"},{"lineNumber":130,"author":{"gitID":"KeithSOC"},"content":"                + FAVORITE_DESC_YES"},{"lineNumber":131,"author":{"gitID":"marvinchin"},"content":"                + TAG_DESC_FRIEND"},{"lineNumber":132,"author":{"gitID":"marvinchin"},"content":"                + SOCIAL_DESC_AMY;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":136,"author":{"gitID":"KeithSOC"},"content":"        toAdd \u003d new PersonBuilder()"},{"lineNumber":137,"author":{"gitID":"KeithSOC"},"content":"                .withName(VALID_NAME_AMY)"},{"lineNumber":138,"author":{"gitID":"KeithSOC"},"content":"                .withPhone(VALID_PHONE_BOB)"},{"lineNumber":139,"author":{"gitID":"KeithSOC"},"content":"                .withEmail(VALID_EMAIL_AMY)"},{"lineNumber":140,"author":{"gitID":"KeithSOC"},"content":"                .withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":141,"author":{"gitID":"KeithSOC"},"content":"                .withFavorite(VALID_FAVORITE_YES)"},{"lineNumber":142,"author":{"gitID":"KeithSOC"},"content":"                .withTags(VALID_TAG_FRIEND)"},{"lineNumber":143,"author":{"gitID":"marvinchin"},"content":"                .withSocialInfos(VALID_SOCIAL_AMY_INSTAGRAM)"},{"lineNumber":144,"author":{"gitID":"KeithSOC"},"content":"                .build();"},{"lineNumber":145,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":146,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_AMY"},{"lineNumber":147,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_BOB"},{"lineNumber":148,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_AMY"},{"lineNumber":149,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_AMY"},{"lineNumber":150,"author":{"gitID":"KeithSOC"},"content":"                + FAVORITE_DESC_YES"},{"lineNumber":151,"author":{"gitID":"marvinchin"},"content":"                + TAG_DESC_FRIEND"},{"lineNumber":152,"author":{"gitID":"marvinchin"},"content":"                + SOCIAL_DESC_AMY;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":156,"author":{"gitID":"KeithSOC"},"content":"        toAdd \u003d new PersonBuilder()"},{"lineNumber":157,"author":{"gitID":"KeithSOC"},"content":"                .withName(VALID_NAME_AMY)"},{"lineNumber":158,"author":{"gitID":"KeithSOC"},"content":"                .withPhone(VALID_PHONE_AMY)"},{"lineNumber":159,"author":{"gitID":"KeithSOC"},"content":"                .withEmail(VALID_EMAIL_BOB)"},{"lineNumber":160,"author":{"gitID":"KeithSOC"},"content":"                .withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":161,"author":{"gitID":"KeithSOC"},"content":"                .withFavorite(VALID_FAVORITE_YES)"},{"lineNumber":162,"author":{"gitID":"KeithSOC"},"content":"                .withTags(VALID_TAG_FRIEND)"},{"lineNumber":163,"author":{"gitID":"marvinchin"},"content":"                .withSocialInfos(VALID_SOCIAL_AMY_INSTAGRAM)"},{"lineNumber":164,"author":{"gitID":"KeithSOC"},"content":"                .build();"},{"lineNumber":165,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":166,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_AMY"},{"lineNumber":167,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_AMY"},{"lineNumber":168,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_BOB"},{"lineNumber":169,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_AMY"},{"lineNumber":170,"author":{"gitID":"KeithSOC"},"content":"                + FAVORITE_DESC_YES"},{"lineNumber":171,"author":{"gitID":"marvinchin"},"content":"                + TAG_DESC_FRIEND"},{"lineNumber":172,"author":{"gitID":"marvinchin"},"content":"                + SOCIAL_DESC_AMY;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":176,"author":{"gitID":"KeithSOC"},"content":"        toAdd \u003d new PersonBuilder()"},{"lineNumber":177,"author":{"gitID":"KeithSOC"},"content":"                .withName(VALID_NAME_AMY)"},{"lineNumber":178,"author":{"gitID":"KeithSOC"},"content":"                .withPhone(VALID_PHONE_AMY)"},{"lineNumber":179,"author":{"gitID":"KeithSOC"},"content":"                .withEmail(VALID_EMAIL_AMY)"},{"lineNumber":180,"author":{"gitID":"KeithSOC"},"content":"                .withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":181,"author":{"gitID":"KeithSOC"},"content":"                .withFavorite(VALID_FAVORITE_YES)"},{"lineNumber":182,"author":{"gitID":"KeithSOC"},"content":"                .withTags(VALID_TAG_FRIEND)"},{"lineNumber":183,"author":{"gitID":"marvinchin"},"content":"                .withSocialInfos(VALID_SOCIAL_AMY_INSTAGRAM)"},{"lineNumber":184,"author":{"gitID":"KeithSOC"},"content":"                .build();"},{"lineNumber":185,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":186,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_AMY"},{"lineNumber":187,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_AMY"},{"lineNumber":188,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_AMY"},{"lineNumber":189,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_BOB"},{"lineNumber":190,"author":{"gitID":"KeithSOC"},"content":"                + FAVORITE_DESC_YES"},{"lineNumber":191,"author":{"gitID":"marvinchin"},"content":"                + TAG_DESC_FRIEND"},{"lineNumber":192,"author":{"gitID":"marvinchin"},"content":"                + SOCIAL_DESC_AMY;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assert getModel().getFilteredPersonList().size()"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":208,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":209,"author":{"gitID":"KeithSOC"},"content":"                + FAVORITE_DESC_YES"},{"lineNumber":210,"author":{"gitID":"KeithSOC"},"content":"                + TAG_DESC_FRIEND"},{"lineNumber":211,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_BOB"},{"lineNumber":212,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_BOB"},{"lineNumber":213,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_BOB"},{"lineNumber":214,"author":{"gitID":"KeithSOC"},"content":"                + TAG_DESC_HUSBAND"},{"lineNumber":215,"author":{"gitID":"marvinchin"},"content":"                + EMAIL_DESC_BOB"},{"lineNumber":216,"author":{"gitID":"marvinchin"},"content":"                + SOCIAL_DESC_BOB;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assert getPersonListPanel().isAnyCardSelected();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":228,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":229,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_AMY"},{"lineNumber":230,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_AMY"},{"lineNumber":231,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":235,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":236,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_AMY"},{"lineNumber":237,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_AMY"},{"lineNumber":238,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":242,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":243,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_AMY"},{"lineNumber":244,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_AMY"},{"lineNumber":245,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":249,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":250,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_AMY"},{"lineNumber":251,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_AMY"},{"lineNumber":252,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_AMY;"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":260,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":261,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_AMY"},{"lineNumber":262,"author":{"gitID":"KeithSOC"},"content":"                + INVALID_PHONE_DESC"},{"lineNumber":263,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_AMY"},{"lineNumber":264,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":268,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":269,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_AMY"},{"lineNumber":270,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_AMY"},{"lineNumber":271,"author":{"gitID":"KeithSOC"},"content":"                + INVALID_EMAIL_DESC"},{"lineNumber":272,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":276,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":277,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_AMY"},{"lineNumber":278,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_AMY"},{"lineNumber":279,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_AMY"},{"lineNumber":280,"author":{"gitID":"KeithSOC"},"content":"                + INVALID_ADDRESS_DESC;"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"KeithSOC"},"content":"        /* Case: invalid favorite status -\u003e rejected */"},{"lineNumber":284,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":285,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_AMY"},{"lineNumber":286,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_AMY"},{"lineNumber":287,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_AMY"},{"lineNumber":288,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_AMY"},{"lineNumber":289,"author":{"gitID":"KeithSOC"},"content":"                + INVALID_FAV_DESC;"},{"lineNumber":290,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(command, Favorite.MESSAGE_FAVORITE_CONSTRAINTS);"},{"lineNumber":291,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":293,"author":{"gitID":"KeithSOC"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":294,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_AMY"},{"lineNumber":295,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_AMY"},{"lineNumber":296,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_AMY"},{"lineNumber":297,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_AMY"},{"lineNumber":298,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and verifies that the command box displays"},{"lineNumber":304,"author":{"gitID":"-"},"content":"     * an empty string, the result display box displays the success message of executing {@code AddCommand} with the"},{"lineNumber":305,"author":{"gitID":"-"},"content":"     * details of {@code toAdd}, and the model related components equal to the current model added with {@code toAdd}."},{"lineNumber":306,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":307,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":308,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class, the status bar\u0027s sync status changes,"},{"lineNumber":309,"author":{"gitID":"-"},"content":"     * the browser url and selected card remains unchanged."},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":311,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(ReadOnlyPerson toAdd) {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":314,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":317,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(ReadOnlyPerson)}. Executes {@code command}"},{"lineNumber":318,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":319,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(ReadOnlyPerson)"},{"lineNumber":320,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":321,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, ReadOnlyPerson toAdd) {"},{"lineNumber":322,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":324,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":326,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":327,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":331,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":334,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, ReadOnlyPerson)} except that the result"},{"lineNumber":335,"author":{"gitID":"-"},"content":"     * display box displays {@code expectedResultMessage} and the model related components equal to"},{"lineNumber":336,"author":{"gitID":"-"},"content":"     * {@code expectedModel}."},{"lineNumber":337,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, ReadOnlyPerson)"},{"lineNumber":338,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":340,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":342,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":343,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":348,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":349,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":350,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":351,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":352,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":353,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":354,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":355,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":356,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":357,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":360,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":361,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":362,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":363,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":364,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":365,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":23,"KeithSOC":128,"-":214}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE_DAY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initializeStage();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":107,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d getModel().getFilteredPersonList().size();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assert getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assert getPersonListPanel().getSelectedCardIndex() \u003d\u003d index.getZeroBased();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":170,"author":{"gitID":"marvinchin"},"content":"        /*"},{"lineNumber":171,"author":{"gitID":"marvinchin"},"content":"        Disable this check as we are getting redirected when testing due to making too many calls"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":173,"author":{"gitID":"marvinchin"},"content":"        */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":185,"author":{"gitID":"marvinchin"},"content":"        /*"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX + selectedCardName.replaceAll(\" \", \"+\")"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                    + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":194,"author":{"gitID":"marvinchin"},"content":"        */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":251,"author":{"gitID":"KeithSOC"},"content":"            assertEquals(MainApp.class.getResource("},{"lineNumber":252,"author":{"gitID":"KeithSOC"},"content":"                    FXML_FILE_FOLDER + DEFAULT_PAGE_DAY), getBrowserPanel().getLoadedUrl());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":5,"KeithSOC":3,"-":258}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"sarahnzx"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SOCIAL_TYPE_NOT_FOUND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":25,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":59,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assert validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":80,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":84,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"sarahnzx"},"content":"        //@@author sarahnzx"},{"lineNumber":87,"author":{"gitID":"sarahnzx"},"content":"        /* Case: valid arguments (social type instagram) -\u003e selected */"},{"lineNumber":88,"author":{"gitID":"sarahnzx"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased() + \" instagram\";"},{"lineNumber":89,"author":{"gitID":"sarahnzx"},"content":"        assertCommandFailure(command, MESSAGE_SOCIAL_TYPE_NOT_FOUND);"},{"lineNumber":90,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":91,"author":{"gitID":"sarahnzx"},"content":"        /* Case: valid arguments (social type facebook) -\u003e selected */"},{"lineNumber":92,"author":{"gitID":"sarahnzx"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased() + \" facebook\";"},{"lineNumber":93,"author":{"gitID":"sarahnzx"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":94,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":95,"author":{"gitID":"sarahnzx"},"content":"        /* Case: valid arguments (social type ig) -\u003e selected */"},{"lineNumber":96,"author":{"gitID":"sarahnzx"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased() + \" ig\";"},{"lineNumber":97,"author":{"gitID":"sarahnzx"},"content":"        assertCommandFailure(command, MESSAGE_SOCIAL_TYPE_NOT_FOUND);"},{"lineNumber":98,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":99,"author":{"gitID":"sarahnzx"},"content":"        /* Case: valid arguments (social type fb) -\u003e selected */"},{"lineNumber":100,"author":{"gitID":"sarahnzx"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased() + \" fb\";"},{"lineNumber":101,"author":{"gitID":"sarahnzx"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":102,"author":{"gitID":"sarahnzx"},"content":"        //@@author"},{"lineNumber":103,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * box displays the success message of executing select command with the {@code expectedSelectedCardIndex}"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * of the selected person, and the model related components equal to the current model."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar remain unchanged. The resulting"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * browser url and selected card will be verified if the current selected card and the card at"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} are different."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":129,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":142,"author":{"gitID":"marvinchin"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahnzx":19,"marvinchin":1,"-":143}},{"path":"src/test/java/seedu/address/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\", false);"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(\"\", resultDisplayHandle.getText());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // new result received"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        postNow(NEW_RESULT_EVENT_STUB);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":1,"-":37}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FAVORITE_DESC_NO;"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FAVORITE_DESC_YES;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_FAV_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SOCIAL_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SOCIAL_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FAVORITE_YES;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SOCIAL_BOB_FACEBOOK;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":73,"author":{"gitID":"KeithSOC"},"content":"        String command \u003d \" \""},{"lineNumber":74,"author":{"gitID":"KeithSOC"},"content":"                + EditCommand.COMMAND_WORD + \"  \""},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"                + index.getOneBased() + \"  \""},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_BOB + \"  \""},{"lineNumber":77,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_BOB + \" \""},{"lineNumber":78,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_BOB + \"  \""},{"lineNumber":79,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_BOB + \" \""},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":"                + FAVORITE_DESC_YES + \" \""},{"lineNumber":81,"author":{"gitID":"marvinchin"},"content":"                + TAG_DESC_HUSBAND + \" \""},{"lineNumber":82,"author":{"gitID":"marvinchin"},"content":"                + SOCIAL_DESC_BOB + \" \";"},{"lineNumber":83,"author":{"gitID":"KeithSOC"},"content":"        Person editedPerson \u003d new PersonBuilder()"},{"lineNumber":84,"author":{"gitID":"KeithSOC"},"content":"                .withName(VALID_NAME_BOB)"},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":"                .withPhone(VALID_PHONE_BOB)"},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":"                .withEmail(VALID_EMAIL_BOB)"},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":"                .withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":88,"author":{"gitID":"KeithSOC"},"content":"                .withFavorite(VALID_FAVORITE_YES)"},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":"                .withTags(VALID_TAG_HUSBAND)"},{"lineNumber":90,"author":{"gitID":"marvinchin"},"content":"                .withSocialInfos(VALID_SOCIAL_BOB_FACEBOOK)"},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"                .build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":103,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":107,"author":{"gitID":"marvinchin"},"content":"        // After sorting, bob is the second person in the list"},{"lineNumber":108,"author":{"gitID":"marvinchin"},"content":"        Index bobIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":109,"author":{"gitID":"KeithSOC"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \""},{"lineNumber":110,"author":{"gitID":"marvinchin"},"content":"                + bobIndex.getOneBased()"},{"lineNumber":111,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_BOB"},{"lineNumber":112,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_BOB"},{"lineNumber":113,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_BOB"},{"lineNumber":114,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_BOB"},{"lineNumber":115,"author":{"gitID":"KeithSOC"},"content":"                + FAVORITE_DESC_YES"},{"lineNumber":116,"author":{"gitID":"KeithSOC"},"content":"                + TAG_DESC_FRIEND"},{"lineNumber":117,"author":{"gitID":"marvinchin"},"content":"                + TAG_DESC_HUSBAND"},{"lineNumber":118,"author":{"gitID":"marvinchin"},"content":"                + SOCIAL_DESC_BOB;"},{"lineNumber":119,"author":{"gitID":"marvinchin"},"content":"        assertCommandSuccess(command, bobIndex, BOB);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":140,"author":{"gitID":"marvinchin"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_AMY;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":142,"author":{"gitID":"marvinchin"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_AMY).build();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":146,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":147,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":156,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":157,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":161,"author":{"gitID":"KeithSOC"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \""},{"lineNumber":162,"author":{"gitID":"KeithSOC"},"content":"                + index.getOneBased()"},{"lineNumber":163,"author":{"gitID":"KeithSOC"},"content":"                + NAME_DESC_AMY"},{"lineNumber":164,"author":{"gitID":"KeithSOC"},"content":"                + PHONE_DESC_AMY"},{"lineNumber":165,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_AMY"},{"lineNumber":166,"author":{"gitID":"KeithSOC"},"content":"                + ADDRESS_DESC_AMY"},{"lineNumber":167,"author":{"gitID":"KeithSOC"},"content":"                + FAVORITE_DESC_NO"},{"lineNumber":168,"author":{"gitID":"marvinchin"},"content":"                + TAG_DESC_FRIEND"},{"lineNumber":169,"author":{"gitID":"marvinchin"},"content":"                + SOCIAL_DESC_AMY;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":207,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"KeithSOC"},"content":"        /* Case: invalid favorite -\u003e rejected */"},{"lineNumber":210,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_FAV_DESC,"},{"lineNumber":211,"author":{"gitID":"KeithSOC"},"content":"                Favorite.MESSAGE_FAVORITE_CONSTRAINTS);"},{"lineNumber":212,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":220,"author":{"gitID":"marvinchin"},"content":"        // Index of a person who is not Bob so that edit should fail"},{"lineNumber":221,"author":{"gitID":"marvinchin"},"content":"        Index notBobIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":222,"author":{"gitID":"marvinchin"},"content":"        assertFalse(getModel().getFilteredPersonList().get(notBobIndex.getZeroBased()).equals(BOB));"},{"lineNumber":223,"author":{"gitID":"marvinchin"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + notBobIndex.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":224,"author":{"gitID":"marvinchin"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + FAVORITE_DESC_YES + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":228,"author":{"gitID":"marvinchin"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + notBobIndex.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":229,"author":{"gitID":"marvinchin"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + FAVORITE_DESC_YES + TAG_DESC_HUSBAND;"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, ReadOnlyPerson, Index)} except that"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, ReadOnlyPerson, Index)"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson,"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":256,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":260,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":264,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":291,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":305,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":306,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":307,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":308,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":309,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":311,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":312,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":313,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":314,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":320,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":322,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":24,"KeithSOC":39,"-":261}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        Person personWithTags \u003d new PersonBuilder().build();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        personCard \u003d new PersonCard(personWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // changes made to Person reflects on card"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            personWithTags.setName(ALICE.getName());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            personWithTags.setAddress(ALICE.getAddress());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            personWithTags.setEmail(ALICE.getEmail());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            personWithTags.setPhone(ALICE.getPhone());"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"            personWithTags.setFavorite(ALICE.getFavorite());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            personWithTags.setTags(ALICE.getTags());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        PersonCard copy \u003d new PersonCard(person, 0);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1)));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, ReadOnlyPerson expectedPerson, int expectedId) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":1,"-":84}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"        Storage storage \u003d getDummyStorage();"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"        Logic logic \u003d new LogicManager(model, storage);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":4,"-":156}},{"path":"src/test/java/seedu/address/ui/testutil/UiPartRule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Parent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiPart;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides an isolated stage to test an individual {@code UiPart}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UiPartRule extends StageRule {"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"    private static final String[] CSS_FILES \u003d {\"view/ThemeDay.css\", \"view/ThemeDayExtensions.css\"};"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            FxToolkit.setupScene(() -\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                Scene scene \u003d new Scene(uiPart.getRoot());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                scene.getStylesheets().setAll(CSS_FILES);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                return scene;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Timeout should not happen.\", te);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":1,"-":28}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"    /* NOTE(Marvin): Removed due to google blocking too many requests"},{"lineNumber":5,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        URL expectedPersonUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                + ALICE.getName().fullName.replaceAll(\" \", \"+\") + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":3,"-":33}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.commons.core.ThemeSettings;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600.0;"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"    private static final double DEFAULT_WIDTH \u003d 600.0;"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"    private static final String DEFAULT_THEME \u003d \"view/ThemeDay.css\";"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"    private static final String DEFAULT_THEME_EXTENSIONS \u003d \"view/ThemeDayExtensions.css\";"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":72,"author":{"gitID":"KeithSOC"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(DEFAULT_WIDTH, DEFAULT_HEIGHT, (int) x, (int) y));"},{"lineNumber":73,"author":{"gitID":"KeithSOC"},"content":"        userPrefs.updateLastUsedThemeSetting(new ThemeSettings(DEFAULT_THEME, DEFAULT_THEME_EXTENSIONS));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":103,"author":{"gitID":"marvinchin"},"content":"        return model.makeCopy();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":1,"KeithSOC":9,"-":117}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent(new AddressBook());"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, 0);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":1,"-":74}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":"        String defaultConfigAsString \u003d \"App title : KayPoh\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":1,"-":31}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    private Storage storage \u003d getDummyStorage();"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"    private Logic logic \u003d new LogicManager(model, storage);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS_LIST_ALL, model);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":121,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":4,"KeithSOC":1,"-":122}},{"path":"src/test/java/seedu/address/logic/parser/UnFavoriteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"KeithSOC"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.UnFavoriteCommand;"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":" * outside of the UnFavoriteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":" * same path through the UnFavoriteCommand, and therefore we test only one of them."},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"public class UnFavoriteCommandParserTest {"},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"    private UnFavoriteCommandParser parser \u003d new UnFavoriteCommandParser();"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"    public void parse_validArgs_returnsUnFavoriteCommand() {"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"        assertParseSuccess(parser, \"1\", new UnFavoriteCommand(Arrays.asList(INDEX_FIRST_PERSON)));"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, \"a\","},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnFavoriteCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"KeithSOC":30,"-":7}},{"path":"src/test/java/seedu/address/logic/parser/ThemeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"public class ThemeCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"    private ThemeCommandParser parser \u003d new ThemeCommandParser();"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":"    public void parse_validArgs_returnsThemeCommand() {"},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":"        assertParseSuccess(parser, \"-day\", new ThemeCommand(\"-day\"));"},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":"        assertParseSuccess(parser, \"-night\", new ThemeCommand(\"-night\"));"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, \" \","},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, \"-\","},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, \"day\","},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"marvinchin":3,"KeithSOC":24,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FAVORITE_DESC_NO;"},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FAVORITE_DESC_YES;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_FAV_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FAVORITE_NO;"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FAVORITE_YES;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, \"1\" + INVALID_FAV_DESC, Favorite.MESSAGE_FAVORITE_CONSTRAINTS); // invalid fav"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":108,"author":{"gitID":"KeithSOC"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + FAVORITE_DESC_YES + TAG_DESC_FRIEND;"},{"lineNumber":109,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":110,"author":{"gitID":"KeithSOC"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":111,"author":{"gitID":"KeithSOC"},"content":"                .withName(VALID_NAME_AMY)"},{"lineNumber":112,"author":{"gitID":"KeithSOC"},"content":"                .withPhone(VALID_PHONE_BOB)"},{"lineNumber":113,"author":{"gitID":"KeithSOC"},"content":"                .withEmail(VALID_EMAIL_AMY)"},{"lineNumber":114,"author":{"gitID":"KeithSOC"},"content":"                .withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":115,"author":{"gitID":"KeithSOC"},"content":"                .withFavorite(VALID_FAVORITE_YES)"},{"lineNumber":116,"author":{"gitID":"KeithSOC"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":117,"author":{"gitID":"KeithSOC"},"content":"                .build();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"KeithSOC"},"content":"        // favorite"},{"lineNumber":163,"author":{"gitID":"KeithSOC"},"content":"        userInput \u003d targetIndex.getOneBased() + FAVORITE_DESC_NO;"},{"lineNumber":164,"author":{"gitID":"KeithSOC"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withFavorite(VALID_FAVORITE_NO).build();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":167,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":176,"author":{"gitID":"sarahnzx"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"sarahnzx"},"content":"    public void parse_multipleRepeatedFields_acceptsMultipleUnrepeated() {"},{"lineNumber":178,"author":{"gitID":"sarahnzx"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":179,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":180,"author":{"gitID":"sarahnzx"},"content":"        String userInput \u003d targetIndex.getOneBased()"},{"lineNumber":181,"author":{"gitID":"sarahnzx"},"content":"                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + FAVORITE_DESC_YES + TAG_DESC_FRIEND"},{"lineNumber":182,"author":{"gitID":"sarahnzx"},"content":"                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + FAVORITE_DESC_YES + TAG_DESC_FRIEND"},{"lineNumber":183,"author":{"gitID":"sarahnzx"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + FAVORITE_DESC_YES + TAG_DESC_HUSBAND;"},{"lineNumber":184,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":185,"author":{"gitID":"sarahnzx"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":186,"author":{"gitID":"sarahnzx"},"content":"                .withPhone(VALID_PHONE_AMY + \"\\n\" + VALID_PHONE_BOB)"},{"lineNumber":187,"author":{"gitID":"sarahnzx"},"content":"                .withEmail(VALID_EMAIL_BOB)"},{"lineNumber":188,"author":{"gitID":"sarahnzx"},"content":"                .withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":189,"author":{"gitID":"sarahnzx"},"content":"                .withFavorite(VALID_FAVORITE_YES)"},{"lineNumber":190,"author":{"gitID":"sarahnzx"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":191,"author":{"gitID":"sarahnzx"},"content":"                .build();"},{"lineNumber":192,"author":{"gitID":"sarahnzx"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":193,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":194,"author":{"gitID":"sarahnzx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":195,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"sarahnzx"},"content":"    //@@author"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":199,"author":{"gitID":"KeithSOC"},"content":"    public void parse_multipleDifferentFavoriteFields_failure() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":201,"author":{"gitID":"KeithSOC"},"content":"        String userInput \u003d targetIndex.getOneBased()"},{"lineNumber":202,"author":{"gitID":"KeithSOC"},"content":"                + FAVORITE_DESC_NO + FAVORITE_DESC_YES + FAVORITE_DESC_NO;"},{"lineNumber":203,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":204,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":211,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, userInput, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":216,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, userInput, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":220,"author":{"gitID":"sarahnzx"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"sarahnzx"},"content":"    public void parse_validValueFollowedByInvalidValue_success() {"},{"lineNumber":222,"author":{"gitID":"sarahnzx"},"content":"        // no other valid values specified"},{"lineNumber":223,"author":{"gitID":"sarahnzx"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":224,"author":{"gitID":"sarahnzx"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":225,"author":{"gitID":"sarahnzx"},"content":"        assertParseFailure(parser, userInput, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":226,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":227,"author":{"gitID":"sarahnzx"},"content":"        // valid value followed by invalid value specified"},{"lineNumber":228,"author":{"gitID":"sarahnzx"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":229,"author":{"gitID":"sarahnzx"},"content":"                + INVALID_PHONE_DESC;"},{"lineNumber":230,"author":{"gitID":"sarahnzx"},"content":"        assertParseFailure(parser, userInput, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":231,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"sarahnzx"},"content":"    //@@author"},{"lineNumber":233,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahnzx":37,"marvinchin":2,"KeithSOC":28,"-":177}},{"path":"src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":" * Contains unit tests for {@code ImportCommandParser}."},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"public class ImportCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    private ImportCommandParser parser \u003d new ImportCommandParser();"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"    public void parse_validArgs_returnsImportCommand() {"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"        String args \u003d \" some/path/somewhere  \";"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"        assertParseSuccess(parser, args, new ImportCommand(\"some/path/somewhere\"));"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"        String args \u003d \"\";"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, args, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":26,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/SortCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.SortByDefaultCommand;"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.SortByNameCommand;"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.SortByRecentCommand;"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":" * outside of the SortCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":" * same path through the SortCommand, and therefore we test only one of them."},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"public class SortCommandParserTest {"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    public void parse_noOptionsAndHasParams_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"param\";"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE);"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, input, expectedMessage);"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"    public void parse_validOptionsAndHasParams_throwsParseException() {"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"-\" + SortByNameCommand.COMMAND_OPTION + \" param\";"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE);"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, input, expectedMessage);"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    public void parse_invalidOption_throwsParseException() {"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"-someinvalidoption123\";"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE);"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, input, expectedMessage);"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"    public void parse_multipleOptions_throwsParseException() {"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"-\" + SortByNameCommand.COMMAND_OPTION + \" \""},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"                + \"-\" + SortByRecentCommand.COMMAND_OPTION;"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, input, expectedMessage);"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"    public void parse_noOptionsAndNoParams_returnsFindByDefaultCommand() {"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"\";"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"        SortCommand expectedSortCommand \u003d new SortByDefaultCommand();"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"        assertParseSuccess(parser, input, expectedSortCommand);"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"    public void parse_nameOptionAndNoParams_returnsFindByDefaultCommand() {"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"-\" + SortByNameCommand.COMMAND_OPTION;"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"        SortCommand expectedSortCommand \u003d new SortByNameCommand();"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"        assertParseSuccess(parser, input, expectedSortCommand);"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"    public void parse_recentOptionAndNoParams_returnsFindByRecentCommand() {"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"-\" + SortByRecentCommand.COMMAND_OPTION;"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"        SortCommand expectedSortCommand \u003d new SortByRecentCommand();"},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"        assertParseSuccess(parser, input, expectedSortCommand);"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":71,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/FacebookAddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"alexfoodw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":7,"author":{"gitID":"alexfoodw"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":9,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookAddCommand;"},{"lineNumber":10,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":11,"author":{"gitID":"alexfoodw"},"content":"//@@author alexfoodw"},{"lineNumber":12,"author":{"gitID":"alexfoodw"},"content":"public class FacebookAddCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":14,"author":{"gitID":"alexfoodw"},"content":"    private FacebookAddCommandParser parser \u003d new FacebookAddCommandParser();"},{"lineNumber":15,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":16,"author":{"gitID":"alexfoodw"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"alexfoodw"},"content":"    public void parse_validArgs_returnsFacebookLinkCommand() {"},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":"        assertParseSuccess(parser, FacebookAddCommand.EXAMPLE_NAME,"},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":"                new FacebookAddCommand(FacebookAddCommand.EXAMPLE_NAME));"},{"lineNumber":20,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"        assertParseFailure(parser, \" \","},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacebookAddCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"}"},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"//@@author"}],"authorContributionMap":{"alexfoodw":25,"-":3}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.DeleteByIndexCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookAddAllFriendsCommand;"},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookAddCommand;"},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookConnectCommand;"},{"lineNumber":29,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookLinkCommand;"},{"lineNumber":30,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookPostCommand;"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.FavoriteCommand;"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.FindByNameCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.UnFavoriteCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommandAlias(person));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":83,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":84,"author":{"gitID":"marvinchin"},"content":"        assertEquals(new DeleteByIndexCommand(Arrays.asList(INDEX_FIRST_PERSON)), command);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"marvinchin"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":90,"author":{"gitID":"marvinchin"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":91,"author":{"gitID":"marvinchin"},"content":"        assertEquals(new DeleteByIndexCommand(Arrays.asList(INDEX_FIRST_PERSON)), command);"},{"lineNumber":92,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":99,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"marvinchin"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":107,"author":{"gitID":"marvinchin"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":108,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"marvinchin"},"content":"    public void parseCommand_exitAlias() throws Exception {"},{"lineNumber":120,"author":{"gitID":"marvinchin"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":121,"author":{"gitID":"marvinchin"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"},{"lineNumber":122,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":124,"author":{"gitID":"alexfoodw"},"content":"    //@@author alexfoodw"},{"lineNumber":125,"author":{"gitID":"alexfoodw"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"alexfoodw"},"content":"    public void parseCommand_facebookAddAllFriends() throws Exception {"},{"lineNumber":127,"author":{"gitID":"alexfoodw"},"content":"        FacebookAddAllFriendsCommand command \u003d (FacebookAddAllFriendsCommand) parser.parseCommand("},{"lineNumber":128,"author":{"gitID":"alexfoodw"},"content":"                FacebookAddAllFriendsCommand.COMMAND_WORD);"},{"lineNumber":129,"author":{"gitID":"alexfoodw"},"content":"        assertEquals(new FacebookAddAllFriendsCommand(), command);"},{"lineNumber":130,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":132,"author":{"gitID":"alexfoodw"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"alexfoodw"},"content":"    public void parseCommand_facebookAdd() throws Exception {"},{"lineNumber":134,"author":{"gitID":"alexfoodw"},"content":"        FacebookAddCommand command \u003d (FacebookAddCommand) parser.parseCommand("},{"lineNumber":135,"author":{"gitID":"alexfoodw"},"content":"                FacebookAddCommand.COMMAND_WORD + \" \" + FacebookAddCommand.EXAMPLE_NAME);"},{"lineNumber":136,"author":{"gitID":"alexfoodw"},"content":"        assertEquals(new FacebookAddCommand(FacebookAddCommand.EXAMPLE_NAME), command);"},{"lineNumber":137,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":139,"author":{"gitID":"alexfoodw"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"alexfoodw"},"content":"    public void parseCommand_facebookConnect() throws Exception {"},{"lineNumber":141,"author":{"gitID":"alexfoodw"},"content":"        FacebookConnectCommand command \u003d (FacebookConnectCommand) parser.parseCommand("},{"lineNumber":142,"author":{"gitID":"alexfoodw"},"content":"                FacebookConnectCommand.COMMAND_WORD);"},{"lineNumber":143,"author":{"gitID":"alexfoodw"},"content":"        assertEquals(new FacebookConnectCommand(), command);"},{"lineNumber":144,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"alexfoodw"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"alexfoodw"},"content":"    public void parseCommand_facebookLink() throws Exception {"},{"lineNumber":147,"author":{"gitID":"alexfoodw"},"content":"        FacebookLinkCommand command \u003d (FacebookLinkCommand) parser.parseCommand("},{"lineNumber":148,"author":{"gitID":"alexfoodw"},"content":"                FacebookLinkCommand.COMMAND_WORD + \" \" + FacebookLinkCommand.EXAMPLE_LINK);"},{"lineNumber":149,"author":{"gitID":"alexfoodw"},"content":"        assertEquals(new FacebookLinkCommand(FacebookLinkCommand.EXAMPLE_LINK), command);"},{"lineNumber":150,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"alexfoodw"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"alexfoodw"},"content":"    public void parseCommand_facebookPost() throws Exception {"},{"lineNumber":153,"author":{"gitID":"alexfoodw"},"content":"        FacebookPostCommand command \u003d (FacebookPostCommand) parser.parseCommand("},{"lineNumber":154,"author":{"gitID":"alexfoodw"},"content":"                FacebookPostCommand.COMMAND_WORD + \" \" + FacebookPostCommand.EXAMPLE_POST);"},{"lineNumber":155,"author":{"gitID":"alexfoodw"},"content":"        assertEquals(new FacebookPostCommand(FacebookPostCommand.EXAMPLE_POST), command);"},{"lineNumber":156,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"alexfoodw"},"content":"    //@@author"},{"lineNumber":158,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":159,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":160,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"KeithSOC"},"content":"    public void parseCommand_favorite() throws Exception {"},{"lineNumber":162,"author":{"gitID":"KeithSOC"},"content":"        FavoriteCommand command \u003d (FavoriteCommand) parser.parseCommand("},{"lineNumber":163,"author":{"gitID":"KeithSOC"},"content":"                FavoriteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":164,"author":{"gitID":"KeithSOC"},"content":"        assertEquals(new FavoriteCommand(Arrays.asList(INDEX_FIRST_PERSON)), command);"},{"lineNumber":165,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":167,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"KeithSOC"},"content":"    public void parseCommand_favorite_multi() throws Exception {"},{"lineNumber":169,"author":{"gitID":"KeithSOC"},"content":"        FavoriteCommand command \u003d (FavoriteCommand) parser.parseCommand("},{"lineNumber":170,"author":{"gitID":"KeithSOC"},"content":"                FavoriteCommand.COMMAND_WORD + \" \""},{"lineNumber":171,"author":{"gitID":"KeithSOC"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":172,"author":{"gitID":"KeithSOC"},"content":"                        + INDEX_SECOND_PERSON.getOneBased());"},{"lineNumber":173,"author":{"gitID":"KeithSOC"},"content":"        assertEquals(new FavoriteCommand(Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON)), command);"},{"lineNumber":174,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":176,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":181,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":182,"author":{"gitID":"marvinchin"},"content":"        assertEquals(new FindByNameCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"marvinchin"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":189,"author":{"gitID":"marvinchin"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":190,"author":{"gitID":"marvinchin"},"content":"        assertEquals(new FindByNameCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":191,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"marvinchin"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":214,"author":{"gitID":"marvinchin"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":215,"author":{"gitID":"marvinchin"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":216,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":225,"author":{"gitID":"marvinchin"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":226,"author":{"gitID":"marvinchin"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":227,"author":{"gitID":"marvinchin"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":228,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":230,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":231,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":232,"author":{"gitID":"KeithSOC"},"content":"    public void parseCommand_listFav() throws Exception {"},{"lineNumber":233,"author":{"gitID":"KeithSOC"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD"},{"lineNumber":234,"author":{"gitID":"KeithSOC"},"content":"                + \" \" + ListCommand.COMMAND_OPTION_FAV) instanceof ListCommand);"},{"lineNumber":235,"author":{"gitID":"KeithSOC"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD"},{"lineNumber":236,"author":{"gitID":"KeithSOC"},"content":"                + \" \" + ListCommand.COMMAND_OPTION_FAV + \" 3\") instanceof ListCommand);"},{"lineNumber":237,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":239,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":243,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":248,"author":{"gitID":"marvinchin"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":250,"author":{"gitID":"marvinchin"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":261,"author":{"gitID":"marvinchin"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":262,"author":{"gitID":"marvinchin"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":263,"author":{"gitID":"marvinchin"},"content":"        assertTrue(parser.parseCommand(\"r 1\") instanceof RedoCommand);"},{"lineNumber":264,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":273,"author":{"gitID":"marvinchin"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":274,"author":{"gitID":"marvinchin"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":275,"author":{"gitID":"marvinchin"},"content":"        assertTrue(parser.parseCommand(\"u 3\") instanceof UndoCommand);"},{"lineNumber":276,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":278,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":279,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":280,"author":{"gitID":"KeithSOC"},"content":"    public void parseCommand_unFavorite() throws Exception {"},{"lineNumber":281,"author":{"gitID":"KeithSOC"},"content":"        UnFavoriteCommand command \u003d (UnFavoriteCommand) parser.parseCommand("},{"lineNumber":282,"author":{"gitID":"KeithSOC"},"content":"                UnFavoriteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":283,"author":{"gitID":"KeithSOC"},"content":"        assertEquals(new UnFavoriteCommand(Arrays.asList(INDEX_FIRST_PERSON)), command);"},{"lineNumber":284,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":286,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":287,"author":{"gitID":"KeithSOC"},"content":"    public void parseCommand_unFavorite_multi() throws Exception {"},{"lineNumber":288,"author":{"gitID":"KeithSOC"},"content":"        UnFavoriteCommand command \u003d (UnFavoriteCommand) parser.parseCommand("},{"lineNumber":289,"author":{"gitID":"KeithSOC"},"content":"                UnFavoriteCommand.COMMAND_WORD + \" \""},{"lineNumber":290,"author":{"gitID":"KeithSOC"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":291,"author":{"gitID":"KeithSOC"},"content":"                        + INDEX_SECOND_PERSON.getOneBased());"},{"lineNumber":292,"author":{"gitID":"KeithSOC"},"content":"        assertEquals(new UnFavoriteCommand(Arrays.asList(INDEX_SECOND_PERSON, INDEX_FIRST_PERSON)), command);"},{"lineNumber":293,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":295,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":40,"marvinchin":61,"KeithSOC":49,"-":159}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.FindByNameCommand;"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.FindByTagsCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.TagsContainKeywordsPredicate;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":" * Containts unit tests for the FindCommand"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"    public void parse_moreThanOneOption_throwsParseException() {"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"-tag -fav\";"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, input, FindCommandParser.INVALID_FIND_COMMAND_FORMAT_MESSAGE);"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"    public void parse_invalidOption_throwsParseException() {"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"-someinvalidoption123\";"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, input, FindCommandParser.INVALID_FIND_COMMAND_FORMAT_MESSAGE);"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"    public void parse_tagOptionNoArgs_throwsParseException() {"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"-tag     \";"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, input, FindCommandParser.INVALID_FIND_COMMAND_FORMAT_MESSAGE);"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"    public void parse_tagOptionValidArgs_returnsFindCommand() {"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"                new FindByTagsCommand(new TagsContainKeywordsPredicate(Arrays.asList(\"colleagues\", \"friends\")));"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"        assertParseSuccess(parser, \"-tag colleagues friends\", expectedFindCommand);"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"        assertParseSuccess(parser, \"-tag   \\n colleagues \\t friends \\n\", expectedFindCommand);"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"    \";"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, input, FindCommandParser.INVALID_FIND_COMMAND_FORMAT_MESSAGE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"                new FindByNameCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":40,"-":31}},{"path":"src/test/java/seedu/address/logic/parser/FavoriteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"KeithSOC"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.FavoriteCommand;"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":" * outside of the FavoriteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":" * same path through the FavoriteCommand, and therefore we test only one of them."},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"public class FavoriteCommandParserTest {"},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"    private FavoriteCommandParser parser \u003d new FavoriteCommandParser();"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"    public void parse_validArgs_returnsFavoriteCommand() {"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"        assertParseSuccess(parser, \"1\", new FavoriteCommand(Arrays.asList(INDEX_FIRST_PERSON)));"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, \"a\","},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavoriteCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"KeithSOC":30,"-":7}},{"path":"src/test/java/systemtests/FavoriteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.FavoriteCommand.MESSAGE_FAVORITE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIFTH_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH_PERSON;"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_KUNZ;"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.FavoriteCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"public class FavoriteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"    private static final String MESSAGE_INVALID_FAVORITE_COMMAND_FORMAT \u003d"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FavoriteCommand.MESSAGE_USAGE);"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"    public void favorite() {"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"        /* -------------- Performing favorite operation while an unfiltered list is being shown ----------------- */"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"        /*"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"         * Case: favorites the 3rd, 4th \u0026 5th person in the list,"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"         * command with leading spaces and trailing spaces -\u003e favorited"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"         */"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"        String command \u003d \"     \" + FavoriteCommand.COMMAND_WORD + \"      \" + INDEX_THIRD_PERSON.getOneBased()"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"                + \"       \" + INDEX_FOURTH_PERSON.getOneBased() + \"        \" + INDEX_FIFTH_PERSON.getOneBased();"},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"        List\u003cIndex\u003e indexList \u003d Arrays.asList(INDEX_THIRD_PERSON, INDEX_FOURTH_PERSON, INDEX_FIFTH_PERSON);"},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"        StringBuilder names \u003d new StringBuilder();"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"        for (Index index : indexList) {"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"            ReadOnlyPerson favoritedPerson \u003d favoritePerson(expectedModel, index);"},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"            names.append(\"\\n\\t★ \").append(favoritedPerson.getName().toString());"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"        String expectedResultMessage \u003d MESSAGE_FAVORITE_PERSON_SUCCESS + names;"},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":"        /* Case: undo favoriting the 3rd, 4th \u0026 5th person in the list -\u003e 3rd, 4th \u0026 5th person unfavorited */"},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":59,"author":{"gitID":"KeithSOC"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":"        /* Case: redo favoriting the 3rd, 4th \u0026 5th person in the list -\u003e 3rd, 4th \u0026 5th person favorited again */"},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"        for (Index index : indexList) {"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":"            favoritePerson(expectedModel, index);"},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"KeithSOC"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":69,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":70,"author":{"gitID":"KeithSOC"},"content":"        /* ---------------- Performing favorite operation while a filtered list is being shown ------------------- */"},{"lineNumber":71,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":72,"author":{"gitID":"KeithSOC"},"content":"        /* Case: filtered person list, favorite index within bounds of address book and person list -\u003e favorited */"},{"lineNumber":73,"author":{"gitID":"KeithSOC"},"content":"        showPersonsWithName(KEYWORD_MATCHING_KUNZ);"},{"lineNumber":74,"author":{"gitID":"KeithSOC"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":77,"author":{"gitID":"KeithSOC"},"content":"        command \u003d FavoriteCommand.COMMAND_WORD + \" \" + index.getOneBased();"},{"lineNumber":78,"author":{"gitID":"KeithSOC"},"content":"        ReadOnlyPerson favoritedPerson \u003d favoritePerson(expectedModel, index);"},{"lineNumber":79,"author":{"gitID":"KeithSOC"},"content":"        expectedResultMessage \u003d MESSAGE_FAVORITE_PERSON_SUCCESS + \"\\n\\t★ \" + favoritedPerson.getName().toString();"},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":"        /*"},{"lineNumber":83,"author":{"gitID":"KeithSOC"},"content":"         * Case: filtered person list, favorite index within bounds of address book but out of bounds of person list"},{"lineNumber":84,"author":{"gitID":"KeithSOC"},"content":"         * -\u003e rejected"},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":"         */"},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":"        showPersonsWithName(KEYWORD_MATCHING_KUNZ);"},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":88,"author":{"gitID":"KeithSOC"},"content":"        command \u003d FavoriteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":90,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"        /* ------------------- Performing favorite operation while a person card is selected ---------------------- */"},{"lineNumber":92,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":93,"author":{"gitID":"KeithSOC"},"content":"        /* Case: favorite the selected person -\u003e person list panel selects the person before the favoriting */"},{"lineNumber":94,"author":{"gitID":"KeithSOC"},"content":"        showAllPersons();"},{"lineNumber":95,"author":{"gitID":"KeithSOC"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":96,"author":{"gitID":"KeithSOC"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":97,"author":{"gitID":"KeithSOC"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"KeithSOC"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":99,"author":{"gitID":"KeithSOC"},"content":"        command \u003d FavoriteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":100,"author":{"gitID":"KeithSOC"},"content":"        favoritedPerson \u003d favoritePerson(expectedModel, selectedIndex);"},{"lineNumber":101,"author":{"gitID":"KeithSOC"},"content":"        expectedResultMessage \u003d MESSAGE_FAVORITE_PERSON_SUCCESS + \"\\n\\t★ \" + favoritedPerson.getName().toString();"},{"lineNumber":102,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":103,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":104,"author":{"gitID":"KeithSOC"},"content":"        /* ------------------------------- Performing invalid favorite operation ---------------------------------- */"},{"lineNumber":105,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":106,"author":{"gitID":"KeithSOC"},"content":"        /* Case: multiple invalid indexes (0 0 0) -\u003e rejected */"},{"lineNumber":107,"author":{"gitID":"KeithSOC"},"content":"        command \u003d FavoriteCommand.COMMAND_WORD + \" 0 0 0\";"},{"lineNumber":108,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_FAVORITE_COMMAND_FORMAT);"},{"lineNumber":109,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":110,"author":{"gitID":"KeithSOC"},"content":"        /* Case: multiple indexes with only one valid (1 0 -1 -2 -3) -\u003e rejected */"},{"lineNumber":111,"author":{"gitID":"KeithSOC"},"content":"        command \u003d FavoriteCommand.COMMAND_WORD + \" 1 0 -1 -2 -3\";"},{"lineNumber":112,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_FAVORITE_COMMAND_FORMAT);"},{"lineNumber":113,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":114,"author":{"gitID":"KeithSOC"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":115,"author":{"gitID":"KeithSOC"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":116,"author":{"gitID":"KeithSOC"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":117,"author":{"gitID":"KeithSOC"},"content":"        command \u003d FavoriteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":118,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":119,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":120,"author":{"gitID":"KeithSOC"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":121,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(FavoriteCommand.COMMAND_WORD + \" 1 2 a\", MESSAGE_INVALID_FAVORITE_COMMAND_FORMAT);"},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":123,"author":{"gitID":"KeithSOC"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":124,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(\"FaV 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":125,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":127,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"KeithSOC"},"content":"     * Favorites the {@code ReadOnlyPerson} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":129,"author":{"gitID":"KeithSOC"},"content":"     * @return the favorited person"},{"lineNumber":130,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"KeithSOC"},"content":"    private ReadOnlyPerson favoritePerson(Model model, Index index) {"},{"lineNumber":132,"author":{"gitID":"KeithSOC"},"content":"        ReadOnlyPerson targetPerson \u003d model.getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":133,"author":{"gitID":"KeithSOC"},"content":"        try {"},{"lineNumber":134,"author":{"gitID":"KeithSOC"},"content":"            model.toggleFavoritePerson(targetPerson, FavoriteCommand.COMMAND_WORD);"},{"lineNumber":135,"author":{"gitID":"KeithSOC"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":136,"author":{"gitID":"KeithSOC"},"content":"            throw new AssertionError(EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":137,"author":{"gitID":"KeithSOC"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":138,"author":{"gitID":"KeithSOC"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":139,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"KeithSOC"},"content":"        return targetPerson;"},{"lineNumber":141,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":143,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"KeithSOC"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"KeithSOC"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"KeithSOC"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"KeithSOC"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"KeithSOC"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"KeithSOC"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"KeithSOC"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"KeithSOC"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":152,"author":{"gitID":"KeithSOC"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":153,"author":{"gitID":"KeithSOC"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"KeithSOC"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":157,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":159,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"KeithSOC"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the"},{"lineNumber":161,"author":{"gitID":"KeithSOC"},"content":"     * browser url and selected card are expected to update accordingly depending on the card"},{"lineNumber":162,"author":{"gitID":"KeithSOC"},"content":"     * at {@code expectedSelectedCardIndex}."},{"lineNumber":163,"author":{"gitID":"KeithSOC"},"content":"     * @see FavoriteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":164,"author":{"gitID":"KeithSOC"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":165,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"KeithSOC"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":167,"author":{"gitID":"KeithSOC"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":168,"author":{"gitID":"KeithSOC"},"content":"        executeCommand(command);"},{"lineNumber":169,"author":{"gitID":"KeithSOC"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":170,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":171,"author":{"gitID":"KeithSOC"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":172,"author":{"gitID":"KeithSOC"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":173,"author":{"gitID":"KeithSOC"},"content":"        } else {"},{"lineNumber":174,"author":{"gitID":"KeithSOC"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":175,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":177,"author":{"gitID":"KeithSOC"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":178,"author":{"gitID":"KeithSOC"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":179,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":181,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"KeithSOC"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"KeithSOC"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"KeithSOC"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"KeithSOC"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"KeithSOC"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"KeithSOC"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"KeithSOC"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":189,"author":{"gitID":"KeithSOC"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"KeithSOC"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":191,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"KeithSOC"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":193,"author":{"gitID":"KeithSOC"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":194,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":195,"author":{"gitID":"KeithSOC"},"content":"        executeCommand(command);"},{"lineNumber":196,"author":{"gitID":"KeithSOC"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":197,"author":{"gitID":"KeithSOC"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":198,"author":{"gitID":"KeithSOC"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":199,"author":{"gitID":"KeithSOC"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":200,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":202,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"KeithSOC":183,"-":19}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.SocialInfo;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"    private static final String INVALID_SOCIAL_INFO \u003d \"someinvalidsocialmedia123 helloworld\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"    private static final String VALID_SOCIAL_INFO_1 \u003d SocialInfoMapping.FACEBOOK_IDENTIFIER + \" helloworld\";"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"    private static final String VALID_SOCIAL_INFO_2 \u003d SocialInfoMapping.INSTAGRAM_IDENTIFIER + \" goodbye\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":"    public void parseMultiIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":67,"author":{"gitID":"KeithSOC"},"content":"        ParserUtil.parseMultipleIndexes(\"1 2 3 a\"); // Two trailing spaces in front"},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":70,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":81,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":"    public void parseMultiIndex_validInput_success() throws Exception {"},{"lineNumber":83,"author":{"gitID":"KeithSOC"},"content":"        List\u003cIndex\u003e expectedIndexList \u003d Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON, INDEX_THIRD_PERSON);"},{"lineNumber":84,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":"        // No whitespaces"},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":"        assertEquals(expectedIndexList, ParserUtil.parseMultipleIndexes(\"1 2 3\"));"},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":88,"author":{"gitID":"KeithSOC"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":"        assertEquals(expectedIndexList, ParserUtil.parseMultipleIndexes(\" 1  2   3    \"));"},{"lineNumber":90,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":92,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        ParserUtil.parseName(null);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parseName_validValue_returnsName() throws Exception {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Optional\u003cName\u003e actualName \u003d ParserUtil.parseName(Optional.of(VALID_NAME));"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, actualName.get());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        ParserUtil.parsePhone(null);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        ParserUtil.parsePhone(Optional.of(INVALID_PHONE));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void parsePhone_validValue_returnsPhone() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Optional\u003cPhone\u003e actualPhone \u003d ParserUtil.parsePhone(Optional.of(VALID_PHONE));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, actualPhone.get());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() throws Exception {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ParserUtil.parseAddress(null);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public void parseAddress_validValue_returnsAddress() throws Exception {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        Optional\u003cAddress\u003e actualAddress \u003d ParserUtil.parseAddress(Optional.of(VALID_ADDRESS));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, actualAddress.get());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        ParserUtil.parseEmail(null);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        ParserUtil.parseEmail(Optional.of(INVALID_EMAIL));"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public void parseEmail_validValue_returnsEmail() throws Exception {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        Optional\u003cEmail\u003e actualEmail \u003d ParserUtil.parseEmail(Optional.of(VALID_EMAIL));"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, actualEmail.get());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":206,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"marvinchin"},"content":"    public void parseWhitespaceSeparatedStrings_null_throwsNullPointerException() throws Exception {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":209,"author":{"gitID":"marvinchin"},"content":"        ParserUtil.parseWhitespaceSeparatedStrings(null);"},{"lineNumber":210,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":212,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"marvinchin"},"content":"    public void parseWhitespaceSeparatedStrings_validArgs_returnsWhitespaceSeparatedStrings() {"},{"lineNumber":214,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"hello  \\t\\n world goodbye\";"},{"lineNumber":215,"author":{"gitID":"marvinchin"},"content":"        List\u003cString\u003e actualStrings \u003d ParserUtil.parseWhitespaceSeparatedStrings(input);"},{"lineNumber":216,"author":{"gitID":"marvinchin"},"content":"        List\u003cString\u003e expectedStrings \u003d Arrays.asList(\"hello\", \"world\", \"goodbye\");"},{"lineNumber":217,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":218,"author":{"gitID":"marvinchin"},"content":"        assertEquals(expectedStrings, actualStrings);"},{"lineNumber":219,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":221,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":222,"author":{"gitID":"marvinchin"},"content":"    public void parseSocialInfos_null_throwsNullPointerException() throws Exception {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":224,"author":{"gitID":"marvinchin"},"content":"        ParserUtil.parseSocialInfos(null);"},{"lineNumber":225,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":227,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"marvinchin"},"content":"    public void parseSocialInfos_validSocialInfos_returnsSocialInfoSet() throws Exception {"},{"lineNumber":229,"author":{"gitID":"marvinchin"},"content":"        List\u003cString\u003e rawSocialInfos \u003d Arrays.asList(VALID_SOCIAL_INFO_1, VALID_SOCIAL_INFO_2);"},{"lineNumber":230,"author":{"gitID":"marvinchin"},"content":"        SocialInfo socialInfoOne \u003d SocialInfoMapping.parseSocialInfo(VALID_SOCIAL_INFO_1);"},{"lineNumber":231,"author":{"gitID":"marvinchin"},"content":"        SocialInfo socialInfoTwo \u003d SocialInfoMapping.parseSocialInfo(VALID_SOCIAL_INFO_2);"},{"lineNumber":232,"author":{"gitID":"marvinchin"},"content":"        HashSet\u003cSocialInfo\u003e expectedSocialInfos \u003d new HashSet\u003c\u003e(Arrays.asList(socialInfoOne, socialInfoTwo));"},{"lineNumber":233,"author":{"gitID":"marvinchin"},"content":"        Set\u003cSocialInfo\u003e actualSocialInfos \u003d ParserUtil.parseSocialInfos(rawSocialInfos);"},{"lineNumber":234,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":235,"author":{"gitID":"marvinchin"},"content":"        assertEquals(expectedSocialInfos, actualSocialInfos);"},{"lineNumber":236,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":238,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":239,"author":{"gitID":"marvinchin"},"content":"    public void parseSocialInfos_invalidSocialInfos_throwsIllegalValueException() throws Exception {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":241,"author":{"gitID":"marvinchin"},"content":"        List\u003cString\u003e rawSocialInfos \u003d Arrays.asList(VALID_SOCIAL_INFO_1, INVALID_SOCIAL_INFO);"},{"lineNumber":242,"author":{"gitID":"marvinchin"},"content":"        ParserUtil.parseSocialInfos(rawSocialInfos);"},{"lineNumber":243,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":40,"KeithSOC":25,"-":179}},{"path":"src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":" * Contains unit tests for {@code ExportCommandParser}."},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"public class ExportCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"    private ExportCommandParser parser \u003d new ExportCommandParser();"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"    public void parse_validArgs_returnsExportCommand() {"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"        String args \u003d \" some/path/somewhere  \";"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"        assertParseSuccess(parser, args, new ExportCommand(\"some/path/somewhere\"));"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"        String args \u003d \"\";"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, args, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":25,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"KeithSOC"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.DeleteByIndexCommand;"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.DeleteByTagCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"    public void parse_moreThanOneOption_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"-tag -hello\";"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, input, DeleteCommandParser.INVALID_DELETE_COMMAND_FORMAT_MESSAGE);"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    public void parse_invalidOption_throwsParseException() {"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"-someinvalidoption123\";"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, input, DeleteCommandParser.INVALID_DELETE_COMMAND_FORMAT_MESSAGE);"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    public void parse_tagOptionNoArgs_throwsParseException() {"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"-tag    \";"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, input, DeleteCommandParser.INVALID_DELETE_COMMAND_FORMAT_MESSAGE);"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"    public void parse_validTagArgs_returnsDeleteCommand() {"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        HashSet\u003cString\u003e keys \u003d new HashSet\u003c\u003e(Arrays.asList(\"friends\", \"colleagues\"));"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        DeleteCommand expectedDeleteCommand \u003d new DeleteByTagCommand(keys);"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"-tag colleagues friends\";"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"        String inputWithWhitespace \u003d \"-tag   \\t friends \\t\\t\\n colleagues\";"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        assertParseSuccess(parser, input, expectedDeleteCommand);"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"        assertParseSuccess(parser, inputWithWhitespace, expectedDeleteCommand);"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"    public void parse_noOptionValidArgs_returnsDeleteCommand() {"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"1\";"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"        assertParseSuccess(parser, input, new DeleteByIndexCommand(Arrays.asList(INDEX_FIRST_PERSON)));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"    public void parse_noOptionInvalidArgs_throwsParseException() {"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"        String input \u003d \"a\";"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"        assertParseFailure(parser, input, DeleteCommandParser.INVALID_DELETE_COMMAND_FORMAT_MESSAGE);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":39,"KeithSOC":2,"-":27}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FAVORITE_DESC_YES;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_FAV_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FAVORITE_YES;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"        Person expectedPerson \u003d new PersonBuilder()"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"                .withName(VALID_NAME_BOB)"},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"                .withPhone(VALID_PHONE_BOB)"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"                .withEmail(VALID_EMAIL_BOB)"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"                .withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"                .withFavorite(VALID_FAVORITE_YES)"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"                .withTags(VALID_TAG_FRIEND)"},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":"                .build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD"},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_AMY"},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_BOB"},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"                        + PHONE_DESC_BOB"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"                        + EMAIL_DESC_BOB"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":"                        + ADDRESS_DESC_BOB"},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"                        + FAVORITE_DESC_YES"},{"lineNumber":67,"author":{"gitID":"KeithSOC"},"content":"                        + TAG_DESC_FRIEND,"},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"sarahnzx"},"content":"        Person expectedMultiplePhonePerson \u003d new PersonBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":71,"author":{"gitID":"sarahnzx"},"content":"                .withPhone(VALID_PHONE_AMY + \"\\n\" + VALID_PHONE_BOB)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"sarahnzx"},"content":"        // multiple phones - all phones accepted"},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD"},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_BOB"},{"lineNumber":77,"author":{"gitID":"KeithSOC"},"content":"                        + PHONE_DESC_AMY"},{"lineNumber":78,"author":{"gitID":"KeithSOC"},"content":"                        + PHONE_DESC_BOB"},{"lineNumber":79,"author":{"gitID":"KeithSOC"},"content":"                        + EMAIL_DESC_BOB"},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":"                        + ADDRESS_DESC_BOB"},{"lineNumber":81,"author":{"gitID":"KeithSOC"},"content":"                        + FAVORITE_DESC_YES"},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":"                        + TAG_DESC_FRIEND,"},{"lineNumber":83,"author":{"gitID":"sarahnzx"},"content":"                new AddCommand(expectedMultiplePhonePerson));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD"},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_BOB"},{"lineNumber":88,"author":{"gitID":"KeithSOC"},"content":"                        + PHONE_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":"                        + EMAIL_DESC_AMY"},{"lineNumber":90,"author":{"gitID":"KeithSOC"},"content":"                        + EMAIL_DESC_BOB"},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"                        + ADDRESS_DESC_BOB"},{"lineNumber":92,"author":{"gitID":"KeithSOC"},"content":"                        + FAVORITE_DESC_YES"},{"lineNumber":93,"author":{"gitID":"KeithSOC"},"content":"                        + TAG_DESC_FRIEND,"},{"lineNumber":94,"author":{"gitID":"KeithSOC"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":97,"author":{"gitID":"KeithSOC"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD"},{"lineNumber":98,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_BOB"},{"lineNumber":99,"author":{"gitID":"KeithSOC"},"content":"                        + PHONE_DESC_BOB"},{"lineNumber":100,"author":{"gitID":"KeithSOC"},"content":"                        + EMAIL_DESC_BOB"},{"lineNumber":101,"author":{"gitID":"KeithSOC"},"content":"                        + ADDRESS_DESC_AMY"},{"lineNumber":102,"author":{"gitID":"KeithSOC"},"content":"                        + ADDRESS_DESC_BOB"},{"lineNumber":103,"author":{"gitID":"KeithSOC"},"content":"                        + FAVORITE_DESC_YES"},{"lineNumber":104,"author":{"gitID":"KeithSOC"},"content":"                        + TAG_DESC_FRIEND,"},{"lineNumber":105,"author":{"gitID":"KeithSOC"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":106,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":107,"author":{"gitID":"KeithSOC"},"content":"        // multiple similar favorite statuses accepted"},{"lineNumber":108,"author":{"gitID":"KeithSOC"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD"},{"lineNumber":109,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_BOB"},{"lineNumber":110,"author":{"gitID":"KeithSOC"},"content":"                        + PHONE_DESC_BOB"},{"lineNumber":111,"author":{"gitID":"KeithSOC"},"content":"                        + EMAIL_DESC_BOB"},{"lineNumber":112,"author":{"gitID":"KeithSOC"},"content":"                        + ADDRESS_DESC_BOB"},{"lineNumber":113,"author":{"gitID":"KeithSOC"},"content":"                        + FAVORITE_DESC_YES"},{"lineNumber":114,"author":{"gitID":"KeithSOC"},"content":"                        + FAVORITE_DESC_YES"},{"lineNumber":115,"author":{"gitID":"KeithSOC"},"content":"                        + TAG_DESC_FRIEND,"},{"lineNumber":116,"author":{"gitID":"KeithSOC"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":119,"author":{"gitID":"KeithSOC"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder()"},{"lineNumber":120,"author":{"gitID":"KeithSOC"},"content":"                .withName(VALID_NAME_BOB)"},{"lineNumber":121,"author":{"gitID":"KeithSOC"},"content":"                .withPhone(VALID_PHONE_BOB)"},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":"                .withEmail(VALID_EMAIL_BOB)"},{"lineNumber":123,"author":{"gitID":"KeithSOC"},"content":"                .withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":124,"author":{"gitID":"KeithSOC"},"content":"                .withFavorite(VALID_FAVORITE_YES)"},{"lineNumber":125,"author":{"gitID":"KeithSOC"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":126,"author":{"gitID":"KeithSOC"},"content":"                .build();"},{"lineNumber":127,"author":{"gitID":"KeithSOC"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD"},{"lineNumber":128,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_BOB"},{"lineNumber":129,"author":{"gitID":"KeithSOC"},"content":"                        + PHONE_DESC_BOB"},{"lineNumber":130,"author":{"gitID":"KeithSOC"},"content":"                        + EMAIL_DESC_BOB"},{"lineNumber":131,"author":{"gitID":"KeithSOC"},"content":"                        + ADDRESS_DESC_BOB"},{"lineNumber":132,"author":{"gitID":"KeithSOC"},"content":"                        + FAVORITE_DESC_YES"},{"lineNumber":133,"author":{"gitID":"KeithSOC"},"content":"                        + TAG_DESC_HUSBAND"},{"lineNumber":134,"author":{"gitID":"KeithSOC"},"content":"                        + TAG_DESC_FRIEND,"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":140,"author":{"gitID":"KeithSOC"},"content":"        // zero tags and no favorite status specified"},{"lineNumber":141,"author":{"gitID":"KeithSOC"},"content":"        Person expectedPerson \u003d new PersonBuilder()"},{"lineNumber":142,"author":{"gitID":"KeithSOC"},"content":"                .withName(VALID_NAME_AMY)"},{"lineNumber":143,"author":{"gitID":"KeithSOC"},"content":"                .withPhone(VALID_PHONE_AMY)"},{"lineNumber":144,"author":{"gitID":"KeithSOC"},"content":"                .withEmail(VALID_EMAIL_AMY)"},{"lineNumber":145,"author":{"gitID":"KeithSOC"},"content":"                .withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":146,"author":{"gitID":"KeithSOC"},"content":"                .withTags()"},{"lineNumber":147,"author":{"gitID":"KeithSOC"},"content":"                .build();"},{"lineNumber":148,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":149,"author":{"gitID":"KeithSOC"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD"},{"lineNumber":150,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_AMY"},{"lineNumber":151,"author":{"gitID":"KeithSOC"},"content":"                        + PHONE_DESC_AMY"},{"lineNumber":152,"author":{"gitID":"KeithSOC"},"content":"                        + EMAIL_DESC_AMY"},{"lineNumber":153,"author":{"gitID":"KeithSOC"},"content":"                        + ADDRESS_DESC_AMY,"},{"lineNumber":154,"author":{"gitID":"KeithSOC"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":162,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD"},{"lineNumber":163,"author":{"gitID":"KeithSOC"},"content":"                        + VALID_NAME_BOB"},{"lineNumber":164,"author":{"gitID":"KeithSOC"},"content":"                        + PHONE_DESC_BOB"},{"lineNumber":165,"author":{"gitID":"KeithSOC"},"content":"                        + EMAIL_DESC_BOB"},{"lineNumber":166,"author":{"gitID":"KeithSOC"},"content":"                        + ADDRESS_DESC_BOB,"},{"lineNumber":167,"author":{"gitID":"KeithSOC"},"content":"                expectedMessage);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":170,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD"},{"lineNumber":171,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_BOB"},{"lineNumber":172,"author":{"gitID":"KeithSOC"},"content":"                        + VALID_PHONE_BOB"},{"lineNumber":173,"author":{"gitID":"KeithSOC"},"content":"                        + EMAIL_DESC_BOB"},{"lineNumber":174,"author":{"gitID":"KeithSOC"},"content":"                        + ADDRESS_DESC_BOB,"},{"lineNumber":175,"author":{"gitID":"KeithSOC"},"content":"                expectedMessage);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":178,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD"},{"lineNumber":179,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_BOB"},{"lineNumber":180,"author":{"gitID":"KeithSOC"},"content":"                        + PHONE_DESC_BOB"},{"lineNumber":181,"author":{"gitID":"KeithSOC"},"content":"                        + VALID_EMAIL_BOB"},{"lineNumber":182,"author":{"gitID":"KeithSOC"},"content":"                        + ADDRESS_DESC_BOB,"},{"lineNumber":183,"author":{"gitID":"KeithSOC"},"content":"                expectedMessage);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":186,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD"},{"lineNumber":187,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_BOB"},{"lineNumber":188,"author":{"gitID":"KeithSOC"},"content":"                        + PHONE_DESC_BOB"},{"lineNumber":189,"author":{"gitID":"KeithSOC"},"content":"                        + EMAIL_DESC_BOB"},{"lineNumber":190,"author":{"gitID":"KeithSOC"},"content":"                        + VALID_ADDRESS_BOB,"},{"lineNumber":191,"author":{"gitID":"KeithSOC"},"content":"                expectedMessage);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":194,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD"},{"lineNumber":195,"author":{"gitID":"KeithSOC"},"content":"                        + VALID_NAME_BOB"},{"lineNumber":196,"author":{"gitID":"KeithSOC"},"content":"                        + VALID_PHONE_BOB"},{"lineNumber":197,"author":{"gitID":"KeithSOC"},"content":"                        + VALID_EMAIL_BOB"},{"lineNumber":198,"author":{"gitID":"KeithSOC"},"content":"                        + VALID_ADDRESS_BOB,"},{"lineNumber":199,"author":{"gitID":"KeithSOC"},"content":"                expectedMessage);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":205,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD"},{"lineNumber":206,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_BOB"},{"lineNumber":207,"author":{"gitID":"KeithSOC"},"content":"                        + INVALID_PHONE_DESC"},{"lineNumber":208,"author":{"gitID":"KeithSOC"},"content":"                        + EMAIL_DESC_BOB"},{"lineNumber":209,"author":{"gitID":"KeithSOC"},"content":"                        + ADDRESS_DESC_BOB"},{"lineNumber":210,"author":{"gitID":"KeithSOC"},"content":"                        + TAG_DESC_HUSBAND"},{"lineNumber":211,"author":{"gitID":"KeithSOC"},"content":"                        + TAG_DESC_FRIEND,"},{"lineNumber":212,"author":{"gitID":"KeithSOC"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":215,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD"},{"lineNumber":216,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_BOB"},{"lineNumber":217,"author":{"gitID":"KeithSOC"},"content":"                        + PHONE_DESC_BOB"},{"lineNumber":218,"author":{"gitID":"KeithSOC"},"content":"                        + INVALID_EMAIL_DESC"},{"lineNumber":219,"author":{"gitID":"KeithSOC"},"content":"                        + ADDRESS_DESC_BOB"},{"lineNumber":220,"author":{"gitID":"KeithSOC"},"content":"                        + TAG_DESC_HUSBAND"},{"lineNumber":221,"author":{"gitID":"KeithSOC"},"content":"                        + TAG_DESC_FRIEND,"},{"lineNumber":222,"author":{"gitID":"KeithSOC"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":225,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD"},{"lineNumber":226,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_BOB"},{"lineNumber":227,"author":{"gitID":"KeithSOC"},"content":"                        + PHONE_DESC_BOB"},{"lineNumber":228,"author":{"gitID":"KeithSOC"},"content":"                        + EMAIL_DESC_BOB"},{"lineNumber":229,"author":{"gitID":"KeithSOC"},"content":"                        + INVALID_ADDRESS_DESC"},{"lineNumber":230,"author":{"gitID":"KeithSOC"},"content":"                        + TAG_DESC_HUSBAND"},{"lineNumber":231,"author":{"gitID":"KeithSOC"},"content":"                        + TAG_DESC_FRIEND,"},{"lineNumber":232,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"KeithSOC"},"content":"        // invalid favorite"},{"lineNumber":235,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD"},{"lineNumber":236,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_BOB"},{"lineNumber":237,"author":{"gitID":"KeithSOC"},"content":"                        + PHONE_DESC_BOB"},{"lineNumber":238,"author":{"gitID":"KeithSOC"},"content":"                        + EMAIL_DESC_BOB"},{"lineNumber":239,"author":{"gitID":"KeithSOC"},"content":"                        + ADDRESS_DESC_BOB"},{"lineNumber":240,"author":{"gitID":"KeithSOC"},"content":"                        + INVALID_FAV_DESC"},{"lineNumber":241,"author":{"gitID":"KeithSOC"},"content":"                        + TAG_DESC_HUSBAND"},{"lineNumber":242,"author":{"gitID":"KeithSOC"},"content":"                        + TAG_DESC_HUSBAND,"},{"lineNumber":243,"author":{"gitID":"KeithSOC"},"content":"                Favorite.MESSAGE_FAVORITE_CONSTRAINTS);"},{"lineNumber":244,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":246,"author":{"gitID":"KeithSOC"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD"},{"lineNumber":247,"author":{"gitID":"KeithSOC"},"content":"                        + NAME_DESC_BOB"},{"lineNumber":248,"author":{"gitID":"KeithSOC"},"content":"                        + PHONE_DESC_BOB"},{"lineNumber":249,"author":{"gitID":"KeithSOC"},"content":"                        + EMAIL_DESC_BOB"},{"lineNumber":250,"author":{"gitID":"KeithSOC"},"content":"                        + ADDRESS_DESC_BOB"},{"lineNumber":251,"author":{"gitID":"KeithSOC"},"content":"                        + INVALID_TAG_DESC"},{"lineNumber":252,"author":{"gitID":"KeithSOC"},"content":"                        + VALID_TAG_FRIEND,"},{"lineNumber":253,"author":{"gitID":"KeithSOC"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahnzx":4,"KeithSOC":161,"-":90}},{"path":"src/test/java/systemtests/SortCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SOCIAL_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"import java.util.Comparator;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.FavoriteCommand;"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.SortByDefaultCommand;"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.SortByNameCommand;"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.SortByRecentCommand;"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.PersonDefaultComparator;"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.PersonNameComparator;"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.PersonRecentComparator;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":" * Contains system tests for {@code SortCommand}."},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"public class SortCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"    public void sort() throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"        /* ----------------- Performing sort operations while an unfiltered list is being shown ----------------- */"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"        /* Case: sort by name -\u003e all persons in the list sorted by name */"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"        String command \u003d SortCommand.COMMAND_WORD + \" -\" + SortByNameCommand.COMMAND_OPTION;"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"        String expectedResultMessage \u003d SortByNameCommand.MESSAGE_SORT_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        Comparator\u003cReadOnlyPerson\u003e expectedComparator \u003d new PersonNameComparator();"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        assertSortCommandSuccess(command, expectedResultMessage, expectedComparator);"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"        /* Case: add a person -\u003e persons in the list are still sorted by name */"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \""},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"                + NAME_DESC_AMY + \"  \""},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"                + PHONE_DESC_AMY + \" \""},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"                + EMAIL_DESC_AMY + \"   \""},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"                + ADDRESS_DESC_AMY + \"   \""},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"                + TAG_DESC_FRIEND + \" \""},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"                + SOCIAL_DESC_AMY + \" \";"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson toAdd \u003d AMY;"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"        assertAddCommandRetainsSortOrder(command, toAdd, expectedComparator);"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"        /* Case: sort by recent -\u003e all persons in the list sorted by last access time */"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"        command \u003d SortCommand.COMMAND_WORD + \" -\" + SortByRecentCommand.COMMAND_OPTION;"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"        expectedResultMessage \u003d SortByRecentCommand.MESSAGE_SORT_SUCCESS;"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"        expectedComparator \u003d new PersonRecentComparator();"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"        assertSortCommandSuccess(command, expectedResultMessage, expectedComparator);"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"        /* Case: select a person -\u003e persons in the list are still sorted by recent */"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"        Index editIndex \u003d Index.fromOneBased(3);"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + editIndex.getOneBased() + NAME_DESC_BOB;"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson editTarget \u003d getPersonAtIndex(editIndex);"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson editedPerson \u003d new PersonBuilder(editTarget).withName(VALID_NAME_BOB).build();"},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"        assertEditCommandRetainsSortOrder(command, editTarget, editedPerson, expectedComparator);"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"        /* Case: sort by default -\u003e all persons in the list sorted based on default ordering */"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"        command \u003d SortCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":"        expectedResultMessage \u003d SortByDefaultCommand.MESSAGE_SORT_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":"        expectedComparator \u003d new PersonDefaultComparator();"},{"lineNumber":79,"author":{"gitID":"marvinchin"},"content":"        assertSortCommandSuccess(command, expectedResultMessage, expectedComparator);"},{"lineNumber":80,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":81,"author":{"gitID":"marvinchin"},"content":"        /* Case: favorite a person -\u003e persons in the list are still sorted by default ordering */"},{"lineNumber":82,"author":{"gitID":"marvinchin"},"content":"        Index favIndex \u003d Index.fromOneBased(5);"},{"lineNumber":83,"author":{"gitID":"marvinchin"},"content":"        command \u003d FavoriteCommand.COMMAND_WORD + \" \" + favIndex.getOneBased();"},{"lineNumber":84,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson favTarget \u003d getPersonAtIndex(favIndex);"},{"lineNumber":85,"author":{"gitID":"marvinchin"},"content":"        assertFavoriteCommandRetainsSortOrder(command, favTarget, expectedComparator);"},{"lineNumber":86,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":87,"author":{"gitID":"marvinchin"},"content":"        /* ----------------- Performing sort operations while an filtered list is being shown ----------------- */"},{"lineNumber":88,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":89,"author":{"gitID":"marvinchin"},"content":"        showPersonsWithName(\"Meier\");"},{"lineNumber":90,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":91,"author":{"gitID":"marvinchin"},"content":"        /* Case: sort by name -\u003e all persons in the list sorted by name */"},{"lineNumber":92,"author":{"gitID":"marvinchin"},"content":"        command \u003d SortCommand.COMMAND_WORD + \" -\" + SortByNameCommand.COMMAND_OPTION;"},{"lineNumber":93,"author":{"gitID":"marvinchin"},"content":"        expectedResultMessage \u003d SortByNameCommand.MESSAGE_SORT_SUCCESS;"},{"lineNumber":94,"author":{"gitID":"marvinchin"},"content":"        expectedComparator \u003d new PersonNameComparator();"},{"lineNumber":95,"author":{"gitID":"marvinchin"},"content":"        assertSortCommandSuccess(command, expectedResultMessage, expectedComparator);"},{"lineNumber":96,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":97,"author":{"gitID":"marvinchin"},"content":"        /* Case: sort by recent -\u003e all persons in the list sorted by last access time */"},{"lineNumber":98,"author":{"gitID":"marvinchin"},"content":"        command \u003d SortCommand.COMMAND_WORD + \" -\" + SortByRecentCommand.COMMAND_OPTION;"},{"lineNumber":99,"author":{"gitID":"marvinchin"},"content":"        expectedResultMessage \u003d SortByRecentCommand.MESSAGE_SORT_SUCCESS;"},{"lineNumber":100,"author":{"gitID":"marvinchin"},"content":"        expectedComparator \u003d new PersonRecentComparator();"},{"lineNumber":101,"author":{"gitID":"marvinchin"},"content":"        assertSortCommandSuccess(command, expectedResultMessage, expectedComparator);"},{"lineNumber":102,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":103,"author":{"gitID":"marvinchin"},"content":"        /* Case: sort by default -\u003e all persons in the list sorted based on default ordering */"},{"lineNumber":104,"author":{"gitID":"marvinchin"},"content":"        command \u003d SortCommand.COMMAND_WORD;"},{"lineNumber":105,"author":{"gitID":"marvinchin"},"content":"        expectedResultMessage \u003d SortByDefaultCommand.MESSAGE_SORT_SUCCESS;"},{"lineNumber":106,"author":{"gitID":"marvinchin"},"content":"        expectedComparator \u003d new PersonDefaultComparator();"},{"lineNumber":107,"author":{"gitID":"marvinchin"},"content":"        assertSortCommandSuccess(command, expectedResultMessage, expectedComparator);"},{"lineNumber":108,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":109,"author":{"gitID":"marvinchin"},"content":"        /* ----------------- Performing invalid sort operations ----------------- */"},{"lineNumber":110,"author":{"gitID":"marvinchin"},"content":"        // sort command with args"},{"lineNumber":111,"author":{"gitID":"marvinchin"},"content":"        command \u003d SortCommand.COMMAND_WORD + \" hello world\";"},{"lineNumber":112,"author":{"gitID":"marvinchin"},"content":"        assertSortCommandFailure(command, expectedComparator);"},{"lineNumber":113,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":114,"author":{"gitID":"marvinchin"},"content":"        // sort command with invalid options"},{"lineNumber":115,"author":{"gitID":"marvinchin"},"content":"        command \u003d SortCommand.COMMAND_WORD + \" -somethinginvalid1234\";"},{"lineNumber":116,"author":{"gitID":"marvinchin"},"content":"        assertSortCommandFailure(command, expectedComparator);"},{"lineNumber":117,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":118,"author":{"gitID":"marvinchin"},"content":"        // sort command with multiple options"},{"lineNumber":119,"author":{"gitID":"marvinchin"},"content":"        command \u003d SortCommand.COMMAND_WORD + \" \""},{"lineNumber":120,"author":{"gitID":"marvinchin"},"content":"            + \"-\" + SortByRecentCommand.COMMAND_OPTION + \" \""},{"lineNumber":121,"author":{"gitID":"marvinchin"},"content":"            + \"-\" + SortByNameCommand.COMMAND_OPTION;"},{"lineNumber":122,"author":{"gitID":"marvinchin"},"content":"        assertSortCommandFailure(command, expectedComparator);"},{"lineNumber":123,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":125,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"marvinchin"},"content":"     * Utility method to get the {@code Person} at the given index in the model\u0027s filtered person list."},{"lineNumber":127,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"marvinchin"},"content":"    private ReadOnlyPerson getPersonAtIndex(Index index) {"},{"lineNumber":129,"author":{"gitID":"marvinchin"},"content":"        Model model \u003d getModel();"},{"lineNumber":130,"author":{"gitID":"marvinchin"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":131,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":133,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"marvinchin"},"content":"     * Verifies that the {@code AddCommand} succeeds and that the ordering of {@code Person}s"},{"lineNumber":135,"author":{"gitID":"marvinchin"},"content":"     * in the model\u0027s filtered person list set by the last {@code SortCommand} still holds true"},{"lineNumber":136,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"marvinchin"},"content":"    private void assertAddCommandRetainsSortOrder(String command, ReadOnlyPerson toAdd,"},{"lineNumber":138,"author":{"gitID":"marvinchin"},"content":"            Comparator\u003cReadOnlyPerson\u003e expectedComparator) throws DuplicatePersonException {"},{"lineNumber":139,"author":{"gitID":"marvinchin"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":140,"author":{"gitID":"marvinchin"},"content":"        expectedModel.addPerson(toAdd);"},{"lineNumber":141,"author":{"gitID":"marvinchin"},"content":"        // expect the persons in the model to be sorted based on the input comparator"},{"lineNumber":142,"author":{"gitID":"marvinchin"},"content":"        expectedModel.sortPersons(expectedComparator);"},{"lineNumber":143,"author":{"gitID":"marvinchin"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":144,"author":{"gitID":"marvinchin"},"content":"        assertCommandSuccessWithSyncStatusChanged(command, expectedModel, expectedResultMessage);"},{"lineNumber":145,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":147,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"marvinchin"},"content":"     * Verifies that the {@code EditCommand} succeeds and that the ordering of {@code Person}s"},{"lineNumber":149,"author":{"gitID":"marvinchin"},"content":"     * in the model\u0027s filtered person list set by the last {@code SortCommand} still holds true"},{"lineNumber":150,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"marvinchin"},"content":"    private void assertEditCommandRetainsSortOrder(String command, ReadOnlyPerson target, ReadOnlyPerson editedPerson,"},{"lineNumber":152,"author":{"gitID":"marvinchin"},"content":"            Comparator\u003cReadOnlyPerson\u003e expectedComparator) throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":153,"author":{"gitID":"marvinchin"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":154,"author":{"gitID":"marvinchin"},"content":"        expectedModel.updatePerson(target, editedPerson);"},{"lineNumber":155,"author":{"gitID":"marvinchin"},"content":"        // expect the persons in the model to be sorted based on the input comparator"},{"lineNumber":156,"author":{"gitID":"marvinchin"},"content":"        expectedModel.sortPersons(expectedComparator);"},{"lineNumber":157,"author":{"gitID":"marvinchin"},"content":"        String expectedResultMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":158,"author":{"gitID":"marvinchin"},"content":"        assertCommandSuccessWithSyncStatusChanged(command, expectedModel, expectedResultMessage);"},{"lineNumber":159,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":161,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"marvinchin"},"content":"     * Verifies that the {@code FavoriteCommand} succeeds and that the ordering of {@code Person}s"},{"lineNumber":163,"author":{"gitID":"marvinchin"},"content":"     * in the model\u0027s filtered person list set by the last {@code SortCommand} still holds true"},{"lineNumber":164,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"marvinchin"},"content":"    private void assertFavoriteCommandRetainsSortOrder(String command, ReadOnlyPerson toFav,"},{"lineNumber":166,"author":{"gitID":"marvinchin"},"content":"            Comparator\u003cReadOnlyPerson\u003e expectedComparator) throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":167,"author":{"gitID":"marvinchin"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":168,"author":{"gitID":"marvinchin"},"content":"        expectedModel.toggleFavoritePerson(toFav, FavoriteCommand.COMMAND_WORD);"},{"lineNumber":169,"author":{"gitID":"marvinchin"},"content":"        // expect the persons in the model to be sorted based on the input comparator"},{"lineNumber":170,"author":{"gitID":"marvinchin"},"content":"        expectedModel.sortPersons(expectedComparator);"},{"lineNumber":171,"author":{"gitID":"marvinchin"},"content":"        System.out.println(toFav.getName());"},{"lineNumber":172,"author":{"gitID":"marvinchin"},"content":"        String favoritePersonMessage \u003d \"\\n\\t★ \" + toFav.getName().toString();"},{"lineNumber":173,"author":{"gitID":"marvinchin"},"content":"        System.out.println(favoritePersonMessage);"},{"lineNumber":174,"author":{"gitID":"marvinchin"},"content":"        String expectedResultMessage \u003d FavoriteCommand.MESSAGE_FAVORITE_PERSON_SUCCESS + favoritePersonMessage;"},{"lineNumber":175,"author":{"gitID":"marvinchin"},"content":"        assertCommandSuccessWithSyncStatusChanged(command, expectedModel, expectedResultMessage);"},{"lineNumber":176,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":178,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"marvinchin"},"content":"     * Verifies that the {@code SortCommand} succeeds and that the ordering of {@code Person}s"},{"lineNumber":180,"author":{"gitID":"marvinchin"},"content":"     * in the model\u0027s filtered person list is correctly set."},{"lineNumber":181,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"marvinchin"},"content":"    private void assertSortCommandSuccess(String command, String expectedResultMessage,"},{"lineNumber":183,"author":{"gitID":"marvinchin"},"content":"            Comparator\u003cReadOnlyPerson\u003e expectedComparator) {"},{"lineNumber":184,"author":{"gitID":"marvinchin"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":185,"author":{"gitID":"marvinchin"},"content":"        expectedModel.sortPersons(expectedComparator);"},{"lineNumber":186,"author":{"gitID":"marvinchin"},"content":"        assertCommandSuccessWithStatusBarUnchanged(command, expectedModel, expectedResultMessage);"},{"lineNumber":187,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":189,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"marvinchin"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"marvinchin"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"marvinchin"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"marvinchin"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"marvinchin"},"content":"     * 4. Asserts that no card is selected.\u003cbr\u003e"},{"lineNumber":195,"author":{"gitID":"marvinchin"},"content":"     * 5. Asserts that the status bar\u0027s sync status does not change.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"marvinchin"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":197,"author":{"gitID":"marvinchin"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":198,"author":{"gitID":"marvinchin"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"marvinchin"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":200,"author":{"gitID":"marvinchin"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":201,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"marvinchin"},"content":"    private void assertCommandSuccessWithStatusBarUnchanged(String command, Model expectedModel,"},{"lineNumber":203,"author":{"gitID":"marvinchin"},"content":"            String expectedResultMessage) {"},{"lineNumber":204,"author":{"gitID":"marvinchin"},"content":"        executeCommand(command);"},{"lineNumber":205,"author":{"gitID":"marvinchin"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":206,"author":{"gitID":"marvinchin"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":207,"author":{"gitID":"marvinchin"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":208,"author":{"gitID":"marvinchin"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":209,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":211,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"marvinchin"},"content":"     * Performs the same verification as {@code assertCommandSuccessWithStatusBarUnchanged(String, Model, String)}"},{"lineNumber":213,"author":{"gitID":"marvinchin"},"content":"     * except that the sync status in the status bar changes."},{"lineNumber":214,"author":{"gitID":"marvinchin"},"content":"     * @see SortCommandSystemTest#assertCommandSuccessWithStatusBarUnchanged(String, Model, String)"},{"lineNumber":215,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"marvinchin"},"content":"    private void assertCommandSuccessWithSyncStatusChanged(String command, Model expectedModel,"},{"lineNumber":217,"author":{"gitID":"marvinchin"},"content":"            String expectedResultMessage) {"},{"lineNumber":218,"author":{"gitID":"marvinchin"},"content":"        executeCommand(command);"},{"lineNumber":219,"author":{"gitID":"marvinchin"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":220,"author":{"gitID":"marvinchin"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":221,"author":{"gitID":"marvinchin"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":222,"author":{"gitID":"marvinchin"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":223,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":225,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"marvinchin"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":227,"author":{"gitID":"marvinchin"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"marvinchin"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"marvinchin"},"content":"     * 3. Asserts that the model related components equal to the current model, and that the ordering of the persons in"},{"lineNumber":230,"author":{"gitID":"marvinchin"},"content":"     * the model is correct.\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"marvinchin"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"marvinchin"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":233,"author":{"gitID":"marvinchin"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":234,"author":{"gitID":"marvinchin"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"marvinchin"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":236,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"marvinchin"},"content":"    private void assertSortCommandFailure(String command, Comparator\u003cReadOnlyPerson\u003e lastValidSortComparator) {"},{"lineNumber":238,"author":{"gitID":"marvinchin"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":239,"author":{"gitID":"marvinchin"},"content":"        // model should remain sorted with the last valid sort even if command fails"},{"lineNumber":240,"author":{"gitID":"marvinchin"},"content":"        expectedModel.sortPersons(lastValidSortComparator);"},{"lineNumber":241,"author":{"gitID":"marvinchin"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE);"},{"lineNumber":242,"author":{"gitID":"marvinchin"},"content":"        executeCommand(command);"},{"lineNumber":243,"author":{"gitID":"marvinchin"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":244,"author":{"gitID":"marvinchin"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":245,"author":{"gitID":"marvinchin"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":246,"author":{"gitID":"marvinchin"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":247,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":227,"KeithSOC":1,"-":20}},{"path":"src/test/java/seedu/address/logic/parser/FacebookLinkCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"alexfoodw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":3,"author":{"gitID":"alexfoodw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":7,"author":{"gitID":"alexfoodw"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":9,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookLinkCommand;"},{"lineNumber":10,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":11,"author":{"gitID":"alexfoodw"},"content":"//@@author alexfoodw"},{"lineNumber":12,"author":{"gitID":"alexfoodw"},"content":"public class FacebookLinkCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":14,"author":{"gitID":"alexfoodw"},"content":"    private FacebookLinkCommandParser parser \u003d new FacebookLinkCommandParser();"},{"lineNumber":15,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":16,"author":{"gitID":"alexfoodw"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"alexfoodw"},"content":"    public void parse_validArgs_returnsFacebookLinkCommand() {"},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":"        assertParseSuccess(parser, FacebookLinkCommand.EXAMPLE_LINK,"},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":"                new FacebookLinkCommand(FacebookLinkCommand.EXAMPLE_LINK));"},{"lineNumber":20,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"        assertParseFailure(parser, \"www.google.com\","},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"                String.format(MESSAGE_INVALID_URL, \"Example: \" + FacebookLinkCommand.EXAMPLE_LINK));"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"}"},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"//@@author"}],"authorContributionMap":{"alexfoodw":26,"-":2}},{"path":"src/test/java/seedu/address/logic/parser/OptionBearingArgumentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":" * Contains unit tests for {@code OptionBearingArgument}."},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"public class OptionBearingArgumentTest {"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"    public void optionBearingArgument_argsWithoutOptions_success() {"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"        String args \u003d \"a/123 some building #01-01 e/hello@world.com\";"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"        OptionBearingArgument opArg \u003d new OptionBearingArgument(args);"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"        assertEquals(args, opArg.getRawArgs());"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"        assertEquals(args, opArg.getFilteredArgs());"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"        assertTrue(opArg.getOptions().isEmpty());"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"    public void optionBearingArgument_argsWithSingleLeadingOption_success() {"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        String args \u003d \"-opt a/123 some building #01-01 e/hello@world.com\";"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"        OptionBearingArgument opArg \u003d new OptionBearingArgument(args);"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"        String expectedFilteredArgs \u003d \"a/123 some building #01-01 e/hello@world.com\";"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"        Set\u003cString\u003e expectedOptions \u003d new HashSet\u003c\u003e(Arrays.asList(\"opt\"));"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"        assertEquals(args, opArg.getRawArgs());"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"        assertEquals(expectedFilteredArgs, opArg.getFilteredArgs());"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"        assertEquals(expectedOptions, opArg.getOptions());"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    public void optionBearingArgument_argsWithSingleEmbeddedOption_success() {"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        String args \u003d \"a/123 some building -opt #01-01 e/hello@world.com\";"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"        OptionBearingArgument opArg \u003d new OptionBearingArgument(args);"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"        String expectedFilteredArgs \u003d \"a/123 some building #01-01 e/hello@world.com\";"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"        Set\u003cString\u003e expectedOptions \u003d new HashSet\u003c\u003e(Arrays.asList(\"opt\"));"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"        assertEquals(args, opArg.getRawArgs());"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        assertEquals(expectedFilteredArgs, opArg.getFilteredArgs());"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        assertEquals(expectedOptions, opArg.getOptions());"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"    public void optionBearingArgument_argsWithMultipleOptions_success() {"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"        String args \u003d \"-tag a/123 some building -opt #01-01 e/hello@world.com\";"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        OptionBearingArgument opArg \u003d new OptionBearingArgument(args);"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"        String expectedFilteredArgs \u003d \"a/123 some building #01-01 e/hello@world.com\";"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"        Set\u003cString\u003e expectedOptions \u003d new HashSet\u003c\u003e(Arrays.asList(\"opt\", \"tag\"));"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"        assertEquals(args, opArg.getRawArgs());"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"        assertEquals(expectedFilteredArgs, opArg.getFilteredArgs());"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"        assertEquals(expectedOptions, opArg.getOptions());"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":59,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/FacebookPostCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"alexfoodw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":7,"author":{"gitID":"alexfoodw"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":9,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookPostCommand;"},{"lineNumber":10,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":11,"author":{"gitID":"alexfoodw"},"content":"//@@author alexfoodw"},{"lineNumber":12,"author":{"gitID":"alexfoodw"},"content":"public class FacebookPostCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"alexfoodw"},"content":"    private FacebookPostCommandParser parser \u003d new FacebookPostCommandParser();"},{"lineNumber":14,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":15,"author":{"gitID":"alexfoodw"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"alexfoodw"},"content":"    public void parse_validArgs_returnsFacebookPostCommand() {"},{"lineNumber":17,"author":{"gitID":"alexfoodw"},"content":"        assertParseSuccess(parser, FacebookPostCommand.EXAMPLE_POST,"},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":"                new FacebookPostCommand(FacebookPostCommand.EXAMPLE_POST));"},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":21,"author":{"gitID":"alexfoodw"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"        assertParseFailure(parser, \" \","},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacebookPostCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":"}"},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"//@@author"}],"authorContributionMap":{"alexfoodw":24,"-":3}},{"path":"src/test/java/seedu/address/logic/commands/HistoryCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class HistoryCommandTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private HistoryCommand historyCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private CommandHistory history;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        historyCommand \u003d new HistoryCommand();"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"        historyCommand.setData(model, getDummyStorage(), history, new UndoRedoStack());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertCommandResult(historyCommand, HistoryCommand.MESSAGE_NO_HISTORY);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String command1 \u003d \"clear\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        history.add(command1);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertCommandResult(historyCommand, String.format(HistoryCommand.MESSAGE_SUCCESS, command1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String command2 \u003d \"randomCommand\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command3 \u003d \"select 1\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        history.add(command2);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        history.add(command3);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                String.join(\"\\n\", command3, command2, command1));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandResult(historyCommand, expectedMessage);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Asserts that the result message from the execution of {@code historyCommand} equals to {@code expectedMessage}"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private void assertCommandResult(HistoryCommand historyCommand, String expectedMessage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, historyCommand.execute().feedbackToUser);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":2,"-":49}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ReadOnlyPerson lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        ReadOnlyPerson editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d new Person(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":182,"author":{"gitID":"marvinchin"},"content":"        editCommand.setData(model, getDummyStorage(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":2,"-":183}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"    public void execute_noOptionUnfilteredList_showsSameList() {"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(prepareCommand(\"\"), model, ListCommand.MESSAGE_SUCCESS_LIST_ALL, expectedModel);"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"    public void execute_noOptionFilteredList_showsAllPersons() {"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(prepareCommand(\"\"), model, ListCommand.MESSAGE_SUCCESS_LIST_ALL, expectedModel);"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"    public void execute_noOptionExtraArgumentsUnfilteredList_showsSameList() {"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(prepareCommand(\"abc\"),"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"                model, ListCommand.MESSAGE_SUCCESS_LIST_ALL, expectedModel);"},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(prepareCommand(\"FaV\"),"},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"                model, ListCommand.MESSAGE_SUCCESS_LIST_ALL, expectedModel);"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"    public void execute_favOptionUnfilteredList_showsAllFavoritePersons() {"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_FAV_PERSONS);"},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(prepareCommand(ListCommand.COMMAND_OPTION_FAV),"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"                model, ListCommand.MESSAGE_SUCCESS_LIST_FAV, expectedModel);"},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":59,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"    public void execute_favOptionFilteredList_showsAllFavoritePersons() {"},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":"        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_FAV_PERSONS);"},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(prepareCommand(ListCommand.COMMAND_OPTION_FAV),"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"                model, ListCommand.MESSAGE_SUCCESS_LIST_FAV, expectedModel);"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":67,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":"     * Returns a {@code ListCommand} with the parameter {@code argument}."},{"lineNumber":69,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"KeithSOC"},"content":"    private ListCommand prepareCommand(String argument) {"},{"lineNumber":71,"author":{"gitID":"KeithSOC"},"content":"        ListCommand listCommand \u003d new ListCommand(argument);"},{"lineNumber":72,"author":{"gitID":"KeithSOC"},"content":"        listCommand.setData(model, getDummyStorage(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":73,"author":{"gitID":"KeithSOC"},"content":"        return listCommand;"},{"lineNumber":74,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":1,"KeithSOC":46,"-":29}},{"path":"src/test/java/seedu/address/logic/commands/ImportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"import seedu.address.testutil.modelstubs.ModelStub;"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"import seedu.address.testutil.modelstubs.ModelStubAcceptingPersonAdded;"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":" * Contains integration and unit tests for {@code ImportCommand}."},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"public class ImportCommandTest {"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    private static final String TEST_DATA_FOLDER \u003d Paths.get(\"src/test/data/ImportCommandTest\")"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"            .toAbsolutePath().toString() + File.separator;"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"    @Rule"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    private AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(null);"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"    private Storage storage \u003d new StorageManager(addressBookStorage, null);"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"    public void execute_validExportData_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"        ModelStubAcceptingPersonAdded model \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"        String absoluteImportFilePath \u003d TEST_DATA_FOLDER + \"validXmlExportData.xml\";"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        ImportCommand importCommand \u003d prepareCommand(model, absoluteImportFilePath);"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"        CommandResult commandResult \u003d importCommand.execute();"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d String.format(ImportCommand.MESSAGE_IMPORT_CONTACTS_SUCCESS, absoluteImportFilePath);"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        ArrayList\u003cPerson\u003e expectedPersonsAdded \u003d new ArrayList\u003c\u003e(Arrays.asList(new Person(HOON), new Person(IDA)));"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"        assertEquals(expectedPersonsAdded, model.personsAdded);"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"    public void execute_invalidExportData_throwsCommandException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"        ModelStub model \u003d new ModelStub();"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"        String absoluteImportFilePath \u003d TEST_DATA_FOLDER + \"invalidExportData.txt\";"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"        ImportCommand importCommand \u003d prepareCommand(model, absoluteImportFilePath);"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"        thrown.expectMessage(String.format(ImportCommand.MESSAGE_IMPORT_CONTACTS_DCE_FAILURE, absoluteImportFilePath));"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"        importCommand.execute();"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"    public void execute_wrongFilePath_throwsCommandException() throws Exception {"},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"        ModelStub model \u003d new ModelStub();"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"        String absoluteImportFilePath \u003d TEST_DATA_FOLDER + \"nonexistentExportData.txt\";"},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"        ImportCommand importCommand \u003d prepareCommand(model, absoluteImportFilePath);"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":"        thrown.expectMessage(String.format(ImportCommand.MESSAGE_IMPORT_CONTACTS_FNF_FAILURE, absoluteImportFilePath));"},{"lineNumber":79,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":80,"author":{"gitID":"marvinchin"},"content":"        importCommand.execute();"},{"lineNumber":81,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":83,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"marvinchin"},"content":"    public void equals() {"},{"lineNumber":85,"author":{"gitID":"marvinchin"},"content":"        String someValidFilePath \u003d TEST_DATA_FOLDER + \"exported-data.xml\";"},{"lineNumber":86,"author":{"gitID":"marvinchin"},"content":"        String anotherValidFilePath \u003d TEST_DATA_FOLDER  + \"more-exported-data.xml\";"},{"lineNumber":87,"author":{"gitID":"marvinchin"},"content":"        ImportCommand importToSomeValidFilePathCommand \u003d new ImportCommand(someValidFilePath);"},{"lineNumber":88,"author":{"gitID":"marvinchin"},"content":"        ImportCommand importToAnotherValidFilePathCommand \u003d new ImportCommand(anotherValidFilePath);"},{"lineNumber":89,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":90,"author":{"gitID":"marvinchin"},"content":"        // same object -\u003e returns true"},{"lineNumber":91,"author":{"gitID":"marvinchin"},"content":"        assertTrue(importToSomeValidFilePathCommand.equals(importToSomeValidFilePathCommand));"},{"lineNumber":92,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":93,"author":{"gitID":"marvinchin"},"content":"        // same values -\u003e returns true"},{"lineNumber":94,"author":{"gitID":"marvinchin"},"content":"        ImportCommand importToSomeValidFilePathCommandCopy \u003d new ImportCommand(someValidFilePath);"},{"lineNumber":95,"author":{"gitID":"marvinchin"},"content":"        assertTrue(importToSomeValidFilePathCommand.equals(importToSomeValidFilePathCommandCopy));"},{"lineNumber":96,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":97,"author":{"gitID":"marvinchin"},"content":"        // different types -\u003e returns false"},{"lineNumber":98,"author":{"gitID":"marvinchin"},"content":"        assertFalse(importToSomeValidFilePathCommand.equals(1));"},{"lineNumber":99,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":100,"author":{"gitID":"marvinchin"},"content":"        // null -\u003e returns false"},{"lineNumber":101,"author":{"gitID":"marvinchin"},"content":"        assertFalse(importToSomeValidFilePathCommand.equals(null));"},{"lineNumber":102,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":103,"author":{"gitID":"marvinchin"},"content":"        //different value -\u003e returns false"},{"lineNumber":104,"author":{"gitID":"marvinchin"},"content":"        assertFalse(importToSomeValidFilePathCommand.equals(importToAnotherValidFilePathCommand));"},{"lineNumber":105,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":107,"author":{"gitID":"marvinchin"},"content":"    private ImportCommand prepareCommand(Model model, String filePath) {"},{"lineNumber":108,"author":{"gitID":"marvinchin"},"content":"        ImportCommand importCommand \u003d new ImportCommand(filePath);"},{"lineNumber":109,"author":{"gitID":"marvinchin"},"content":"        importCommand.setData(model, storage, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":110,"author":{"gitID":"marvinchin"},"content":"        return importCommand;"},{"lineNumber":111,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":113,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":91,"KeithSOC":1,"-":21}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FAVORITE_YES;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"        // different favorite status -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withFavorite(VALID_FAVORITE_YES).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":3,"-":60}},{"path":"src/test/java/seedu/address/logic/commands/UnFavoriteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"import java.util.LinkedHashSet;"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code UnFavoriteCommand}."},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":"public class UnFavoriteCommandTest {"},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"        ReadOnlyPerson personToUnFavorite \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"        UnFavoriteCommand unFavoriteCommand \u003d prepareCommand(Arrays.asList(INDEX_FIRST_PERSON));"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"        String expectedMessage \u003d UnFavoriteCommand.MESSAGE_UNFAVORITE_PERSON_SUCCESS"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"                + \"\\n\\t- \" + personToUnFavorite.getName().toString();"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"        expectedModel.toggleFavoritePerson(personToUnFavorite, UnFavoriteCommand.COMMAND_WORD);"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(unFavoriteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"    public void execute_validMultiIndexesUnfilteredList_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"        ReadOnlyPerson personAlice \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"        ReadOnlyPerson personDaniel \u003d model.getFilteredPersonList().get(INDEX_FOURTH_PERSON.getZeroBased());"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":"        Set\u003cReadOnlyPerson\u003e targetPersonList \u003d new LinkedHashSet\u003c\u003e();"},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":"        targetPersonList.add(personAlice);"},{"lineNumber":59,"author":{"gitID":"KeithSOC"},"content":"        targetPersonList.add(personDaniel);"},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":"        UnFavoriteCommand unFavoriteCommand \u003d prepareCommand(Arrays.asList(INDEX_FIRST_PERSON, INDEX_FOURTH_PERSON));"},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"        // In TypicalPersons, Alice is already a favorite contact while Daniel is not"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"        String expectedMessage \u003d UnFavoriteCommand.MESSAGE_UNFAVORITE_PERSON_SUCCESS"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":"                + \"\\n\\t- \" + personAlice.getName().toString()"},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"                + \"\\n\" + UnFavoriteCommand.MESSAGE_UNFAVORITE_PERSON_FAILURE"},{"lineNumber":67,"author":{"gitID":"KeithSOC"},"content":"                + \"\\n\\t- \" + personDaniel.getName().toString();"},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":69,"author":{"gitID":"KeithSOC"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":70,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":71,"author":{"gitID":"KeithSOC"},"content":"        for (ReadOnlyPerson personToUnFavorite : targetPersonList) {"},{"lineNumber":72,"author":{"gitID":"KeithSOC"},"content":"            expectedModel.toggleFavoritePerson(personToUnFavorite, UnFavoriteCommand.COMMAND_WORD);"},{"lineNumber":73,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(unFavoriteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":78,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"KeithSOC"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":81,"author":{"gitID":"KeithSOC"},"content":"        UnFavoriteCommand unFavoriteCommand \u003d prepareCommand(Arrays.asList(outOfBoundIndex));"},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":83,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(unFavoriteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":88,"author":{"gitID":"KeithSOC"},"content":"        ReadOnlyPerson personToUnFavorite \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":"        UnFavoriteCommand unFavoriteCommand \u003d prepareCommand(Arrays.asList(INDEX_FIRST_PERSON));"},{"lineNumber":90,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"        String expectedMessage \u003d UnFavoriteCommand.MESSAGE_UNFAVORITE_PERSON_SUCCESS"},{"lineNumber":92,"author":{"gitID":"KeithSOC"},"content":"                + \"\\n\\t- \" + personToUnFavorite.getName().toString();"},{"lineNumber":93,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":94,"author":{"gitID":"KeithSOC"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":95,"author":{"gitID":"KeithSOC"},"content":"        expectedModel.toggleFavoritePerson(personToUnFavorite, UnFavoriteCommand.COMMAND_WORD);"},{"lineNumber":96,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":97,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(unFavoriteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":98,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":100,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"KeithSOC"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":102,"author":{"gitID":"KeithSOC"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":103,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":104,"author":{"gitID":"KeithSOC"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":105,"author":{"gitID":"KeithSOC"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":106,"author":{"gitID":"KeithSOC"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":107,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":108,"author":{"gitID":"KeithSOC"},"content":"        UnFavoriteCommand unFavoriteCommand \u003d prepareCommand(Arrays.asList(outOfBoundIndex));"},{"lineNumber":109,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":110,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(unFavoriteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":111,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":113,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"KeithSOC"},"content":"    public void equals() {"},{"lineNumber":115,"author":{"gitID":"KeithSOC"},"content":"        UnFavoriteCommand unFavoriteFirstCommand \u003d new UnFavoriteCommand(Arrays.asList(INDEX_FIRST_PERSON));"},{"lineNumber":116,"author":{"gitID":"KeithSOC"},"content":"        UnFavoriteCommand favoriteSecondCommand \u003d new UnFavoriteCommand(Arrays.asList(INDEX_SECOND_PERSON));"},{"lineNumber":117,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":118,"author":{"gitID":"KeithSOC"},"content":"        // same object -\u003e returns true"},{"lineNumber":119,"author":{"gitID":"KeithSOC"},"content":"        assertTrue(unFavoriteFirstCommand.equals(unFavoriteFirstCommand));"},{"lineNumber":120,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":121,"author":{"gitID":"KeithSOC"},"content":"        // same values -\u003e returns true"},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":"        UnFavoriteCommand unFavoriteFirstCommandCopy \u003d new UnFavoriteCommand(Arrays.asList(INDEX_FIRST_PERSON));"},{"lineNumber":123,"author":{"gitID":"KeithSOC"},"content":"        assertTrue(unFavoriteFirstCommand.equals(unFavoriteFirstCommandCopy));"},{"lineNumber":124,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":125,"author":{"gitID":"KeithSOC"},"content":"        // different types -\u003e returns false"},{"lineNumber":126,"author":{"gitID":"KeithSOC"},"content":"        assertFalse(unFavoriteFirstCommand.equals(1));"},{"lineNumber":127,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":128,"author":{"gitID":"KeithSOC"},"content":"        // null -\u003e returns false"},{"lineNumber":129,"author":{"gitID":"KeithSOC"},"content":"        assertFalse(unFavoriteFirstCommand.equals(null));"},{"lineNumber":130,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":131,"author":{"gitID":"KeithSOC"},"content":"        // different person -\u003e returns false"},{"lineNumber":132,"author":{"gitID":"KeithSOC"},"content":"        assertFalse(unFavoriteFirstCommand.equals(favoriteSecondCommand));"},{"lineNumber":133,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":135,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"KeithSOC"},"content":"     * Returns a {@code UnFavoriteCommand} with the parameter {@code index}."},{"lineNumber":137,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"KeithSOC"},"content":"    private UnFavoriteCommand prepareCommand(List\u003cIndex\u003e indexList) {"},{"lineNumber":139,"author":{"gitID":"KeithSOC"},"content":"        UnFavoriteCommand unFavoriteCommand \u003d new UnFavoriteCommand(indexList);"},{"lineNumber":140,"author":{"gitID":"KeithSOC"},"content":"        unFavoriteCommand.setData(model, getDummyStorage(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":141,"author":{"gitID":"KeithSOC"},"content":"        return unFavoriteCommand;"},{"lineNumber":142,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":144,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"marvinchin":1,"KeithSOC":121,"-":22}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    private static final Storage NULL_STORAGE \u003d getDummyStorage();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteByIndexCommand(Arrays.asList(INDEX_FIRST_PERSON));"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteByIndexCommand(Arrays.asList(INDEX_FIRST_PERSON));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"        deleteCommandOne.setData(model, NULL_STORAGE, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"        deleteCommandTwo.setData(model, NULL_STORAGE, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"        undoCommand.setData(model, NULL_STORAGE, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":8,"-":52}},{"path":"src/test/java/seedu/address/logic/commands/FindByNameCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":" * Contains integration tests (interaction with the Model) for {@code FindByNameCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"public class FindByNameCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"        FindByNameCommand findFirstCommand \u003d new FindByNameCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        FindByNameCommand findSecondCommand \u003d new FindByNameCommand(secondPredicate);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        FindByNameCommand findFirstCommandCopy \u003d new FindByNameCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"        FindByNameCommand command \u003d prepareCommand(\" \");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"        FindByNameCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"     * Parses {@code userInput} into a {@code FindByNameCommand}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":"    private FindByNameCommand prepareCommand(String userInput) {"},{"lineNumber":79,"author":{"gitID":"marvinchin"},"content":"        FindByNameCommand command \u003d"},{"lineNumber":80,"author":{"gitID":"marvinchin"},"content":"                new FindByNameCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":81,"author":{"gitID":"marvinchin"},"content":"        command.setData(model, getDummyStorage(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"marvinchin"},"content":"    private void assertCommandSuccess(FindByNameCommand command, String expectedMessage,"},{"lineNumber":92,"author":{"gitID":"marvinchin"},"content":"            List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":15,"-":85}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FAV;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SOCIAL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_UNFAV;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.TagsContainKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"    public static final boolean VALID_FAVORITE_YES \u003d true;"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"    public static final boolean VALID_FAVORITE_NO \u003d false;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"    public static final String VALID_SOCIAL_AMY_INSTAGRAM \u003d \"instagram amy\";"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"    public static final String VALID_SOCIAL_BOB_FACEBOOK \u003d \"facebook bob\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":"    public static final String FAVORITE_DESC_YES \u003d \" \" + PREFIX_FAV;"},{"lineNumber":59,"author":{"gitID":"KeithSOC"},"content":"    public static final String FAVORITE_DESC_NO \u003d \" \" + PREFIX_UNFAV;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"    public static final String SOCIAL_DESC_AMY \u003d \" \" + PREFIX_SOCIAL + VALID_SOCIAL_AMY_INSTAGRAM;"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"    public static final String SOCIAL_DESC_BOB \u003d \" \" + PREFIX_SOCIAL + VALID_SOCIAL_BOB_FACEBOOK;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":"    public static final String INVALID_FAV_DESC \u003d \" \" + PREFIX_FAV + \"123abc\"; // string after prefix not allowed in fav"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"    public static final String TEST_TAG \u003d \"testtagshouldbeunused1234567890\";"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":77,"author":{"gitID":"KeithSOC"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":78,"author":{"gitID":"KeithSOC"},"content":"                .withName(VALID_NAME_AMY)"},{"lineNumber":79,"author":{"gitID":"KeithSOC"},"content":"                .withPhone(VALID_PHONE_AMY)"},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":"                .withEmail(VALID_EMAIL_AMY)"},{"lineNumber":81,"author":{"gitID":"KeithSOC"},"content":"                .withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":"                .withFavorite(VALID_FAVORITE_NO)"},{"lineNumber":83,"author":{"gitID":"KeithSOC"},"content":"                .withTags(VALID_TAG_FRIEND)"},{"lineNumber":84,"author":{"gitID":"KeithSOC"},"content":"                .build();"},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":"                .withName(VALID_NAME_BOB)"},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":"                .withPhone(VALID_PHONE_BOB)"},{"lineNumber":88,"author":{"gitID":"KeithSOC"},"content":"                .withEmail(VALID_EMAIL_BOB)"},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":"                .withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":90,"author":{"gitID":"KeithSOC"},"content":"                .withFavorite(VALID_FAVORITE_YES)"},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":92,"author":{"gitID":"KeithSOC"},"content":"                .build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":120,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first person in the {@code model}\u0027s address book."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public static void showFirstPersonOnly(Model model) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        ReadOnlyPerson person \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assert model.getFilteredPersonList().size() \u003d\u003d 1;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"marvinchin"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first n persons in the {@code model}\u0027s address book."},{"lineNumber":146,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"marvinchin"},"content":"    public static void showSomePersonsOnly(Model model, int numPersons) {"},{"lineNumber":148,"author":{"gitID":"marvinchin"},"content":"        for (int i \u003d 0; i \u003c numPersons; i++) {"},{"lineNumber":149,"author":{"gitID":"marvinchin"},"content":"            ReadOnlyPerson person \u003d model.getAddressBook().getPersonList().get(i);"},{"lineNumber":150,"author":{"gitID":"marvinchin"},"content":"            Person personWithTag \u003d new PersonBuilder(person).withTags(TEST_TAG).build();"},{"lineNumber":151,"author":{"gitID":"marvinchin"},"content":"            try {"},{"lineNumber":152,"author":{"gitID":"marvinchin"},"content":"                model.updatePerson(person, personWithTag);"},{"lineNumber":153,"author":{"gitID":"marvinchin"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":154,"author":{"gitID":"marvinchin"},"content":"                assert false : \"There should not be duplicate persons\";"},{"lineNumber":155,"author":{"gitID":"marvinchin"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":156,"author":{"gitID":"marvinchin"},"content":"                assert false : \"Person should not be missing\";"},{"lineNumber":157,"author":{"gitID":"marvinchin"},"content":"            }"},{"lineNumber":158,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":159,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":161,"author":{"gitID":"marvinchin"},"content":"        model.updateFilteredPersonList(new TagsContainKeywordsPredicate(Arrays.asList(TEST_TAG)));"},{"lineNumber":162,"author":{"gitID":"marvinchin"},"content":"        assert model.getFilteredPersonList().size() \u003d\u003d numPersons"},{"lineNumber":163,"author":{"gitID":"marvinchin"},"content":"                : \"Filtered persons list should have the same number of persons as defined in the input\";"},{"lineNumber":164,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        ReadOnlyPerson firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":33,"KeithSOC":23,"-":121}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"        command.setData(model, getDummyStorage(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":2,"-":35}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Person personInList \u003d new Person(model.getAddressBook().getPersonList().get(0));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"        command.setData(model, getDummyStorage(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":2,"-":54}},{"path":"src/test/java/systemtests/UnFavoriteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.UnFavoriteCommand.MESSAGE_UNFAVORITE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.UnFavoriteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"public class UnFavoriteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"    private static final String MESSAGE_INVALID_UNFAVORITE_COMMAND_FORMAT \u003d"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UnFavoriteCommand.MESSAGE_USAGE);"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"    public void unFavorite() {"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":"        /* ------------- Performing unfavorite operation while an unfiltered list is being shown ---------------- */"},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"        /*"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"         * Case: unfavorites the 1st \u0026 2nd person in the list,"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"         * command with leading spaces and trailing spaces -\u003e unfavorited"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"         */"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"        String command \u003d \"     \" + UnFavoriteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"                + \"       \" + INDEX_SECOND_PERSON.getOneBased();"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"        // Store in reverse just like how it would be sorted in the UnFavoriteCommandParser"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"        List\u003cIndex\u003e indexList \u003d Arrays.asList(INDEX_SECOND_PERSON, INDEX_FIRST_PERSON);"},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"        StringBuilder names \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"        for (Index index : indexList) {"},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"            ReadOnlyPerson unFavoritedPerson \u003d unFavoritePerson(expectedModel, index);"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"            names.append(\"\\n\\t- \").append(unFavoritedPerson.getName().toString());"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"        String expectedResultMessage \u003d MESSAGE_UNFAVORITE_PERSON_SUCCESS + names;"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"        /* Case: undo unfavoriting the 1st \u0026 2nd person in the list -\u003e 1st \u0026 2nd person unfavorited */"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":59,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"        /* Case: redo unfavoriting the 1st \u0026 2nd person in the list -\u003e 1st \u0026 2nd person unfavorited again */"},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":"        for (Index index : indexList) {"},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"            unFavoritePerson(expectedModel, index);"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":67,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":"        /* Case: we\u0027re undoing again so that we can perform unfavorite operations (with success message) below */"},{"lineNumber":69,"author":{"gitID":"KeithSOC"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":70,"author":{"gitID":"KeithSOC"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":71,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":72,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":73,"author":{"gitID":"KeithSOC"},"content":"        /* ---------------- Performing unfavorite operation while a filtered list is being shown ------------------- */"},{"lineNumber":74,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"        /* Case: filtered person list, unfavorite index within bounds of address book and person list -\u003e unfavorited */"},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":77,"author":{"gitID":"KeithSOC"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":78,"author":{"gitID":"KeithSOC"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":79,"author":{"gitID":"KeithSOC"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":"        command \u003d UnFavoriteCommand.COMMAND_WORD + \" \" + index.getOneBased();"},{"lineNumber":81,"author":{"gitID":"KeithSOC"},"content":"        ReadOnlyPerson unFavoritedPerson \u003d unFavoritePerson(expectedModel, index);"},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":"        expectedResultMessage \u003d MESSAGE_UNFAVORITE_PERSON_SUCCESS + \"\\n\\t- \" + unFavoritedPerson.getName().toString();"},{"lineNumber":83,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":84,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":"        /*"},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":"         * Case: filtered person list, unfavorite index within bounds of address book but out of bounds of person list"},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":"         * -\u003e rejected"},{"lineNumber":88,"author":{"gitID":"KeithSOC"},"content":"         */"},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":90,"author":{"gitID":"KeithSOC"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"        command \u003d UnFavoriteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":92,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":93,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":94,"author":{"gitID":"KeithSOC"},"content":"        /* ------------------ Performing unfavorite operation while a person card is selected --------------------- */"},{"lineNumber":95,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":96,"author":{"gitID":"KeithSOC"},"content":"        /* Case: unfavorite the selected person -\u003e person list panel selects the person before the unfavoriting */"},{"lineNumber":97,"author":{"gitID":"KeithSOC"},"content":"        showAllPersons();"},{"lineNumber":98,"author":{"gitID":"KeithSOC"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":99,"author":{"gitID":"KeithSOC"},"content":"        Index selectedIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":100,"author":{"gitID":"KeithSOC"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased());"},{"lineNumber":101,"author":{"gitID":"KeithSOC"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":102,"author":{"gitID":"KeithSOC"},"content":"        command \u003d UnFavoriteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"KeithSOC"},"content":"        unFavoritedPerson \u003d unFavoritePerson(expectedModel, selectedIndex);"},{"lineNumber":104,"author":{"gitID":"KeithSOC"},"content":"        expectedResultMessage \u003d MESSAGE_UNFAVORITE_PERSON_SUCCESS + \"\\n\\t- \" + unFavoritedPerson.getName().toString();"},{"lineNumber":105,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":106,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":107,"author":{"gitID":"KeithSOC"},"content":"        /* ------------------------------ Performing invalid unfavorite operation --------------------------------- */"},{"lineNumber":108,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":109,"author":{"gitID":"KeithSOC"},"content":"        /* Case: multiple invalid indexes (0 0 0) -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"KeithSOC"},"content":"        command \u003d UnFavoriteCommand.COMMAND_WORD + \" 0 0 0\";"},{"lineNumber":111,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_UNFAVORITE_COMMAND_FORMAT);"},{"lineNumber":112,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":113,"author":{"gitID":"KeithSOC"},"content":"        /* Case: multiple indexes with only one valid (1 0 -1 -2 -3) -\u003e rejected */"},{"lineNumber":114,"author":{"gitID":"KeithSOC"},"content":"        command \u003d UnFavoriteCommand.COMMAND_WORD + \" 1 0 -1 -2 -3\";"},{"lineNumber":115,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_UNFAVORITE_COMMAND_FORMAT);"},{"lineNumber":116,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":117,"author":{"gitID":"KeithSOC"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":118,"author":{"gitID":"KeithSOC"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":119,"author":{"gitID":"KeithSOC"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":120,"author":{"gitID":"KeithSOC"},"content":"        command \u003d UnFavoriteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":121,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":123,"author":{"gitID":"KeithSOC"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":124,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(UnFavoriteCommand.COMMAND_WORD + \" 1 2 a\","},{"lineNumber":125,"author":{"gitID":"KeithSOC"},"content":"                MESSAGE_INVALID_UNFAVORITE_COMMAND_FORMAT);"},{"lineNumber":126,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":127,"author":{"gitID":"KeithSOC"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":128,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(\"UnFaV 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":129,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":131,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"KeithSOC"},"content":"     * Unfavorites the {@code ReadOnlyPerson} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":133,"author":{"gitID":"KeithSOC"},"content":"     * @return the unfavorited person"},{"lineNumber":134,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"KeithSOC"},"content":"    private ReadOnlyPerson unFavoritePerson(Model model, Index index) {"},{"lineNumber":136,"author":{"gitID":"KeithSOC"},"content":"        ReadOnlyPerson targetPerson \u003d model.getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":137,"author":{"gitID":"KeithSOC"},"content":"        try {"},{"lineNumber":138,"author":{"gitID":"KeithSOC"},"content":"            model.toggleFavoritePerson(targetPerson, UnFavoriteCommand.COMMAND_WORD);"},{"lineNumber":139,"author":{"gitID":"KeithSOC"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":140,"author":{"gitID":"KeithSOC"},"content":"            throw new AssertionError(EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":141,"author":{"gitID":"KeithSOC"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":142,"author":{"gitID":"KeithSOC"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":143,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"KeithSOC"},"content":"        return targetPerson;"},{"lineNumber":145,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":147,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"KeithSOC"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"KeithSOC"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"KeithSOC"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"KeithSOC"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"KeithSOC"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"KeithSOC"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"KeithSOC"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"KeithSOC"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":156,"author":{"gitID":"KeithSOC"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":157,"author":{"gitID":"KeithSOC"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":158,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"KeithSOC"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":160,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":161,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":163,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"KeithSOC"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the"},{"lineNumber":165,"author":{"gitID":"KeithSOC"},"content":"     * browser url and selected card are expected to update accordingly depending on the card"},{"lineNumber":166,"author":{"gitID":"KeithSOC"},"content":"     * at {@code expectedSelectedCardIndex}."},{"lineNumber":167,"author":{"gitID":"KeithSOC"},"content":"     * @see UnFavoriteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":168,"author":{"gitID":"KeithSOC"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":169,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"KeithSOC"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":171,"author":{"gitID":"KeithSOC"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":172,"author":{"gitID":"KeithSOC"},"content":"        executeCommand(command);"},{"lineNumber":173,"author":{"gitID":"KeithSOC"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":174,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":175,"author":{"gitID":"KeithSOC"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":176,"author":{"gitID":"KeithSOC"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":177,"author":{"gitID":"KeithSOC"},"content":"        } else {"},{"lineNumber":178,"author":{"gitID":"KeithSOC"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":179,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":181,"author":{"gitID":"KeithSOC"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":182,"author":{"gitID":"KeithSOC"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":183,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":185,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"KeithSOC"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"KeithSOC"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"KeithSOC"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"KeithSOC"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"KeithSOC"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"KeithSOC"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"KeithSOC"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":193,"author":{"gitID":"KeithSOC"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"KeithSOC"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":195,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"KeithSOC"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":197,"author":{"gitID":"KeithSOC"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":198,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":199,"author":{"gitID":"KeithSOC"},"content":"        executeCommand(command);"},{"lineNumber":200,"author":{"gitID":"KeithSOC"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":201,"author":{"gitID":"KeithSOC"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":202,"author":{"gitID":"KeithSOC"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":203,"author":{"gitID":"KeithSOC"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":204,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":206,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"marvinchin":1,"KeithSOC":187,"-":18}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    private static final Storage NULL_STORAGE \u003d getDummyStorage();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteByIndexCommand(Arrays.asList(INDEX_FIRST_PERSON));"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteByIndexCommand(Arrays.asList(INDEX_FIRST_PERSON));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"        deleteCommandOne.setData(model, NULL_STORAGE, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"        deleteCommandTwo.setData(model, NULL_STORAGE, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"        redoCommand.setData(model, NULL_STORAGE, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":8,"-":50}},{"path":"src/test/java/seedu/address/logic/commands/SortByNameCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.SortCommandTestUtil.assertFilteredSortCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.SortCommandTestUtil.assertUnfilteredSortCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.PersonNameComparator;"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code SortByNameCommand}."},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"public class SortByNameCommandTest {"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    public void execute_unfilteredList_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        SortByNameCommand sortCommand \u003d prepareCommand();"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d SortByNameCommand.MESSAGE_SORT_SUCCESS;"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        assertUnfilteredSortCommandSuccess(sortCommand, model, new PersonNameComparator(), expectedMessage);"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"        SortByNameCommand sortCommand \u003d prepareCommand();"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d SortByNameCommand.MESSAGE_SORT_SUCCESS;"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"        assertFilteredSortCommandSuccess(sortCommand, model, new PersonNameComparator(), expectedMessage);"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"    public void equals() {"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"        SortByNameCommand sortByNameCommandOne \u003d new SortByNameCommand();"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"        SortByNameCommand sortByNameCommandTwo \u003d new SortByNameCommand();"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        // same object -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        assertTrue(sortByNameCommandOne.equals(sortByNameCommandOne));"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"        // same type -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        assertTrue(sortByNameCommandOne.equals(sortByNameCommandTwo));"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"        // different types -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        assertFalse(sortByNameCommandOne.equals(1));"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"        // null -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"        assertFalse(sortByNameCommandOne.equals(null));"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"     * Returns a {@code SortByNameCommand}."},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"    private SortByNameCommand prepareCommand() {"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"        SortByNameCommand sortCommand \u003d new SortByNameCommand();"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"        sortCommand.setData(model, getDummyStorage(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"        return sortCommand;"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":56,"-":13}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"import seedu.address.testutil.modelstubs.ModelStubAcceptingPersonAdded;"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"import seedu.address.testutil.modelstubs.ModelStubThrowingDuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"        ModelStubThrowingDuplicatePersonException modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":85,"author":{"gitID":"marvinchin"},"content":"        command.setData(model, getDummyStorage(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":5,"-":83}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showSomePersonsOnly;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":" * Contains utility functions for testing sort commands"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"public class SortCommandTestUtil {"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"    private static final int FILTER_NUM_PERSONS_TO_SHOW \u003d 3;"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"     * Checks that the sort command sorts un unfiltered person list correctly"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"    public static void assertUnfilteredSortCommandSuccess(SortCommand sortCommand, Model model,"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"                                                          Comparator\u003cReadOnlyPerson\u003e expectedSortComparator,"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"                                                          String expectedMessage) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"        expectedModel.sortPersons(expectedSortComparator);"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"        assertCommandSuccess(sortCommand, model, expectedMessage, expectedModel);"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"     * Checks that the sort command sorts a filtered person list correctly"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"    public static void assertFilteredSortCommandSuccess(SortCommand sortCommand, Model model,"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"                                                        Comparator\u003cReadOnlyPerson\u003e expectedSortComparator,"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"                                                        String expectedMessage) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"        showSomePersonsOnly(model, FILTER_NUM_PERSONS_TO_SHOW);"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"        showSomePersonsOnly(expectedModel, FILTER_NUM_PERSONS_TO_SHOW);"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"        expectedModel.sortPersons(expectedSortComparator);"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        assertCommandSuccess(sortCommand, model, expectedMessage, expectedModel);"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":35,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":107,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson selectedPerson \u003d getPersonAtIndex(index);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":118,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":119,"author":{"gitID":"marvinchin"},"content":"        assertEquals(selectedPerson, getPersonAtIndex(Index.fromZeroBased(lastEvent.targetIndex)));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"marvinchin"},"content":"    private ReadOnlyPerson getPersonAtIndex(Index index) {"},{"lineNumber":139,"author":{"gitID":"marvinchin"},"content":"        ObservableList\u003cReadOnlyPerson\u003e filteredPersons \u003d model.getFilteredPersonList();"},{"lineNumber":140,"author":{"gitID":"marvinchin"},"content":"        return filteredPersons.get(index.getZeroBased());"},{"lineNumber":141,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":148,"author":{"gitID":"marvinchin"},"content":"        selectCommand.setData(model, getDummyStorage(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":11,"-":140}},{"path":"src/test/java/seedu/address/logic/commands/ExportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":" * Contains integration and unit tests for {@code ExportCommand}."},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"public class ExportCommandTest {"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"    private AddressBook addressBook \u003d getTypicalAddressBook();"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"    private Model model \u003d new ModelManager(addressBook, new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"    private AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(null);"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"    private Storage storage \u003d new StorageManager(addressBookStorage, null);"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"    public void execute_validFilePath_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"        String validFilePath \u003d testFolder.getRoot().getPath() + \"exportedData.xml\";"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"        // if the file already exists, delete it"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"        Files.deleteIfExists(Paths.get(validFilePath));"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"        ExportCommand exportCommand \u003d prepareCommand(validFilePath);"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_EXPORT_CONTACTS_SUCCESS, validFilePath);"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"        Model expectedModel \u003d model;"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"        assertCommandSuccess(exportCommand, model, expectedMessage, expectedModel);"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"        // check that the written file is correct"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyAddressBook readBack \u003d storage.readAddressBook(validFilePath).get();"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyAddressBook readBackAddressBook \u003d new AddressBook(readBack);"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"        assertEquals(addressBook, readBackAddressBook);"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"    public void equals() {"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"        String someValidFilePath \u003d testFolder.getRoot().getPath() + \"exported-data.xml\";"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"        String anotherValidFilePath \u003d testFolder.getRoot().getPath()  + \"more-exported-data.xml\";"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"        ExportCommand exportToSomeValidFilePathCommand \u003d new ExportCommand(someValidFilePath);"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"        ExportCommand exportToAnotherValidFilePathCommand \u003d new ExportCommand(anotherValidFilePath);"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"        // same object -\u003e returns true"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"        assertTrue(exportToSomeValidFilePathCommand.equals(exportToSomeValidFilePathCommand));"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"        // same values -\u003e returns true"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"        ExportCommand exportToSomeValidFilePathCommandCopy \u003d new ExportCommand(someValidFilePath);"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"        assertTrue(exportToSomeValidFilePathCommand.equals(exportToSomeValidFilePathCommandCopy));"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"        // different types -\u003e returns false"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"        assertFalse(exportToSomeValidFilePathCommand.equals(1));"},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"        // null -\u003e returns false"},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":"        assertFalse(exportToSomeValidFilePathCommand.equals(null));"},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":79,"author":{"gitID":"marvinchin"},"content":"        //different value -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"marvinchin"},"content":"        assertFalse(exportToSomeValidFilePathCommand.equals(exportToAnotherValidFilePathCommand));"},{"lineNumber":81,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":83,"author":{"gitID":"marvinchin"},"content":"    private ExportCommand prepareCommand(String filePath) {"},{"lineNumber":84,"author":{"gitID":"marvinchin"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(filePath);"},{"lineNumber":85,"author":{"gitID":"marvinchin"},"content":"        exportCommand.setData(model, storage, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":86,"author":{"gitID":"marvinchin"},"content":"        return exportCommand;"},{"lineNumber":87,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":63,"-":25}},{"path":"src/test/java/seedu/address/logic/commands/DeleteByTagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.TagsContainKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteByTagCommand}."},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"public class DeleteByTagCommandTest {"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    public void execute_unfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"        List\u003cString\u003e tagsToDelete \u003d Arrays.asList(\"friends\");"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"        TagsContainKeywordsPredicate predicate \u003d new TagsContainKeywordsPredicate(tagsToDelete);"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"        List\u003cReadOnlyPerson\u003e personsToDelete \u003d model.getFilteredPersonList().stream()"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"                .filter(predicate).collect(Collectors.toList());"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"        StringBuilder deletedPersons \u003d new StringBuilder();"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"        for (ReadOnlyPerson person : personsToDelete) {"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"            deletedPersons.append(\"\\n\" + person.toString());"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"        DeleteByTagCommand deleteCommand \u003d prepareCommand(tagsToDelete);"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d String.format(DeleteByTagCommand.MESSAGE_DELETE_PERSON_SUCCESS, deletedPersons);"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"        for (ReadOnlyPerson person : personsToDelete) {"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"            expectedModel.deletePerson(person);"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"        NameContainsKeywordsPredicate filterPredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\"));"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"        model.updateFilteredPersonList(filterPredicate);"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"        List\u003cReadOnlyPerson\u003e filteredPersons \u003d model.getFilteredPersonList();"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"        List\u003cString\u003e tagsToDelete \u003d Arrays.asList(\"friends\");"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"        TagsContainKeywordsPredicate deletePredicate \u003d new TagsContainKeywordsPredicate(tagsToDelete);"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"        List\u003cReadOnlyPerson\u003e personsToDelete \u003d filteredPersons.stream()"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"                .filter(deletePredicate).collect(Collectors.toList());"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"        StringBuilder deletedPersons \u003d new StringBuilder();"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"        for (ReadOnlyPerson person : personsToDelete) {"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"            deletedPersons.append(\"\\n\" + person.toString());"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"        DeleteByTagCommand deleteCommand \u003d prepareCommand(tagsToDelete);"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d String.format(DeleteByTagCommand.MESSAGE_DELETE_PERSON_SUCCESS, deletedPersons);"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":"        for (ReadOnlyPerson person : personsToDelete) {"},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":"            expectedModel.deletePerson(person);"},{"lineNumber":79,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"marvinchin"},"content":"        expectedModel.updateFilteredPersonList(filterPredicate);"},{"lineNumber":81,"author":{"gitID":"marvinchin"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":82,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":84,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"marvinchin"},"content":"    public void equals() {"},{"lineNumber":86,"author":{"gitID":"marvinchin"},"content":"        Set\u003cString\u003e firstDeleteTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(\"friends\"));"},{"lineNumber":87,"author":{"gitID":"marvinchin"},"content":"        Set\u003cString\u003e secondDeleteTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(\"family\"));"},{"lineNumber":88,"author":{"gitID":"marvinchin"},"content":"        DeleteByTagCommand deleteFirstCommand \u003d new DeleteByTagCommand(firstDeleteTagSet);"},{"lineNumber":89,"author":{"gitID":"marvinchin"},"content":"        DeleteByTagCommand deleteSecondCommand \u003d new DeleteByTagCommand(secondDeleteTagSet);"},{"lineNumber":90,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":91,"author":{"gitID":"marvinchin"},"content":"        // same object -\u003e returns true"},{"lineNumber":92,"author":{"gitID":"marvinchin"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":93,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":94,"author":{"gitID":"marvinchin"},"content":"        // same values -\u003e returns true"},{"lineNumber":95,"author":{"gitID":"marvinchin"},"content":"        DeleteByTagCommand deleteFirstCommandCopy \u003d new DeleteByTagCommand(firstDeleteTagSet);"},{"lineNumber":96,"author":{"gitID":"marvinchin"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":97,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":98,"author":{"gitID":"marvinchin"},"content":"        // different types -\u003e returns false"},{"lineNumber":99,"author":{"gitID":"marvinchin"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":100,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":101,"author":{"gitID":"marvinchin"},"content":"        // null -\u003e returns false"},{"lineNumber":102,"author":{"gitID":"marvinchin"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":103,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":104,"author":{"gitID":"marvinchin"},"content":"        // different person -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"marvinchin"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":106,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":108,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"marvinchin"},"content":"     * Returns a {@code DeleteByTagCommand} with the parameter {@code index}."},{"lineNumber":110,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"marvinchin"},"content":"    private DeleteByTagCommand prepareCommand(List\u003cString\u003e tags) {"},{"lineNumber":112,"author":{"gitID":"marvinchin"},"content":"        HashSet\u003cString\u003e tagSet \u003d new HashSet\u003c\u003e(tags);"},{"lineNumber":113,"author":{"gitID":"marvinchin"},"content":"        DeleteByTagCommand deleteCommand \u003d new DeleteByTagCommand(tagSet);"},{"lineNumber":114,"author":{"gitID":"marvinchin"},"content":"        deleteCommand.setData(model, getDummyStorage(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":115,"author":{"gitID":"marvinchin"},"content":"        return deleteCommand;"},{"lineNumber":116,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":98,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/FavoriteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":"import java.util.LinkedHashSet;"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code FavoriteCommand}."},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"public class FavoriteCommandTest {"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"        ReadOnlyPerson personToFavorite \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"        FavoriteCommand favoriteCommand \u003d prepareCommand(Arrays.asList(INDEX_THIRD_PERSON));"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"        String expectedMessage \u003d FavoriteCommand.MESSAGE_FAVORITE_PERSON_SUCCESS"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"                + \"\\n\\t★ \" + personToFavorite.getName().toString();"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"        expectedModel.toggleFavoritePerson(personToFavorite, FavoriteCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(favoriteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"    public void execute_validMultiIndexesUnfilteredList_success() throws Exception {"},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"        ReadOnlyPerson personAlice \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"        ReadOnlyPerson personDaniel \u003d model.getFilteredPersonList().get(INDEX_FOURTH_PERSON.getZeroBased());"},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":"        Set\u003cReadOnlyPerson\u003e targetPersonList \u003d new LinkedHashSet\u003c\u003e();"},{"lineNumber":59,"author":{"gitID":"KeithSOC"},"content":"        targetPersonList.add(personAlice);"},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"        targetPersonList.add(personDaniel);"},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":"        FavoriteCommand favoriteCommand \u003d prepareCommand(Arrays.asList(INDEX_FIRST_PERSON, INDEX_FOURTH_PERSON));"},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"        // In TypicalPersons, Alice is already a favorite contact while Daniel is not"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":"        String expectedMessage \u003d FavoriteCommand.MESSAGE_FAVORITE_PERSON_SUCCESS"},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"                + \"\\n\\t★ \" + personDaniel.getName().toString()"},{"lineNumber":67,"author":{"gitID":"KeithSOC"},"content":"                + \"\\n\" + FavoriteCommand.MESSAGE_FAVORITE_PERSON_FAILURE"},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":"                + \"\\n\\t- \" + personAlice.getName().toString();"},{"lineNumber":69,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":70,"author":{"gitID":"KeithSOC"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":71,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":72,"author":{"gitID":"KeithSOC"},"content":"        for (ReadOnlyPerson personToFavorite : targetPersonList) {"},{"lineNumber":73,"author":{"gitID":"KeithSOC"},"content":"            expectedModel.toggleFavoritePerson(personToFavorite, FavoriteCommand.COMMAND_WORD);"},{"lineNumber":74,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(favoriteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":79,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":81,"author":{"gitID":"KeithSOC"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":"        FavoriteCommand favoriteCommand \u003d prepareCommand(Arrays.asList(outOfBoundIndex));"},{"lineNumber":83,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":84,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(favoriteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"KeithSOC"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":90,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"        ReadOnlyPerson personToFavorite \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"KeithSOC"},"content":"        FavoriteCommand favoriteCommand \u003d prepareCommand(Arrays.asList(INDEX_FIRST_PERSON));"},{"lineNumber":93,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":94,"author":{"gitID":"KeithSOC"},"content":"        // In TypicalPersons, first person (Alice) is already a favorite."},{"lineNumber":95,"author":{"gitID":"KeithSOC"},"content":"        // Assert command success as this is not a command failure,"},{"lineNumber":96,"author":{"gitID":"KeithSOC"},"content":"        // it\u0027s because we disallow favoriting of an already favorited person."},{"lineNumber":97,"author":{"gitID":"KeithSOC"},"content":"        String expectedMessage \u003d FavoriteCommand.MESSAGE_FAVORITE_PERSON_FAILURE"},{"lineNumber":98,"author":{"gitID":"KeithSOC"},"content":"                + \"\\n\\t- \" + personToFavorite.getName().toString();"},{"lineNumber":99,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":100,"author":{"gitID":"KeithSOC"},"content":"        assertCommandSuccess(favoriteCommand, model, expectedMessage, model);"},{"lineNumber":101,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":103,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"KeithSOC"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":105,"author":{"gitID":"KeithSOC"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":106,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":107,"author":{"gitID":"KeithSOC"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":108,"author":{"gitID":"KeithSOC"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":109,"author":{"gitID":"KeithSOC"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":110,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":111,"author":{"gitID":"KeithSOC"},"content":"        FavoriteCommand favoriteCommand \u003d prepareCommand(Arrays.asList(outOfBoundIndex));"},{"lineNumber":112,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":113,"author":{"gitID":"KeithSOC"},"content":"        assertCommandFailure(favoriteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":114,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":116,"author":{"gitID":"KeithSOC"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"KeithSOC"},"content":"    public void equals() {"},{"lineNumber":118,"author":{"gitID":"KeithSOC"},"content":"        FavoriteCommand favoriteFirstCommand \u003d new FavoriteCommand(Arrays.asList(INDEX_FIRST_PERSON));"},{"lineNumber":119,"author":{"gitID":"KeithSOC"},"content":"        FavoriteCommand favoriteSecondCommand \u003d new FavoriteCommand(Arrays.asList(INDEX_SECOND_PERSON));"},{"lineNumber":120,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":121,"author":{"gitID":"KeithSOC"},"content":"        // same object -\u003e returns true"},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":"        assertTrue(favoriteFirstCommand.equals(favoriteFirstCommand));"},{"lineNumber":123,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":124,"author":{"gitID":"KeithSOC"},"content":"        // same values -\u003e returns true"},{"lineNumber":125,"author":{"gitID":"KeithSOC"},"content":"        FavoriteCommand favoriteFirstCommandCopy \u003d new FavoriteCommand(Arrays.asList(INDEX_FIRST_PERSON));"},{"lineNumber":126,"author":{"gitID":"KeithSOC"},"content":"        assertTrue(favoriteFirstCommand.equals(favoriteFirstCommandCopy));"},{"lineNumber":127,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":128,"author":{"gitID":"KeithSOC"},"content":"        // different types -\u003e returns false"},{"lineNumber":129,"author":{"gitID":"KeithSOC"},"content":"        assertFalse(favoriteFirstCommand.equals(1));"},{"lineNumber":130,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":131,"author":{"gitID":"KeithSOC"},"content":"        // null -\u003e returns false"},{"lineNumber":132,"author":{"gitID":"KeithSOC"},"content":"        assertFalse(favoriteFirstCommand.equals(null));"},{"lineNumber":133,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":134,"author":{"gitID":"KeithSOC"},"content":"        // different person -\u003e returns false"},{"lineNumber":135,"author":{"gitID":"KeithSOC"},"content":"        assertFalse(favoriteFirstCommand.equals(favoriteSecondCommand));"},{"lineNumber":136,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":138,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"KeithSOC"},"content":"     * Returns a {@code FavoriteCommand} with the parameter {@code index}."},{"lineNumber":140,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"KeithSOC"},"content":"    private FavoriteCommand prepareCommand(List\u003cIndex\u003e indexList) {"},{"lineNumber":142,"author":{"gitID":"KeithSOC"},"content":"        FavoriteCommand favoriteCommand \u003d new FavoriteCommand(indexList);"},{"lineNumber":143,"author":{"gitID":"KeithSOC"},"content":"        favoriteCommand.setData(model, getDummyStorage(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":144,"author":{"gitID":"KeithSOC"},"content":"        return favoriteCommand;"},{"lineNumber":145,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":147,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"marvinchin":1,"KeithSOC":123,"-":23}},{"path":"src/test/java/seedu/address/logic/commands/DeleteByIndexCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"sarahnzx"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"sarahnzx"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitID":"sarahnzx"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteByIndexCommand}."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"public class DeleteByIndexCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":39,"author":{"gitID":"sarahnzx"},"content":"        String people \u003d personToDelete.toString();"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"        DeleteByIndexCommand deleteByIndexCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d String.format(deleteByIndexCommand.MESSAGE_DELETE_PERSON_SUCCESS, \"\\n\" + people);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"        assertCommandSuccess(deleteByIndexCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":49,"author":{"gitID":"sarahnzx"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"sarahnzx"},"content":"    public void execute_multipleValidIndicesUnfilteredList_success() throws Exception {"},{"lineNumber":51,"author":{"gitID":"sarahnzx"},"content":"        ReadOnlyPerson personToDelete \u003d null;"},{"lineNumber":52,"author":{"gitID":"sarahnzx"},"content":"        String people \u003d \"\";"},{"lineNumber":53,"author":{"gitID":"sarahnzx"},"content":"        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":54,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":55,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":56,"author":{"gitID":"sarahnzx"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":58,"author":{"gitID":"sarahnzx"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {"},{"lineNumber":59,"author":{"gitID":"sarahnzx"},"content":"            Index indexToDelete \u003d Index.fromZeroBased(i);"},{"lineNumber":60,"author":{"gitID":"sarahnzx"},"content":"            personToDelete \u003d model.getFilteredPersonList().get(indexToDelete.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"sarahnzx"},"content":"            expectedModel.deletePerson(personToDelete);"},{"lineNumber":62,"author":{"gitID":"sarahnzx"},"content":"            people +\u003d \"\\n\" + personToDelete.toString();"},{"lineNumber":63,"author":{"gitID":"sarahnzx"},"content":"            indexList.add(indexToDelete);"},{"lineNumber":64,"author":{"gitID":"sarahnzx"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":66,"author":{"gitID":"sarahnzx"},"content":"        DeleteByIndexCommand deleteByIndexCommand \u003d prepareCommand(indexList);"},{"lineNumber":67,"author":{"gitID":"sarahnzx"},"content":"        String expectedMessage \u003d String.format(deleteByIndexCommand.MESSAGE_DELETE_PERSON_SUCCESS, people);"},{"lineNumber":68,"author":{"gitID":"sarahnzx"},"content":"        assertCommandSuccess(deleteByIndexCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"sarahnzx"},"content":"    //@@author"},{"lineNumber":71,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"        DeleteByIndexCommand deleteByIndexCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"        assertCommandFailure(deleteByIndexCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":80,"author":{"gitID":"sarahnzx"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"sarahnzx"},"content":"    public void execute_multipleIndicesWithInvalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":82,"author":{"gitID":"sarahnzx"},"content":"        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":83,"author":{"gitID":"sarahnzx"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {"},{"lineNumber":84,"author":{"gitID":"sarahnzx"},"content":"            Index index \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":85,"author":{"gitID":"sarahnzx"},"content":"            indexList.add(index);"},{"lineNumber":86,"author":{"gitID":"sarahnzx"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"sarahnzx"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":88,"author":{"gitID":"sarahnzx"},"content":"        indexList.add(outOfBoundIndex);"},{"lineNumber":89,"author":{"gitID":"sarahnzx"},"content":"        DeleteByIndexCommand deleteByIndexCommand \u003d prepareCommand(indexList);"},{"lineNumber":90,"author":{"gitID":"sarahnzx"},"content":"        assertCommandFailure(deleteByIndexCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":91,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"sarahnzx"},"content":"    //@@author"},{"lineNumber":93,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":99,"author":{"gitID":"sarahnzx"},"content":"        String people \u003d personToDelete.toString();"},{"lineNumber":100,"author":{"gitID":"marvinchin"},"content":"        DeleteByIndexCommand deleteByIndexCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":101,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d String.format(deleteByIndexCommand.MESSAGE_DELETE_PERSON_SUCCESS, \"\\n\" + people);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"marvinchin"},"content":"        assertCommandSuccess(deleteByIndexCommand, model, expectedMessage, expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"marvinchin"},"content":"        DeleteByIndexCommand deleteByIndexCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"marvinchin"},"content":"        assertCommandFailure(deleteByIndexCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":125,"author":{"gitID":"marvinchin"},"content":"        DeleteByIndexCommand deleteFirstCommand \u003d new DeleteByIndexCommand(Arrays.asList(INDEX_FIRST_PERSON));"},{"lineNumber":126,"author":{"gitID":"marvinchin"},"content":"        DeleteByIndexCommand deleteSecondCommand \u003d new DeleteByIndexCommand(Arrays.asList(INDEX_SECOND_PERSON));"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":132,"author":{"gitID":"marvinchin"},"content":"        DeleteByIndexCommand deleteFirstCommandCopy \u003d new DeleteByIndexCommand(Arrays.asList(INDEX_FIRST_PERSON));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"marvinchin"},"content":"     * Returns a {@code DeleteByIndexCommand} with the parameter {@code index}."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"marvinchin"},"content":"    private DeleteByIndexCommand prepareCommand(Index index) {"},{"lineNumber":149,"author":{"gitID":"marvinchin"},"content":"        DeleteByIndexCommand deleteByIndexCommand \u003d new DeleteByIndexCommand(Arrays.asList(index));"},{"lineNumber":150,"author":{"gitID":"marvinchin"},"content":"        deleteByIndexCommand.setData(model, getDummyStorage(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":151,"author":{"gitID":"marvinchin"},"content":"        return deleteByIndexCommand;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":155,"author":{"gitID":"sarahnzx"},"content":"    private DeleteByIndexCommand prepareCommand(Collection\u003cIndex\u003e indexes) {"},{"lineNumber":156,"author":{"gitID":"sarahnzx"},"content":"        DeleteByIndexCommand deleteByIndexCommand \u003d new DeleteByIndexCommand(indexes);"},{"lineNumber":157,"author":{"gitID":"sarahnzx"},"content":"        deleteByIndexCommand.setData(model, getDummyStorage(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":158,"author":{"gitID":"sarahnzx"},"content":"        return deleteByIndexCommand;"},{"lineNumber":159,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"sarahnzx"},"content":"    //@@author"},{"lineNumber":161,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assert model.getFilteredPersonList().isEmpty();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahnzx":52,"marvinchin":21,"KeithSOC":2,"-":95}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"alexfoodw"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"alexfoodw"},"content":"    public void addressBookBackupReadSave() throws Exception {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":73,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":75,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":76,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":78,"author":{"gitID":"alexfoodw"},"content":"        storageManager.backupAddressBook(original);"},{"lineNumber":79,"author":{"gitID":"alexfoodw"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook(storageManager.getAddressBookFilePath()"},{"lineNumber":80,"author":{"gitID":"alexfoodw"},"content":"                + \"-backup.xml\").get();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":5,"-":110}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/JsonUserPrefsStorageTest/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        readUserPrefs(null);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + userPrefsFileInTestDataFolder"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        userPrefs.setGuiSettings(1000, 500, 300, 100);"},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":"        userPrefs.setThemeSettings(\"view/ThemeDay.css\", \"view/ThemeDayExtensions.css\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(\"addressbook.xml\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(\"TypicalAddressBookName\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        saveUserPrefs(null, \"SomeFile.json\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        saveUserPrefs(new UserPrefs(), null);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        original.setGuiSettings(1200, 200, 0, 2);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        String pefsFilePath \u003d testFolder.getRoot() + File.separator + \"TempPrefs.json\";"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        original.setGuiSettings(5, 5, 5, 5);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":1,"-":135}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"alexfoodw"},"content":"        //Save in new backup file and read back"},{"lineNumber":76,"author":{"gitID":"alexfoodw"},"content":"        xmlAddressBookStorage.backupAddressBook(original);"},{"lineNumber":77,"author":{"gitID":"alexfoodw"},"content":"        ReadOnlyAddressBook readBackup \u003d xmlAddressBookStorage.readAddressBook(filePath + \"-backup.xml\").get();"},{"lineNumber":78,"author":{"gitID":"alexfoodw"},"content":"        assertEquals(original, new AddressBook(readBackup));"},{"lineNumber":79,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        original.addPerson(new Person(HOON));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        original.removePerson(new Person(ALICE));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        original.addPerson(new Person(IDA));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook addressBook \u003d new XmlSerializableAddressBook();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook addressBook \u003d new XmlSerializableAddressBook();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":5,"-":128}},{"path":"src/test/java/seedu/address/logic/commands/SortByRecentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.SortCommandTestUtil.assertFilteredSortCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.SortCommandTestUtil.assertUnfilteredSortCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.PersonRecentComparator;"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code SortByRecentCommand}."},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"public class SortByRecentCommandTest {"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    public void execute_unfilteredList_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        SortByRecentCommand sortCommand \u003d prepareCommand();"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d SortByRecentCommand.MESSAGE_SORT_SUCCESS;"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        assertUnfilteredSortCommandSuccess(sortCommand, model, new PersonRecentComparator(), expectedMessage);"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"        SortByRecentCommand sortCommand \u003d prepareCommand();"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d SortByRecentCommand.MESSAGE_SORT_SUCCESS;"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"        assertFilteredSortCommandSuccess(sortCommand, model, new PersonRecentComparator(), expectedMessage);"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"    public void equals() {"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"        SortByRecentCommand sortByRecentCommandOne \u003d new SortByRecentCommand();"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"        SortByRecentCommand sortByRecentCommandTwo \u003d new SortByRecentCommand();"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        // same object -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        assertTrue(sortByRecentCommandOne.equals(sortByRecentCommandOne));"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"        // same type -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        assertTrue(sortByRecentCommandOne.equals(sortByRecentCommandTwo));"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"        // different types -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        assertFalse(sortByRecentCommandOne.equals(1));"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"        // null -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"        assertFalse(sortByRecentCommandOne.equals(null));"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"     * Returns a {@code SortByRecentCommand}."},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"    private SortByRecentCommand prepareCommand() {"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"        SortByRecentCommand sortCommand \u003d new SortByRecentCommand();"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"        sortCommand.setData(model, getDummyStorage(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"        return sortCommand;"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":56,"-":13}},{"path":"src/test/java/seedu/address/logic/commands/SortByDefaultCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.SortCommandTestUtil.assertFilteredSortCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.SortCommandTestUtil.assertUnfilteredSortCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.StorageUtil.getDummyStorage;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.PersonDefaultComparator;"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code SortByDefaultCommand}."},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"public class SortByDefaultCommandTest {"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    public void execute_unfilteredList_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        SortByDefaultCommand sortCommand \u003d prepareCommand();"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d SortByDefaultCommand.MESSAGE_SORT_SUCCESS;"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        assertUnfilteredSortCommandSuccess(sortCommand, model, new PersonDefaultComparator(), expectedMessage);"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"        SortByDefaultCommand sortCommand \u003d prepareCommand();"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"        String expectedMessage \u003d SortByDefaultCommand.MESSAGE_SORT_SUCCESS;"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"        assertFilteredSortCommandSuccess(sortCommand, model, new PersonDefaultComparator(), expectedMessage);"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"    public void equals() {"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"        SortByDefaultCommand sortByDefaultCommandOne \u003d new SortByDefaultCommand();"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"        SortByDefaultCommand sortByDefaultCommandTwo \u003d new SortByDefaultCommand();"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        // same object -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        assertTrue(sortByDefaultCommandOne.equals(sortByDefaultCommandOne));"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"        // same type -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        assertTrue(sortByDefaultCommandOne.equals(sortByDefaultCommandTwo));"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"        // different types -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        assertFalse(sortByDefaultCommandOne.equals(1));"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"        // null -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"        assertFalse(sortByDefaultCommandOne.equals(null));"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"     * Returns a {@code SortByDefaultCommand}."},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"    private SortByDefaultCommand prepareCommand() {"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"        SortByDefaultCommand sortCommand \u003d new SortByDefaultCommand();"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"        sortCommand.setData(model, getDummyStorage(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"        return sortCommand;"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":56,"-":13}},{"path":"src/test/java/seedu/address/model/comparator/PersonComparatorUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.model.comparator;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareAddress;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareEmail;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareFavorite;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareLastAccessDate;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareName;"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.comparePhone;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":" * Contains unit tests for {@code PersonComparatorUtil}."},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"public class PersonComparatorUtilTest {"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    public void compareFavorite_sameFavorite_returnZero() {"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson favoritePersonOne \u003d new PersonBuilder(AMY).withFavorite(true).build();"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson favoritePersonTwo \u003d new PersonBuilder(BOB).withFavorite(true).build();"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        assertEquals(0, compareFavorite(favoritePersonOne, favoritePersonTwo));"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson unfavoritePersonOne \u003d new PersonBuilder(AMY).withFavorite(false).build();"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson unfavoritePersonTwo \u003d new PersonBuilder(BOB).withFavorite(false).build();"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"        assertEquals(0, compareFavorite(unfavoritePersonOne, unfavoritePersonTwo));"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"    public void compareFavorite_differentFavorite_returnCorrectOrder() {"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson favoritePersonOne \u003d new PersonBuilder(AMY).withFavorite(true).build();"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson unfavoritePersonTwo \u003d new PersonBuilder(BOB).withFavorite(false).build();"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"        assertEquals(-1, compareFavorite(favoritePersonOne, unfavoritePersonTwo));"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson unfavoritePersonOne \u003d new PersonBuilder(AMY).withFavorite(false).build();"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson favoritePersonTwo \u003d new PersonBuilder(BOB).withFavorite(true).build();"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"        assertEquals(1, compareFavorite(unfavoritePersonOne, favoritePersonTwo));"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"    public void compareName_sameName_returnZero() {"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personOne \u003d new PersonBuilder(AMY).withName(\"Bob\").build();"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personTwo \u003d new PersonBuilder(BOB).withName(\"Bob\").build();"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        assertEquals(0, compareName(personOne, personTwo));"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"    public void compareName_differentName_returnCorrectOrder() {"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personOne \u003d new PersonBuilder(AMY).withName(\"Amy\").build();"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personTwo \u003d new PersonBuilder(BOB).withName(\"Bob\").build();"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"        assertEquals(-1, compareName(personOne, personTwo));"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"        assertEquals(1, compareName(personTwo, personOne));"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"    public void comparePhone_samePhone_returnZero() {"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personOne \u003d new PersonBuilder(AMY).withPhone(\"11111111\").build();"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personTwo \u003d new PersonBuilder(BOB).withPhone(\"11111111\").build();"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"        assertEquals(0, comparePhone(personOne, personTwo));"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"    public void comparePhone_differentPhone_returnCorrectOrder() {"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personOne \u003d new PersonBuilder(AMY).withPhone(\"11111111\").build();"},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personTwo \u003d new PersonBuilder(BOB).withPhone(\"22222222\").build();"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"        assertEquals(-1, comparePhone(personOne, personTwo));"},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"        assertEquals(1, comparePhone(personTwo, personOne));"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"marvinchin"},"content":"    public void compareAddress_sameAddress_returnZero() {"},{"lineNumber":80,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personOne \u003d new PersonBuilder(AMY).withAddress(\"Address 1\").build();"},{"lineNumber":81,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personTwo \u003d new PersonBuilder(BOB).withAddress(\"Address 1\").build();"},{"lineNumber":82,"author":{"gitID":"marvinchin"},"content":"        assertEquals(0, compareAddress(personOne, personTwo));"},{"lineNumber":83,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":85,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"marvinchin"},"content":"    public void compareAddress_differentAddress_returnCorrectOrder() {"},{"lineNumber":87,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personOne \u003d new PersonBuilder(AMY).withAddress(\"Address 1\").build();"},{"lineNumber":88,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personTwo \u003d new PersonBuilder(BOB).withAddress(\"Address 2\").build();"},{"lineNumber":89,"author":{"gitID":"marvinchin"},"content":"        assertEquals(-1, compareAddress(personOne, personTwo));"},{"lineNumber":90,"author":{"gitID":"marvinchin"},"content":"        assertEquals(1, compareAddress(personTwo, personOne));"},{"lineNumber":91,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":93,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"marvinchin"},"content":"    public void compareEmail_sameEmail_returnZero() {"},{"lineNumber":95,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personOne \u003d new PersonBuilder(AMY).withEmail(\"amy@example.com\").build();"},{"lineNumber":96,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personTwo \u003d new PersonBuilder(BOB).withEmail(\"amy@example.com\").build();"},{"lineNumber":97,"author":{"gitID":"marvinchin"},"content":"        assertEquals(0, compareEmail(personOne, personTwo));"},{"lineNumber":98,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":100,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"marvinchin"},"content":"    public void compareEmail_differentEmail_returnCorrectOrder() {"},{"lineNumber":102,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personOne \u003d new PersonBuilder(AMY).withEmail(\"amy@example.com\").build();"},{"lineNumber":103,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personTwo \u003d new PersonBuilder(BOB).withEmail(\"bob@example.com\").build();"},{"lineNumber":104,"author":{"gitID":"marvinchin"},"content":"        assertEquals(-1, compareEmail(personOne, personTwo));"},{"lineNumber":105,"author":{"gitID":"marvinchin"},"content":"        assertEquals(1, compareEmail(personTwo, personOne));"},{"lineNumber":106,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":108,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"marvinchin"},"content":"    public void compareLastAccessDate_sameLastAccessDate_returnZero() {"},{"lineNumber":110,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personOne \u003d new PersonBuilder(AMY).withLastAccessDate(new Date(1000)).build();"},{"lineNumber":111,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personTwo \u003d new PersonBuilder(BOB).withLastAccessDate(new Date(1000)).build();"},{"lineNumber":112,"author":{"gitID":"marvinchin"},"content":"        assertEquals(0, compareLastAccessDate(personOne, personTwo));"},{"lineNumber":113,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":115,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"marvinchin"},"content":"    public void compareLastAccessDate_differentLastAccessDate_returnCorrectOrder() {"},{"lineNumber":117,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personOne \u003d new PersonBuilder(AMY).withLastAccessDate(new Date(2000)).build();"},{"lineNumber":118,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson personTwo \u003d new PersonBuilder(BOB).withLastAccessDate(new Date(1000)).build();"},{"lineNumber":119,"author":{"gitID":"marvinchin"},"content":"        // expect the person with later last access date to come first in the ordering"},{"lineNumber":120,"author":{"gitID":"marvinchin"},"content":"        assertEquals(-1, compareLastAccessDate(personOne, personTwo));"},{"lineNumber":121,"author":{"gitID":"marvinchin"},"content":"        assertEquals(1, compareLastAccessDate(personTwo, personOne));"},{"lineNumber":122,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":118,"-":5}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"    public void addPersons_noDuplicates_success() throws DuplicatePersonException {"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"        UniquePersonList personsToAdd \u003d new UniquePersonList();"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"        personsToAdd.add(CARL);"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"        personsToAdd.add(DANIEL);"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder()"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"                .withPerson(ALICE).withPerson(BENSON).withPerson(CARL).withPerson(DANIEL).build();"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"        modelManager.addPersons(personsToAdd.asObservableList());"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        assertEquals(expectedAddressBook, modelManager.getAddressBook());"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"    public void addPersons_withDuplicates_success() throws DuplicatePersonException {"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"        UniquePersonList personsToAdd \u003d new UniquePersonList();"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        personsToAdd.add(ALICE);"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"        personsToAdd.add(DANIEL);"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder()"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"                .withPerson(ALICE).withPerson(BENSON).withPerson(DANIEL).build();"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"        modelManager.addPersons(personsToAdd.asObservableList());"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"        assertEquals(expectedAddressBook, modelManager.getAddressBook());"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":41,"-":65}},{"path":"src/test/java/seedu/address/model/person/LastAccessDateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import java.util.Date;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":" * Contains unit tests for {@code LastAccessDate}."},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"public class LastAccessDateTest {"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"    public void constructor_nullDate_throwsNullPointerException() {"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"        new LastAccessDate(null);"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    public void constructor_validDate_success() {"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        Date date \u003d new Date(1000);"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        LastAccessDate lastAccessDate \u003d new LastAccessDate(date);"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"        // string value of last access date should be equal to string value of date"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        String originalDateString \u003d date.toString();"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"        assertEquals(originalDateString, lastAccessDate.toString());"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"        // last access date should not be mutated when the original date is changed"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"        date.setTime(2000);"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"        assertEquals(originalDateString, lastAccessDate.toString());"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    public void getDate_mutateReturnedDate_isNotMutated() {"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        Date originalDate \u003d new Date(1000);"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"        LastAccessDate lastAccessDate \u003d new LastAccessDate(originalDate);"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"        Date date \u003d lastAccessDate.getDate();"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"        // returned date value should be same as original date value"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"        assertEquals(originalDate, lastAccessDate.getDate());"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        date.setTime(2000);"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        // date value stored in get access date should not have been mutated"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"        assertEquals(originalDate, lastAccessDate.getDate());"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"    public void equals() {"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        LastAccessDate lastAccessDateOne \u003d new LastAccessDate(new Date(1000));"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"        LastAccessDate lastAccessDateTwo \u003d new LastAccessDate(new Date(2000));"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"        // same object -\u003e returns true"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"        assertTrue(lastAccessDateOne.equals(lastAccessDateOne));"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"        // same value -\u003e returns true"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"        LastAccessDate lastAccessDateOneCopy \u003d new LastAccessDate(new Date(1000));"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"        assertTrue(lastAccessDateOneCopy.equals(lastAccessDateOne));"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"        // different types -\u003e returns false"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"        assertFalse(lastAccessDateOne.equals(new Date(1000)));"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"        // null -\u003e returns false"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"        assertFalse(lastAccessDateOne.equals(null));"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"        // different last access date -\u003e returns false"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"        assertFalse(lastAccessDateOne.equals(lastAccessDateTwo));"},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":66,"-":8}},{"path":"src/test/java/seedu/address/testutil/StorageUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":" * Utility class for tests involving {@code Storage}."},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"public class StorageUtil {"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"     * Returns a dummy storage for tests where a real storage does not need to be used"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"    public static Storage getDummyStorage() {"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"        return new StorageManager(null, null);"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":16,"-":2}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(ReadOnlyPerson person) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"        descriptor.setFavorite(person.getFavorite());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"        descriptor.setSocialInfos(person.getSocialInfos());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(Optional.of(name)).ifPresent(descriptor::setName);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(Optional.of(phone)).ifPresent(descriptor::setPhone);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(Optional.of(email)).ifPresent(descriptor::setEmail);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(Optional.of(address)).ifPresent(descriptor::setAddress);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":90,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"     * Sets the {@code Favorite} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":92,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"KeithSOC"},"content":"    public EditPersonDescriptorBuilder withFavorite(boolean favorite) {"},{"lineNumber":94,"author":{"gitID":"KeithSOC"},"content":"        descriptor.setFavorite(new Favorite(favorite));"},{"lineNumber":95,"author":{"gitID":"KeithSOC"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":98,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            descriptor.setTags(ParserUtil.parseTags(Arrays.asList(tags)));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":1,"KeithSOC":12,"-":102}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"    public static final Index INDEX_FOURTH_PERSON \u003d Index.fromOneBased(4);"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"    public static final Index INDEX_FIFTH_PERSON \u003d Index.fromOneBased(5);"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":4,"-":12}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FAV;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SOCIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static String getAddCommand(ReadOnlyPerson person) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"     * Returns an add command string using the command alias for adding the {@code person}."},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"    public static String getAddCommandAlias(ReadOnlyPerson person) {"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        return AddCommand.COMMAND_ALIAS + \" \" + getPersonDetails(person);"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(ReadOnlyPerson person) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"        if (person.getFavorite().isFavorite()) {"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"            sb.append(PREFIX_FAV + \" \");"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":48,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"        person.getSocialInfos().stream().forEach("},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"            s -\u003e sb.append(PREFIX_SOCIAL + s.getSocialType() + \" \" + s.getUsername())"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        );"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":11,"KeithSOC":6,"-":38}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FAVORITE_NO;"},{"lineNumber":8,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FAVORITE_YES;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SOCIAL_AMY_INSTAGRAM;"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SOCIAL_BOB_FACEBOOK;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"import java.util.Date;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"    public static final ReadOnlyPerson ALICE \u003d new PersonBuilder()"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"            .withName(\"Alice Pauline\")"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\")"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":"            .withEmail(\"alice@example.com\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"            .withFavorite(true)"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"            .withDisplayPhoto(null)"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"            .withTags(\"friends\")"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"            .withLastAccessDate(new Date(1000))"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"            .build();"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"    public static final ReadOnlyPerson BENSON \u003d new PersonBuilder()"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"            .withName(\"Benson Meier\")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"            .withEmail(\"johnd@example.com\")"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"            .withPhone(\"98765432\")"},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"            .withFavorite(true)"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"            .withDisplayPhoto(null)"},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"            .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"            .withLastAccessDate(new Date(2000))"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"            .build();"},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"    public static final ReadOnlyPerson CARL \u003d new PersonBuilder()"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"            .withName(\"Carl Kurz\")"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"            .withPhone(\"95352563\")"},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"            .withEmail(\"heinz@example.com\")"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"            .withAddress(\"wall street\")"},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":"            .withFavorite(false)"},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":"            .withDisplayPhoto(null)"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"            .withLastAccessDate(new Date(3000))"},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"            .build();"},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":"    public static final ReadOnlyPerson DANIEL \u003d new PersonBuilder()"},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":"            .withName(\"Daniel Meier\")"},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"            .withPhone(\"87652533\")"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"            .withEmail(\"cornelia@example.com\")"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":"            .withAddress(\"10th street\")"},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"            .withFavorite(false)"},{"lineNumber":67,"author":{"gitID":"KeithSOC"},"content":"            .withDisplayPhoto(null)"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"            .withLastAccessDate(new Date(4000))"},{"lineNumber":69,"author":{"gitID":"KeithSOC"},"content":"            .build();"},{"lineNumber":70,"author":{"gitID":"KeithSOC"},"content":"    public static final ReadOnlyPerson ELLE \u003d new PersonBuilder()"},{"lineNumber":71,"author":{"gitID":"KeithSOC"},"content":"            .withName(\"Elle Meyer\")"},{"lineNumber":72,"author":{"gitID":"KeithSOC"},"content":"            .withPhone(\"9482224\")"},{"lineNumber":73,"author":{"gitID":"KeithSOC"},"content":"            .withEmail(\"werner@example.com\")"},{"lineNumber":74,"author":{"gitID":"KeithSOC"},"content":"            .withAddress(\"michegan ave\")"},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"            .withFavorite(false)"},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"            .withDisplayPhoto(null)"},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":"            .withLastAccessDate(new Date(5000))"},{"lineNumber":78,"author":{"gitID":"KeithSOC"},"content":"            .build();"},{"lineNumber":79,"author":{"gitID":"KeithSOC"},"content":"    public static final ReadOnlyPerson FIONA \u003d new PersonBuilder()"},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":"            .withName(\"Fiona Kunz\")"},{"lineNumber":81,"author":{"gitID":"KeithSOC"},"content":"            .withPhone(\"9482427\")"},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":"            .withEmail(\"lydia@example.com\")"},{"lineNumber":83,"author":{"gitID":"KeithSOC"},"content":"            .withAddress(\"little tokyo\")"},{"lineNumber":84,"author":{"gitID":"KeithSOC"},"content":"            .withFavorite(false)"},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":"            .withDisplayPhoto(null)"},{"lineNumber":86,"author":{"gitID":"marvinchin"},"content":"            .withLastAccessDate(new Date(6000))"},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":"            .build();"},{"lineNumber":88,"author":{"gitID":"KeithSOC"},"content":"    public static final ReadOnlyPerson GEORGE \u003d new PersonBuilder()"},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":"            .withName(\"George Best\")"},{"lineNumber":90,"author":{"gitID":"KeithSOC"},"content":"            .withPhone(\"9482442\")"},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"            .withEmail(\"anna@example.com\")"},{"lineNumber":92,"author":{"gitID":"KeithSOC"},"content":"            .withAddress(\"4th street\")"},{"lineNumber":93,"author":{"gitID":"KeithSOC"},"content":"            .withFavorite(false)"},{"lineNumber":94,"author":{"gitID":"KeithSOC"},"content":"            .withDisplayPhoto(null)"},{"lineNumber":95,"author":{"gitID":"marvinchin"},"content":"            .withLastAccessDate(new Date(7000))"},{"lineNumber":96,"author":{"gitID":"KeithSOC"},"content":"            .build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":99,"author":{"gitID":"KeithSOC"},"content":"    public static final ReadOnlyPerson HOON \u003d new PersonBuilder()"},{"lineNumber":100,"author":{"gitID":"KeithSOC"},"content":"            .withName(\"Hoon Meier\")"},{"lineNumber":101,"author":{"gitID":"KeithSOC"},"content":"            .withPhone(\"8482424\")"},{"lineNumber":102,"author":{"gitID":"KeithSOC"},"content":"            .withEmail(\"stefan@example.com\")"},{"lineNumber":103,"author":{"gitID":"KeithSOC"},"content":"            .withAddress(\"little india\")"},{"lineNumber":104,"author":{"gitID":"KeithSOC"},"content":"            .withFavorite(false)"},{"lineNumber":105,"author":{"gitID":"KeithSOC"},"content":"            .withDisplayPhoto(null)"},{"lineNumber":106,"author":{"gitID":"marvinchin"},"content":"            .withLastAccessDate(new Date(8000))"},{"lineNumber":107,"author":{"gitID":"KeithSOC"},"content":"            .build();"},{"lineNumber":108,"author":{"gitID":"KeithSOC"},"content":"    public static final ReadOnlyPerson IDA \u003d new PersonBuilder()"},{"lineNumber":109,"author":{"gitID":"KeithSOC"},"content":"            .withName(\"Ida Mueller\")"},{"lineNumber":110,"author":{"gitID":"KeithSOC"},"content":"            .withPhone(\"8482131\")"},{"lineNumber":111,"author":{"gitID":"KeithSOC"},"content":"            .withEmail(\"hans@example.com\")"},{"lineNumber":112,"author":{"gitID":"KeithSOC"},"content":"            .withAddress(\"chicago ave\")"},{"lineNumber":113,"author":{"gitID":"KeithSOC"},"content":"            .withFavorite(false)"},{"lineNumber":114,"author":{"gitID":"KeithSOC"},"content":"            .withDisplayPhoto(null)"},{"lineNumber":115,"author":{"gitID":"marvinchin"},"content":"            .withLastAccessDate(new Date(9000))"},{"lineNumber":116,"author":{"gitID":"KeithSOC"},"content":"            .build();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":119,"author":{"gitID":"KeithSOC"},"content":"    public static final ReadOnlyPerson AMY \u003d new PersonBuilder()"},{"lineNumber":120,"author":{"gitID":"KeithSOC"},"content":"            .withName(VALID_NAME_AMY)"},{"lineNumber":121,"author":{"gitID":"KeithSOC"},"content":"            .withPhone(VALID_PHONE_AMY)"},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":"            .withEmail(VALID_EMAIL_AMY)"},{"lineNumber":123,"author":{"gitID":"KeithSOC"},"content":"            .withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":124,"author":{"gitID":"KeithSOC"},"content":"            .withFavorite(VALID_FAVORITE_NO)"},{"lineNumber":125,"author":{"gitID":"KeithSOC"},"content":"            .withDisplayPhoto(null)"},{"lineNumber":126,"author":{"gitID":"KeithSOC"},"content":"            .withTags(VALID_TAG_FRIEND)"},{"lineNumber":127,"author":{"gitID":"marvinchin"},"content":"            .withSocialInfos(VALID_SOCIAL_AMY_INSTAGRAM)"},{"lineNumber":128,"author":{"gitID":"KeithSOC"},"content":"            .build();"},{"lineNumber":129,"author":{"gitID":"KeithSOC"},"content":"    public static final ReadOnlyPerson BOB \u003d new PersonBuilder()"},{"lineNumber":130,"author":{"gitID":"KeithSOC"},"content":"            .withName(VALID_NAME_BOB)"},{"lineNumber":131,"author":{"gitID":"KeithSOC"},"content":"            .withPhone(VALID_PHONE_BOB)"},{"lineNumber":132,"author":{"gitID":"KeithSOC"},"content":"            .withEmail(VALID_EMAIL_BOB)"},{"lineNumber":133,"author":{"gitID":"KeithSOC"},"content":"            .withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":134,"author":{"gitID":"KeithSOC"},"content":"            .withFavorite(VALID_FAVORITE_YES)"},{"lineNumber":135,"author":{"gitID":"KeithSOC"},"content":"            .withDisplayPhoto(null)"},{"lineNumber":136,"author":{"gitID":"KeithSOC"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":137,"author":{"gitID":"marvinchin"},"content":"            .withSocialInfos(VALID_SOCIAL_BOB_FACEBOOK)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":141,"author":{"gitID":"KeithSOC"},"content":"    public static final String KEYWORD_MATCHING_KUNZ \u003d \"Kunz\"; // A keyword that matches KUNZ"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        for (ReadOnlyPerson person : getTypicalPersons()) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                assert false : \"not possible\";"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public static List\u003cReadOnlyPerson\u003e getTypicalPersons() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":14,"KeithSOC":92,"-":57}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.parser.SocialInfoMapping.parseSocialInfo;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.DisplayPhoto;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.LastAccessDate;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.SocialInfo;"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.UniqueSocialInfoList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"    public static final boolean DEFAULT_FAVORITE \u003d true;"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"    public static final String DEFAULT_DISPLAY_PHOTO \u003d null;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"    public static final SocialInfo DEFAULT_SOCIAL \u003d"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"            new SocialInfo(\"facebook\", \"default\", \"https://facebook.com/default\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Person person;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            Name defaultName \u003d new Name(DEFAULT_NAME);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            Phone defaultPhone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Email defaultEmail \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Address defaultAddress \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"            Favorite defaultFavoriteStatus \u003d new Favorite(DEFAULT_FAVORITE);"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"            DisplayPhoto defaultDisplayPhoto \u003d new DisplayPhoto(DEFAULT_DISPLAY_PHOTO);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e defaultTags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"            UniqueSocialInfoList defaultSocialInfos \u003d SampleDataUtil.getSocialInfos(DEFAULT_SOCIAL);"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"            this.person \u003d new Person(defaultName, defaultPhone, defaultEmail, defaultAddress,"},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"                    defaultFavoriteStatus, defaultDisplayPhoto, defaultTags, defaultSocialInfos);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Default person\u0027s values are invalid.\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public PersonBuilder(ReadOnlyPerson personToCopy) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.person \u003d new Person(personToCopy);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            this.person.setName(new Name(name));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            this.person.setTags(SampleDataUtil.getTagSet(tags));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":84,"author":{"gitID":"marvinchin"},"content":"            // Note(Marvin): The exception here is actually thrown when the tag does not conform to the"},{"lineNumber":85,"author":{"gitID":"marvinchin"},"content":"            // constraints set for tags (alphanumeric)."},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":92,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"marvinchin"},"content":"     * Parses the {@code socialInfos} into a {@code UniqueSocialInfoList} and set it to the {@code Person}"},{"lineNumber":94,"author":{"gitID":"marvinchin"},"content":"     * that we are building."},{"lineNumber":95,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"marvinchin"},"content":"    public PersonBuilder withSocialInfos(String... rawSocialInfos) {"},{"lineNumber":97,"author":{"gitID":"marvinchin"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"marvinchin"},"content":"            ArrayList\u003cSocialInfo\u003e socialInfos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":99,"author":{"gitID":"marvinchin"},"content":"            for (String rawSocialInfo : rawSocialInfos) {"},{"lineNumber":100,"author":{"gitID":"marvinchin"},"content":"                socialInfos.add(parseSocialInfo(rawSocialInfo));"},{"lineNumber":101,"author":{"gitID":"marvinchin"},"content":"            }"},{"lineNumber":102,"author":{"gitID":"marvinchin"},"content":"            // convert to array to be passed as varargs in getSocialInfos"},{"lineNumber":103,"author":{"gitID":"marvinchin"},"content":"            SocialInfo[] socialInfosArray \u003d socialInfos.toArray(new SocialInfo[rawSocialInfos.length]);"},{"lineNumber":104,"author":{"gitID":"marvinchin"},"content":"            this.person.setSocialInfos(SampleDataUtil.getSocialInfos(socialInfosArray).toSet());"},{"lineNumber":105,"author":{"gitID":"marvinchin"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":106,"author":{"gitID":"marvinchin"},"content":"            throw new IllegalArgumentException(\"raw social infos must be valid.\");"},{"lineNumber":107,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"marvinchin"},"content":"        return this;"},{"lineNumber":109,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":111,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"marvinchin"},"content":"     * Sets the {@code LastAccessDate} of the {@code Person} that we are building."},{"lineNumber":113,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"marvinchin"},"content":"    public PersonBuilder withLastAccessDate(Date date) {"},{"lineNumber":115,"author":{"gitID":"marvinchin"},"content":"        LastAccessDate lastAccessDate \u003d new LastAccessDate(date);"},{"lineNumber":116,"author":{"gitID":"marvinchin"},"content":"        this.person.setLastAccessDate(lastAccessDate);"},{"lineNumber":117,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":118,"author":{"gitID":"marvinchin"},"content":"        return this;"},{"lineNumber":119,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":120,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":122,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            this.person.setAddress(new Address(address));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            this.person.setPhone(new Phone(phone));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            this.person.setEmail(new Email(email));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":160,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"KeithSOC"},"content":"     * Sets the {@code Favorite} of the {@code Person} that we are building."},{"lineNumber":162,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"KeithSOC"},"content":"    public PersonBuilder withFavorite(boolean favorite) {"},{"lineNumber":164,"author":{"gitID":"KeithSOC"},"content":"        this.person.setFavorite(new Favorite(favorite));"},{"lineNumber":165,"author":{"gitID":"KeithSOC"},"content":"        return this;"},{"lineNumber":166,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":168,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"KeithSOC"},"content":"     * Sets the {@code DisplayPhoto} of the {@code Person} that we are building."},{"lineNumber":170,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"KeithSOC"},"content":"    public PersonBuilder withDisplayPhoto(String displayPhoto) {"},{"lineNumber":172,"author":{"gitID":"KeithSOC"},"content":"        try {"},{"lineNumber":173,"author":{"gitID":"KeithSOC"},"content":"            this.person.setDisplayPhoto(new DisplayPhoto(displayPhoto));"},{"lineNumber":174,"author":{"gitID":"KeithSOC"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":175,"author":{"gitID":"KeithSOC"},"content":"            throw new IllegalArgumentException(\"display photo file does not exist or it exceeded maximum size of 1MB\");"},{"lineNumber":176,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"KeithSOC"},"content":"        return this;"},{"lineNumber":178,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":180,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        return this.person;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":44,"KeithSOC":30,"-":111}},{"path":"src/test/java/seedu/address/testutil/modelstubs/ModelStubAcceptingPersonAdded.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.testutil.modelstubs;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import java.util.Collection;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":" * A {@code Model} stub that always accept the {@code Person} being added."},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"public class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"    public final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"    public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"        personsAdded.add(new Person(person));"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"    public void addPersons(Collection\u003cReadOnlyPerson\u003e persons) {"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"        for (ReadOnlyPerson person : persons) {"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"            personsAdded.add(new Person(person));"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"        return new AddressBook();"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":31,"-":4}},{"path":"src/test/java/seedu/address/testutil/modelstubs/ModelStubThrowingDuplicatePersonException.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.testutil.modelstubs;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":" * A {@code Model} stub that always throw a {@code DuplicatePersonException} when trying to add a {@code Person}."},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"public class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"    public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"        throw new DuplicatePersonException();"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"        return new AddressBook();"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":18,"-":4}},{"path":"src/test/java/guitests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.PersonDefaultComparator;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class SampleDataTest extends AddressBookGuiTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // return null to force test app to load data from file only"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // return a non-existent file location to force test app to load sample data"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"        // Persons should be sorted using the default comparator"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        Arrays.sort(expectedList, new PersonDefaultComparator());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":4,"-":47}},{"path":"src/test/java/guitests/GuiRobot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.BooleanSupplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.StageNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Robot used to simulate user actions on the GUI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Extends {@link FxRobot} by adding some customized functionality and workarounds."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class GuiRobot extends FxRobot {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 50000;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final boolean isHeadlessMode;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public GuiRobot() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * unnecessary delays."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void pauseForHuman() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (isHeadlessMode) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * milliseconds."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param timeOut in milliseconds"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event, int timeOut) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int timePassed \u003d 0;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final int retryInterval \u003d 50;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        while (!event.getAsBoolean()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            sleep(retryInterval);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            timePassed +\u003d retryInterval;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            if (timePassed \u003e\u003d timeOut) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                throw new EventTimeoutException();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        pauseForHuman();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns true if the window with {@code stageTitle} is currently open."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean isWindowShown(String stageTitle) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return listTargetWindows().stream()"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .count() \u003e\u003d 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the first stage, ordered by proximity to the current target window, with the stage title."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The order that the windows are searched are as follows (proximity): current target window,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * children of the target window, rest of the windows."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws StageNotFoundException if the stage is not found."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Stage getStage(String stageTitle) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .filter(Stage.class::isInstance)    // checks that the window is of type Stage"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .map(Stage.class::cast)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return targetStage.orElseThrow(StageNotFoundException::new);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Represents an error which occurs when a timeout occurs when waiting for an event."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class EventTimeoutException extends RuntimeException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":1,"-":104}},{"path":"src/test/java/seedu/address/model/social/UniqueSocialInfoListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.model.social;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":" * Contains unit tests for {@code UniqueSocialInfoList}."},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"public class UniqueSocialInfoListTest {"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"    private static final SocialInfo ALICE_FACEBOOK \u003d new SocialInfo(\"facebook\", \"alice\", \"facebook.com/alice\");"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"    private static final SocialInfo ALICE_TWITTER \u003d new SocialInfo(\"twitter\", \"alice\", \"instagram.com/alice\");"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"    private static final SocialInfo BOB_FACEBOOK \u003d new SocialInfo(\"facebook\", \"bob\", \"facebook.com/bob\");"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"    private static final SocialInfo BOB_TWITTER \u003d new SocialInfo(\"twitter\", \"bob\", \"instagram.com/bob\");"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"    public void uniqueSocialInfoList_toSet_success() throws DuplicateDataException {"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList uniqueSocialInfoList \u003d prepareUniqueSocialInfoList(ALICE_FACEBOOK, ALICE_TWITTER);"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        HashSet\u003cSocialInfo\u003e expectedSet \u003d new HashSet\u003c\u003e(Arrays.asList(ALICE_FACEBOOK, ALICE_TWITTER));"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"        assertEquals(expectedSet, uniqueSocialInfoList.toSet());"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"    public void uniqueSocialInfoList_addUnique_success() throws DuplicateDataException {"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList uniqueSocialInfoList \u003d prepareUniqueSocialInfoList(ALICE_FACEBOOK);"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"        uniqueSocialInfoList.add(ALICE_TWITTER);"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"        HashSet\u003cSocialInfo\u003e expectedSet \u003d new HashSet\u003c\u003e(Arrays.asList(ALICE_FACEBOOK, ALICE_TWITTER));"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"        assertEquals(expectedSet, uniqueSocialInfoList.toSet());"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"    public void uniqueSocialInfoList_addDuplicateSocialType_throwsDuplicateSocialTypeException()"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"            throws DuplicateDataException {"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList uniqueSocialInfoList \u003d prepareUniqueSocialInfoList(ALICE_FACEBOOK);"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        thrown.expect(UniqueSocialInfoList.DuplicateSocialTypeException.class);"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        uniqueSocialInfoList.add(BOB_FACEBOOK);"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"    public void uniqueSocialInfoList_setSocialInfos_success() {"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"        // Should work for an empty list"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList uniqueSocialInfoList \u003d new UniqueSocialInfoList();"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"        HashSet\u003cSocialInfo\u003e toSet \u003d new HashSet\u003c\u003e(Arrays.asList(BOB_FACEBOOK, BOB_TWITTER));"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"        uniqueSocialInfoList.setSocialInfos(toSet);"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"        assertEquals(toSet, uniqueSocialInfoList.toSet());"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"        // Should work for list with existing social infos"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"        HashSet\u003cSocialInfo\u003e nextToSet \u003d new HashSet\u003c\u003e(Arrays.asList(ALICE_FACEBOOK, ALICE_TWITTER));"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"        uniqueSocialInfoList.setSocialInfos(nextToSet);"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"        assertEquals(nextToSet, uniqueSocialInfoList.toSet());"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"    public void uniqueSocialInfoList_equals_success() throws DuplicateDataException {"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList aliceList \u003d prepareUniqueSocialInfoList(ALICE_FACEBOOK, ALICE_TWITTER);"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList bobList \u003d prepareUniqueSocialInfoList(BOB_FACEBOOK, BOB_TWITTER);"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"        assertFalse(aliceList.equals(bobList));"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList aliceListCopy \u003d prepareUniqueSocialInfoList(ALICE_FACEBOOK, ALICE_TWITTER);"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"        assertTrue(aliceList.equals(aliceListCopy));"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList aliceListOrdered \u003d new UniqueSocialInfoList();"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"        aliceListOrdered.add(ALICE_FACEBOOK);"},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"        aliceListOrdered.add(ALICE_TWITTER);"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList aliceListReversed \u003d new UniqueSocialInfoList();"},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":"        aliceListReversed.add(ALICE_TWITTER);"},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":"        aliceListReversed.add(ALICE_FACEBOOK);"},{"lineNumber":79,"author":{"gitID":"marvinchin"},"content":"        assertFalse(aliceListOrdered.equals(aliceListReversed));"},{"lineNumber":80,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":82,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"marvinchin"},"content":"    public void uniqueSocialInfoList_equalsOrderInsensitive_success()"},{"lineNumber":84,"author":{"gitID":"marvinchin"},"content":"            throws DuplicateDataException {"},{"lineNumber":85,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList aliceList \u003d prepareUniqueSocialInfoList(ALICE_FACEBOOK, ALICE_TWITTER);"},{"lineNumber":86,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList bobList \u003d prepareUniqueSocialInfoList(BOB_FACEBOOK, BOB_TWITTER);"},{"lineNumber":87,"author":{"gitID":"marvinchin"},"content":"        assertFalse(aliceList.equalsOrderInsensitive(bobList));"},{"lineNumber":88,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList aliceListCopy \u003d prepareUniqueSocialInfoList(ALICE_FACEBOOK, ALICE_TWITTER);"},{"lineNumber":89,"author":{"gitID":"marvinchin"},"content":"        assertTrue(aliceList.equalsOrderInsensitive(aliceListCopy));"},{"lineNumber":90,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":91,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList aliceListOrdered \u003d new UniqueSocialInfoList();"},{"lineNumber":92,"author":{"gitID":"marvinchin"},"content":"        aliceListOrdered.add(ALICE_FACEBOOK);"},{"lineNumber":93,"author":{"gitID":"marvinchin"},"content":"        aliceListOrdered.add(ALICE_TWITTER);"},{"lineNumber":94,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList aliceListReversed \u003d new UniqueSocialInfoList();"},{"lineNumber":95,"author":{"gitID":"marvinchin"},"content":"        aliceListReversed.add(ALICE_TWITTER);"},{"lineNumber":96,"author":{"gitID":"marvinchin"},"content":"        aliceListReversed.add(ALICE_FACEBOOK);"},{"lineNumber":97,"author":{"gitID":"marvinchin"},"content":"        assertTrue(aliceListOrdered.equalsOrderInsensitive(aliceListReversed));"},{"lineNumber":98,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":100,"author":{"gitID":"marvinchin"},"content":"    private static UniqueSocialInfoList prepareUniqueSocialInfoList(SocialInfo... socialInfos)"},{"lineNumber":101,"author":{"gitID":"marvinchin"},"content":"            throws DuplicateDataException {"},{"lineNumber":102,"author":{"gitID":"marvinchin"},"content":"        return new UniqueSocialInfoList("},{"lineNumber":103,"author":{"gitID":"marvinchin"},"content":"                new HashSet\u003c\u003e(Arrays.asList(socialInfos))"},{"lineNumber":104,"author":{"gitID":"marvinchin"},"content":"        );"},{"lineNumber":105,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":97,"-":9}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"        //@@author keithsoc"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"        // sets focus on TextField upon app launch"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"        Platform.runLater(() -\u003e commandTextField.requestFocus());"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"        //@@author"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":115,"author":{"gitID":"KeithSOC"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, false));"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":"            raise(new NewResultAvailableEvent(e.getMessage(), true));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":133,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":7,"-":149}},{"path":"src/test/java/seedu/address/testutil/modelstubs/ModelStub.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.testutil.modelstubs;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":" * A default {@code Model} stub that have all of the methods failing."},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"public class ModelStub implements Model {"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"    public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"    public void addPersons(Collection\u003cReadOnlyPerson\u003e persons) {"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"    public void sortPersons(Comparator\u003cReadOnlyPerson\u003e comparator) {"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"        return null;"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"    public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"            throws DuplicatePersonException {"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"    public void selectPerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"    public Index getPersonIndex(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"        return null;"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":71,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":72,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"KeithSOC"},"content":"    public void toggleFavoritePerson(ReadOnlyPerson target, String type)"},{"lineNumber":74,"author":{"gitID":"KeithSOC"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":79,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"marvinchin"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":81,"author":{"gitID":"marvinchin"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":82,"author":{"gitID":"marvinchin"},"content":"        return null;"},{"lineNumber":83,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":85,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"marvinchin"},"content":"    public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":87,"author":{"gitID":"marvinchin"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":88,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":90,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"marvinchin"},"content":"    public void removeTag(Tag tag) throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":92,"author":{"gitID":"marvinchin"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":93,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":95,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"marvinchin"},"content":"    public Model makeCopy() {"},{"lineNumber":97,"author":{"gitID":"marvinchin"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":98,"author":{"gitID":"marvinchin"},"content":"        return null;"},{"lineNumber":99,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":85,"KeithSOC":6,"-":9}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/kaypoh_icon_32.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(config.getAppTitle());"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // Set the application icon."},{"lineNumber":53,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"        // Set the application fonts."},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"        UiFont.getInstance().embedFonts();"},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            mainWindow.show(); // This should be called before creating other UI parts"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":72,"author":{"gitID":"KeithSOC"},"content":"        prefs.updateLastUsedThemeSetting(mainWindow.getCurrentThemeSetting());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":5,"-":119}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"    private StatusBar totalPersons;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"    public StatusBarFooter(String saveLocation, int totalPersons) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"        setTotalPersons(totalPersons);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"KeithSOC"},"content":"    private void setTotalPersons(int totalPersons) {"},{"lineNumber":78,"author":{"gitID":"KeithSOC"},"content":"        this.totalPersons.setText(totalPersons + \" person(s) total\");"},{"lineNumber":79,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":"        setTotalPersons(abce.data.getPersonList().size());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":9,"-":80}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"    private static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e displayed.setValue(event.message));"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"        if (event.isError) {"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"        } else {"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"            setStyleToDefault();"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"     * Sets the {@code ResultDisplay} style to use the default style."},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"    private void setStyleToDefault() {"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":"     * Sets the {@code ResultDisplay} style to indicate a failed command."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":20,"-":49}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"import javafx.scene.control.Button;"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"import javafx.scene.control.MenuBar;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.commons.core.ThemeSettings;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FxViewUtil;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"    private static final String ICON \u003d \"/images/kaypoh_icon_32.png\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"    private static final int MIN_HEIGHT \u003d 700;"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"    private static final int MIN_WIDTH \u003d 600;"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"    private double xOffset \u003d 0;"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"    private double yOffset \u003d 0;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"    private Scene scene;"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":"    private MenuBar menuBar;"},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":"    private Button minimiseButton;"},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"KeithSOC"},"content":"    private Button maximiseButton;"},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        setIcon(ICON);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        setWindowMinSize();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":94,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":95,"author":{"gitID":"KeithSOC"},"content":"        // Set theme"},{"lineNumber":96,"author":{"gitID":"KeithSOC"},"content":"        scene \u003d new Scene(getRoot());"},{"lineNumber":97,"author":{"gitID":"KeithSOC"},"content":"        //@@author keithsoc"},{"lineNumber":98,"author":{"gitID":"KeithSOC"},"content":"        scene.setFill(Color.TRANSPARENT);"},{"lineNumber":99,"author":{"gitID":"KeithSOC"},"content":"        setDefaultTheme(prefs, scene);"},{"lineNumber":100,"author":{"gitID":"KeithSOC"},"content":"        UiTheme.getInstance().setScene(scene);"},{"lineNumber":101,"author":{"gitID":"KeithSOC"},"content":"        //@@author"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"KeithSOC"},"content":"        //@@author keithsoc"},{"lineNumber":105,"author":{"gitID":"KeithSOC"},"content":"        // Enable window navigation"},{"lineNumber":106,"author":{"gitID":"KeithSOC"},"content":"        enableMovableWindow();"},{"lineNumber":107,"author":{"gitID":"KeithSOC"},"content":"        enableMinimiseWindow();"},{"lineNumber":108,"author":{"gitID":"KeithSOC"},"content":"        enableMaximiseWindow();"},{"lineNumber":109,"author":{"gitID":"KeithSOC"},"content":"        UiResize.enableResizableWindow(primaryStage, MIN_WIDTH, MIN_HEIGHT, Double.MAX_VALUE, Double.MAX_VALUE);"},{"lineNumber":110,"author":{"gitID":"KeithSOC"},"content":"        //@@author"},{"lineNumber":111,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":132,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":133,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":134,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":135,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":136,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":137,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":138,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":139,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":140,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":141,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":142,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":143,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":144,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":145,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":158,"author":{"gitID":"KeithSOC"},"content":"        browserPanel \u003d new BrowserPanel(scene);"},{"lineNumber":159,"author":{"gitID":"alexfoodw"},"content":"        browserPanel.setLogic(logic);"},{"lineNumber":160,"author":{"gitID":"KeithSOC"},"content":"        UiTheme.getInstance().setBrowserPanel(browserPanel);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"KeithSOC"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"},{"lineNumber":170,"author":{"gitID":"KeithSOC"},"content":"                logic.getFilteredPersonList().size());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Sets the given image as the icon of the main window."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * @param iconSource e.g. {@code \"/images/help_icon.png\"}"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void setIcon(String iconSource) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        FxViewUtil.setStageIcon(primaryStage, iconSource);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private void setWindowMinSize() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        primaryStage.setMinHeight(MIN_HEIGHT);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        primaryStage.setMinWidth(MIN_WIDTH);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":211,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"KeithSOC"},"content":"     * Sets the default theme based on user preferences."},{"lineNumber":213,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"KeithSOC"},"content":"    private void setDefaultTheme(UserPrefs prefs, Scene scene) {"},{"lineNumber":215,"author":{"gitID":"KeithSOC"},"content":"        scene.getStylesheets().addAll(prefs.getThemeSettings().getTheme(),"},{"lineNumber":216,"author":{"gitID":"KeithSOC"},"content":"                prefs.getThemeSettings().getThemeExtensions());"},{"lineNumber":217,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":219,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"KeithSOC"},"content":"     * Returns the current theme applied."},{"lineNumber":221,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"KeithSOC"},"content":"    ThemeSettings getCurrentThemeSetting() {"},{"lineNumber":223,"author":{"gitID":"KeithSOC"},"content":"        String cssMain \u003d scene.getStylesheets().get(0);"},{"lineNumber":224,"author":{"gitID":"KeithSOC"},"content":"        String cssExtensions \u003d scene.getStylesheets().get(1);"},{"lineNumber":225,"author":{"gitID":"KeithSOC"},"content":"        return new ThemeSettings(cssMain, cssExtensions);"},{"lineNumber":226,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":228,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":272,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":273,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":274,"author":{"gitID":"KeithSOC"},"content":"     * Enable movable window."},{"lineNumber":275,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"KeithSOC"},"content":"    private void enableMovableWindow() {"},{"lineNumber":277,"author":{"gitID":"KeithSOC"},"content":"        menuBar.setOnMousePressed((event) -\u003e {"},{"lineNumber":278,"author":{"gitID":"KeithSOC"},"content":"            xOffset \u003d event.getSceneX();"},{"lineNumber":279,"author":{"gitID":"KeithSOC"},"content":"            yOffset \u003d event.getSceneY();"},{"lineNumber":280,"author":{"gitID":"KeithSOC"},"content":"        });"},{"lineNumber":281,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":282,"author":{"gitID":"KeithSOC"},"content":"        menuBar.setOnMouseDragged((event) -\u003e {"},{"lineNumber":283,"author":{"gitID":"KeithSOC"},"content":"            primaryStage.setX(event.getScreenX() - xOffset);"},{"lineNumber":284,"author":{"gitID":"KeithSOC"},"content":"            primaryStage.setY(event.getScreenY() - yOffset);"},{"lineNumber":285,"author":{"gitID":"KeithSOC"},"content":"        });"},{"lineNumber":286,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":288,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"KeithSOC"},"content":"     * Enable minimising of window."},{"lineNumber":290,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"KeithSOC"},"content":"    private void enableMinimiseWindow() {"},{"lineNumber":292,"author":{"gitID":"KeithSOC"},"content":"        minimiseButton.setOnMouseClicked((event) -\u003e"},{"lineNumber":293,"author":{"gitID":"KeithSOC"},"content":"                primaryStage.setIconified(true)"},{"lineNumber":294,"author":{"gitID":"KeithSOC"},"content":"        );"},{"lineNumber":295,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":297,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":298,"author":{"gitID":"KeithSOC"},"content":"     * Enable maximising and restoring pre-maximised state of window."},{"lineNumber":299,"author":{"gitID":"KeithSOC"},"content":"     * Change button images respectively via css."},{"lineNumber":300,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":301,"author":{"gitID":"KeithSOC"},"content":"    private void enableMaximiseWindow() {"},{"lineNumber":302,"author":{"gitID":"KeithSOC"},"content":"        maximiseButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":303,"author":{"gitID":"KeithSOC"},"content":"            primaryStage.setMaximized(true);"},{"lineNumber":304,"author":{"gitID":"KeithSOC"},"content":"            maximiseButton.setId(\"restoreButton\");"},{"lineNumber":305,"author":{"gitID":"KeithSOC"},"content":"        });"},{"lineNumber":306,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":307,"author":{"gitID":"KeithSOC"},"content":"        maximiseButton.setOnMousePressed((event) -\u003e {"},{"lineNumber":308,"author":{"gitID":"KeithSOC"},"content":"            primaryStage.setMaximized(false);"},{"lineNumber":309,"author":{"gitID":"KeithSOC"},"content":"            maximiseButton.setId(\"maximiseButton\");"},{"lineNumber":310,"author":{"gitID":"KeithSOC"},"content":"        });"},{"lineNumber":311,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":312,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":313,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":1,"KeithSOC":105,"-":207}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":26,"author":{"gitID":"sarahnzx"},"content":"    private String socialType \u003d null;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public PersonListPanel(ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        setConnections(personList);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private void setConnections(ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":50,"author":{"gitID":"sarahnzx"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue, socialType));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":66,"author":{"gitID":"sarahnzx"},"content":"    @Subscribe"},{"lineNumber":67,"author":{"gitID":"sarahnzx"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":68,"author":{"gitID":"sarahnzx"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":69,"author":{"gitID":"sarahnzx"},"content":"        this.socialType \u003d event.getSocialType();"},{"lineNumber":70,"author":{"gitID":"sarahnzx"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":71,"author":{"gitID":"sarahnzx"},"content":"        PersonCard currentSelected \u003d personListView.getSelectionModel().getSelectedItem();"},{"lineNumber":72,"author":{"gitID":"sarahnzx"},"content":"        raise(new PersonPanelSelectionChangedEvent(currentSelected, socialType));"},{"lineNumber":73,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":75,"author":{"gitID":"sarahnzx"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"sarahnzx"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":77,"author":{"gitID":"sarahnzx"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"sarahnzx"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":79,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":80,"author":{"gitID":"sarahnzx"},"content":"        @Override"},{"lineNumber":81,"author":{"gitID":"sarahnzx"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":82,"author":{"gitID":"sarahnzx"},"content":"            super.updateItem(person, empty);"},{"lineNumber":83,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":84,"author":{"gitID":"sarahnzx"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":85,"author":{"gitID":"sarahnzx"},"content":"                setGraphic(null);"},{"lineNumber":86,"author":{"gitID":"sarahnzx"},"content":"                setText(null);"},{"lineNumber":87,"author":{"gitID":"sarahnzx"},"content":"            } else {"},{"lineNumber":88,"author":{"gitID":"sarahnzx"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":89,"author":{"gitID":"sarahnzx"},"content":"            }"},{"lineNumber":90,"author":{"gitID":"sarahnzx"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":93,"author":{"gitID":"sarahnzx"},"content":"}"}],"authorContributionMap":{"sarahnzx":31,"-":62}},{"path":"src/main/java/seedu/address/ui/UiFont.java","lines":[{"lineNumber":1,"author":{"gitID":"KeithSOC"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":3,"author":{"gitID":"KeithSOC"},"content":"import javafx.scene.text.Font;"},{"lineNumber":4,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"KeithSOC"},"content":" * A singleton class that manages the loading of custom fonts and embedding it into the application"},{"lineNumber":8,"author":{"gitID":"KeithSOC"},"content":" * so that typography will be consistent on different platforms e.g. Windows, macOS, etc."},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"public class UiFont {"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"    /** Resource folder where font files are stored. */"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"    private static final String FONTS_FILE_FOLDER \u003d \"/fonts/\";"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"    /** List of all the custom fonts */"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":"    private static final String[] fontList \u003d {"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":"        \"OpenSans-Light.ttf\", \"SegoeUI.ttf\", \"SegoeUI-Bold.ttf\", \"SegoeUI-Light.ttf\", \"SegoeUI-Semibold.ttf\""},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":"    };"},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"    private static UiFont instance;"},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"    private UiFont() {"},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"        // Prevents any other class from instantiating"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"     * @return instance of UiFont"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"    public static UiFont getInstance() {"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"        if (instance \u003d\u003d null) {"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"            instance \u003d new UiFont();"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"        return instance;"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"     * Load in all the fonts specified in fontList String array."},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"    public void embedFonts() {"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"        for (String font : fontList) {"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"            Font.loadFont(getClass().getResourceAsStream(FONTS_FILE_FOLDER + font), 10);"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"KeithSOC":46}},{"path":"src/test/java/seedu/address/model/person/TagsContainKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":" * Contains unit tests for {@code TagsContainKeywordsPredicate}."},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"public class TagsContainKeywordsPredicateTest {"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"        TagsContainKeywordsPredicate firstPredicate \u003d new TagsContainKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"        TagsContainKeywordsPredicate secondPredicate \u003d new TagsContainKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"        // same values -\u003e returns true"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        TagsContainKeywordsPredicate firstPredicateCopy \u003d new TagsContainKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"        // different person -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"    public void test_tagsContainKeywords_returnsTrue() {"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"        // One keyword"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        TagsContainKeywordsPredicate predicate \u003d new TagsContainKeywordsPredicate(Collections.singletonList(\"friend\"));"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").withTags(\"friend\").build()));"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        predicate \u003d new TagsContainKeywordsPredicate(Arrays.asList(\"friend\", \"colleague\"));"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").withTags(\"friend\", \"colleague\").build()));"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"        predicate \u003d new TagsContainKeywordsPredicate(Arrays.asList(\"friend\", \"colleague\"));"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").withTags(\"friend\").build()));"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"        predicate \u003d new TagsContainKeywordsPredicate(Arrays.asList(\"fRiEnD\", \"coLleaGue\"));"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").withTags(\"friend\", \"colleague\").build()));"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"    public void test_tagsDoNotContainKeywords_returnsFalse() {"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"        // Zero keywords"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"        TagsContainKeywordsPredicate predicate \u003d new TagsContainKeywordsPredicate(Collections.emptyList());"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"        // Non-matching keyword"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"        predicate \u003d new TagsContainKeywordsPredicate(Arrays.asList(\"family\"));"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withTags(\"friend\").build()));"},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":61,"-":13}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"KeithSOC"},"content":"import java.awt.Color;"},{"lineNumber":4,"author":{"gitID":"KeithSOC"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":"import java.util.Random;"},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":"import javafx.scene.paint.Paint;"},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":"import javafx.scene.text.Text;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"    private static HashMap\u003cString, String\u003e personColors \u003d new HashMap\u003c\u003e();"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"    private static HashMap\u003cString, String\u003e tagColors \u003d new HashMap\u003c\u003e();"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"    private static Random random \u003d new Random();"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"    private static final String defaultThemeTagColor \u003d \"#fc4465\";"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"    private static final double GOLDEN_RATIO \u003d 0.618033988749895;"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public final ReadOnlyPerson person;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"    private StackPane displayPhotoStackPane;"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"    private ImageView displayPhotoImageView;"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":"    private ImageView favoriteImageView;"},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"    private VBox socialInfos;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public PersonCard(ReadOnlyPerson person, int displayedIndex) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"        initDisplayPhoto(person);"},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"        initFavorite(person);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":"        initSocialInfos(person);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        bindListeners(person);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":83,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"KeithSOC"},"content":"     * Generates a random pastel color for display photos."},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":"     * @return String containing hex value of the color."},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":"    private String generateRandomPastelColor() {"},{"lineNumber":88,"author":{"gitID":"KeithSOC"},"content":"        int red \u003d random.nextInt(256);"},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":"        int green \u003d random.nextInt(256);"},{"lineNumber":90,"author":{"gitID":"KeithSOC"},"content":"        int blue \u003d random.nextInt(256);"},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":92,"author":{"gitID":"KeithSOC"},"content":"        Color mixer \u003d new Color(235, 235, 235);"},{"lineNumber":93,"author":{"gitID":"KeithSOC"},"content":"        red \u003d (red + mixer.getRed()) / 2;"},{"lineNumber":94,"author":{"gitID":"KeithSOC"},"content":"        green \u003d (green + mixer.getGreen()) / 2;"},{"lineNumber":95,"author":{"gitID":"KeithSOC"},"content":"        blue \u003d (blue + mixer.getBlue()) / 2;"},{"lineNumber":96,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":97,"author":{"gitID":"KeithSOC"},"content":"        Color result \u003d new Color(red, green, blue);"},{"lineNumber":98,"author":{"gitID":"KeithSOC"},"content":"        return String.format(\"#%02x%02x%02x\", result.getRed(), result.getGreen(), result.getBlue());"},{"lineNumber":99,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":101,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"KeithSOC"},"content":"     * Generates a random bright color (using golden ratio for even color distribution) for tag labels."},{"lineNumber":103,"author":{"gitID":"KeithSOC"},"content":"     * @return String containing hex value of the color."},{"lineNumber":104,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"KeithSOC"},"content":"    private String generateRandomColor() {"},{"lineNumber":106,"author":{"gitID":"KeithSOC"},"content":"        float randomHue \u003d random.nextFloat();"},{"lineNumber":107,"author":{"gitID":"KeithSOC"},"content":"        randomHue +\u003d GOLDEN_RATIO;"},{"lineNumber":108,"author":{"gitID":"KeithSOC"},"content":"        randomHue \u003d randomHue % 1;"},{"lineNumber":109,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":110,"author":{"gitID":"KeithSOC"},"content":"        Color result \u003d Color.getHSBColor(randomHue, 0.5f, 0.85f);"},{"lineNumber":111,"author":{"gitID":"KeithSOC"},"content":"        return String.format(\"#%02x%02x%02x\", result.getRed(), result.getGreen(), result.getBlue());"},{"lineNumber":112,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":114,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"KeithSOC"},"content":"     * Binds a display photo background with a random pastel color and store it into personColors HashMap."},{"lineNumber":116,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"KeithSOC"},"content":"    private String getColorForPerson(String name) {"},{"lineNumber":118,"author":{"gitID":"KeithSOC"},"content":"        if (!personColors.containsKey(name)) {"},{"lineNumber":119,"author":{"gitID":"KeithSOC"},"content":"            personColors.put(name, generateRandomPastelColor());"},{"lineNumber":120,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"KeithSOC"},"content":"        return personColors.get(name);"},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":124,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":125,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"KeithSOC"},"content":"     * Binds a tag label with a specific or random color and store it into tagColors HashMap."},{"lineNumber":127,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"KeithSOC"},"content":"    private String getColorForTag(String tagValue) {"},{"lineNumber":129,"author":{"gitID":"KeithSOC"},"content":"        if (!tagColors.containsKey(tagValue)) {"},{"lineNumber":130,"author":{"gitID":"KeithSOC"},"content":"            if (tagValue.equalsIgnoreCase(\"family\")) {"},{"lineNumber":131,"author":{"gitID":"KeithSOC"},"content":"                tagColors.put(tagValue, defaultThemeTagColor); // Assign a default value for \"family\" tags"},{"lineNumber":132,"author":{"gitID":"KeithSOC"},"content":"            } else {"},{"lineNumber":133,"author":{"gitID":"KeithSOC"},"content":"                tagColors.put(tagValue, generateRandomColor());"},{"lineNumber":134,"author":{"gitID":"KeithSOC"},"content":"            }"},{"lineNumber":135,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"KeithSOC"},"content":"        return tagColors.get(tagValue);"},{"lineNumber":137,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":139,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * so that they will be notified of any changes."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void bindListeners(ReadOnlyPerson person) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        name.textProperty().bind(Bindings.convert(person.nameProperty()));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        address.textProperty().bind(Bindings.convert(person.addressProperty()));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        email.textProperty().bind(Bindings.convert(person.emailProperty()));"},{"lineNumber":149,"author":{"gitID":"KeithSOC"},"content":"        person.favoriteProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":150,"author":{"gitID":"KeithSOC"},"content":"            favoriteImageView.setId(\"favoriteImageView\");"},{"lineNumber":151,"author":{"gitID":"KeithSOC"},"content":"            initFavorite(person);"},{"lineNumber":152,"author":{"gitID":"KeithSOC"},"content":"        });"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        person.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            tags.getChildren().clear();"},{"lineNumber":155,"author":{"gitID":"KeithSOC"},"content":"            initTags(person);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":157,"author":{"gitID":"marvinchin"},"content":"        person.socialInfoProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":158,"author":{"gitID":"marvinchin"},"content":"            socialInfos.getChildren().clear();"},{"lineNumber":159,"author":{"gitID":"marvinchin"},"content":"            initSocialInfos(person);"},{"lineNumber":160,"author":{"gitID":"marvinchin"},"content":"        });"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":164,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"KeithSOC"},"content":"     * Adds a display photo for each {@code person}."},{"lineNumber":166,"author":{"gitID":"KeithSOC"},"content":"     * If {@code person} has a non-null display photo field, set ImageView to an image of user\u0027s choice."},{"lineNumber":167,"author":{"gitID":"KeithSOC"},"content":"     * If {@code person} has a null display photo field, set ImageView to a colored thumbnail with name initials."},{"lineNumber":168,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"KeithSOC"},"content":"    private void initDisplayPhoto(ReadOnlyPerson person) {"},{"lineNumber":170,"author":{"gitID":"KeithSOC"},"content":"        // Round display photo"},{"lineNumber":171,"author":{"gitID":"KeithSOC"},"content":"        double value \u003d displayPhotoImageView.getFitWidth() / 2;"},{"lineNumber":172,"author":{"gitID":"KeithSOC"},"content":"        Circle clip \u003d new Circle(value, value, value);"},{"lineNumber":173,"author":{"gitID":"KeithSOC"},"content":"        displayPhotoImageView.setClip(clip);"},{"lineNumber":174,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":175,"author":{"gitID":"KeithSOC"},"content":"        if (person.getDisplayPhoto().value !\u003d null) {"},{"lineNumber":176,"author":{"gitID":"KeithSOC"},"content":"            // Set image to user\u0027s choice"},{"lineNumber":177,"author":{"gitID":"KeithSOC"},"content":"            displayPhotoImageView.setImage(new Image(person.getDisplayPhoto().getAbsoluteFilePath()));"},{"lineNumber":178,"author":{"gitID":"KeithSOC"},"content":"        } else {"},{"lineNumber":179,"author":{"gitID":"KeithSOC"},"content":"            // Add background circle with a random pastel color"},{"lineNumber":180,"author":{"gitID":"KeithSOC"},"content":"            String nameOfPerson \u003d person.getName().toString().trim();"},{"lineNumber":181,"author":{"gitID":"KeithSOC"},"content":"            Circle backgroundCircle \u003d new Circle(value);"},{"lineNumber":182,"author":{"gitID":"KeithSOC"},"content":"            backgroundCircle.setFill(Paint.valueOf(getColorForPerson(nameOfPerson)));"},{"lineNumber":183,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":184,"author":{"gitID":"KeithSOC"},"content":"            // Add text"},{"lineNumber":185,"author":{"gitID":"KeithSOC"},"content":"            Text personInitialsText \u003d new Text(extractInitials(nameOfPerson));"},{"lineNumber":186,"author":{"gitID":"KeithSOC"},"content":"            personInitialsText.setFill(Paint.valueOf(\"white\"));"},{"lineNumber":187,"author":{"gitID":"KeithSOC"},"content":"            displayPhotoStackPane.getChildren().addAll(backgroundCircle, personInitialsText);"},{"lineNumber":188,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":191,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"KeithSOC"},"content":"     * Extracts the initials from the name of the given {@code name}."},{"lineNumber":193,"author":{"gitID":"KeithSOC"},"content":"     * Extract only one initial if the name contains a single word;"},{"lineNumber":194,"author":{"gitID":"KeithSOC"},"content":"     * Extract two initials if the name contains more than one word."},{"lineNumber":195,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"KeithSOC"},"content":"    private String extractInitials (String name) {"},{"lineNumber":197,"author":{"gitID":"KeithSOC"},"content":"        int noOfInitials \u003d 1;"},{"lineNumber":198,"author":{"gitID":"KeithSOC"},"content":"        if (name.split(\"\\\\s+\").length \u003e 1) {"},{"lineNumber":199,"author":{"gitID":"KeithSOC"},"content":"            noOfInitials \u003d 2;"},{"lineNumber":200,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"KeithSOC"},"content":"        return name.replaceAll(\"(?\u003c\u003d\\\\w)\\\\w+(?\u003d\\\\s)\\\\s+\", \"\").substring(0, noOfInitials);"},{"lineNumber":202,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":204,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"KeithSOC"},"content":"     * Adds a star metaphor icon for each favorite {@code person}"},{"lineNumber":206,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"KeithSOC"},"content":"    private void initFavorite(ReadOnlyPerson person) {"},{"lineNumber":208,"author":{"gitID":"KeithSOC"},"content":"        if (person.getFavorite().isFavorite()) {"},{"lineNumber":209,"author":{"gitID":"KeithSOC"},"content":"            favoriteImageView.setId(\"favorite\");"},{"lineNumber":210,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":213,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":214,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"KeithSOC"},"content":"     * Creates a tag label for each {@code Person} and assign a color to the style of each tag label."},{"lineNumber":216,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    private void initTags(ReadOnlyPerson person) {"},{"lineNumber":218,"author":{"gitID":"KeithSOC"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":219,"author":{"gitID":"KeithSOC"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":220,"author":{"gitID":"KeithSOC"},"content":"            tagLabel.setStyle(\"-fx-background-color: \" + getColorForTag(tag.tagName));"},{"lineNumber":221,"author":{"gitID":"KeithSOC"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":222,"author":{"gitID":"KeithSOC"},"content":"        });"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":226,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"marvinchin"},"content":"     * Creates labels for each {@code SocialInfo} belonging to a {@code Person}."},{"lineNumber":228,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"marvinchin"},"content":"    private void initSocialInfos(ReadOnlyPerson person) {"},{"lineNumber":230,"author":{"gitID":"marvinchin"},"content":"        person.getSocialInfos().forEach(socialInfo -\u003e {"},{"lineNumber":231,"author":{"gitID":"marvinchin"},"content":"            String labelText \u003d socialInfo.getSocialType() + \": \" + socialInfo.getUsername();"},{"lineNumber":232,"author":{"gitID":"marvinchin"},"content":"            Label socialLabel \u003d new Label(labelText);"},{"lineNumber":233,"author":{"gitID":"marvinchin"},"content":"            socialLabel.getStyleClass().add(\"cell_small_label\");"},{"lineNumber":234,"author":{"gitID":"marvinchin"},"content":"            socialInfos.getChildren().add(socialLabel);"},{"lineNumber":235,"author":{"gitID":"marvinchin"},"content":"        });"},{"lineNumber":236,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":238,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":254,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":22,"KeithSOC":150,"-":84}},{"path":"src/main/java/seedu/address/commons/core/GuiSettings.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.awt.Point;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.Serializable;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A Serializable class that contains the GUI settings."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class GuiSettings implements Serializable {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"    private static final double DEFAULT_HEIGHT \u003d 835;"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"    private static final double DEFAULT_WIDTH \u003d 1100;"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private Double windowWidth;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private Double windowHeight;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private Point windowCoordinates;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public GuiSettings() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.windowWidth \u003d DEFAULT_WIDTH;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.windowHeight \u003d DEFAULT_HEIGHT;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.windowCoordinates \u003d null; // null represent no coordinates"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.windowWidth \u003d windowWidth;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.windowHeight \u003d windowHeight;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.windowCoordinates \u003d new Point(xPosition, yPosition);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public Double getWindowWidth() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return windowWidth;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Double getWindowHeight() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return windowHeight;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Point getWindowCoordinates() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return windowCoordinates;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!(other instanceof GuiSettings)) { // this handles null as well."},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return Objects.equals(windowWidth, o.windowWidth)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":4,"-":71}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"    private String appTitle \u003d \"KayPoh\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { // this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":1,"-":71}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"alexfoodw"},"content":"    //@@author alexfoodw"},{"lineNumber":12,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_INVALID_URL \u003d \"Invalid URL! \\n%1$s\";"},{"lineNumber":13,"author":{"gitID":"alexfoodw"},"content":"    //@@author"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX_MULTI \u003d \"One or more indexes provided is invalid\";"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":3,"KeithSOC":3,"-":13}},{"path":"src/main/java/seedu/address/commons/core/index/Index.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core.index;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Represents a zero-based or one-based index."},{"lineNumber":5,"author":{"gitID":"-"},"content":" *"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"public class Index implements Comparable\u003cIndex\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private int zeroBasedIndex;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * {@link Index#fromOneBased(int)}."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private Index(int zeroBasedIndex) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        if (zeroBasedIndex \u003c 0) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public int getZeroBased() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return zeroBasedIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public int getOneBased() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return zeroBasedIndex + 1;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Creates a new {@code Index} using a zero-based index."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new Index(zeroBasedIndex);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Creates a new {@code Index} using a one-based index."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return new Index(oneBasedIndex - 1);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"     * Implement comparable for usage such as {@code Collections.max}"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"    public int compareTo(Index idx) {"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"        return Double.compare(getOneBased(), idx.getOneBased());"},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                || (other instanceof Index // instanceof handles nulls"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":11,"-":53}},{"path":"src/main/java/seedu/address/ui/UiTheme.java","lines":[{"lineNumber":1,"author":{"gitID":"KeithSOC"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OPTION;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":7,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":8,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":" * A singleton class that manages the changing of scene graph\u0027s stylesheets at runtime."},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"public class UiTheme {"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"    public static final String THEME_DAY \u003d \"view/ThemeDay.css\";"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"    public static final String THEME_NIGHT \u003d \"view/ThemeNight.css\";"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"    public static final String THEME_DAY_EXTENSIONS \u003d \"view/ThemeDayExtensions.css\";"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":"    public static final String THEME_NIGHT_EXTENSIONS \u003d \"view/ThemeNightExtensions.css\";"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":"    private static UiTheme instance;"},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":"    private Scene scene;"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"    private UiTheme() {"},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"        // Prevents any other class from instantiating"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"     * @return instance of UiTheme"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"    public static UiTheme getInstance() {"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"        if (instance \u003d\u003d null) {"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"            instance \u003d new UiTheme();"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"        return instance;"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"     * Sets the root scene graph obtained from MainWindow."},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"     * @param scene"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"    public void setScene(Scene scene) {"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"        this.scene \u003d scene;"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"     * Sets the browser panel obtained from MainWindow right after its instance is created."},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"     * @param browserPanel"},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"    public void setBrowserPanel(BrowserPanel browserPanel) {"},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"        this.browserPanel \u003d browserPanel;"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"     * Changes the theme based on user input and"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"     * loads the corresponding default html page."},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"     * @param option"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":"    public void changeTheme(String option) {"},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":"        scene.getStylesheets().clear();"},{"lineNumber":59,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"        if (option.equals(PREFIX_OPTION + ThemeCommand.COMMAND_OPTION_DAY)) {"},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":"            scene.getStylesheets().setAll(THEME_DAY, THEME_DAY_EXTENSIONS);"},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":"            browserPanel.loadDefaultPage(scene);"},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"        } else {"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"            scene.getStylesheets().setAll(THEME_NIGHT, THEME_NIGHT_EXTENSIONS);"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":"            browserPanel.loadDefaultPage(scene);"},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":69,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"marvinchin":1,"KeithSOC":67,"-":1}},{"path":"src/main/java/seedu/address/commons/events/ui/PersonPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a selection change in the Person List Panel"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class PersonPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final PersonCard newSelection;"},{"lineNumber":13,"author":{"gitID":"sarahnzx"},"content":"    private String socialType \u003d null;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public PersonPanelSelectionChangedEvent(PersonCard newSelection) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":20,"author":{"gitID":"sarahnzx"},"content":"    public PersonPanelSelectionChangedEvent(PersonCard newSelection, String socialType) {"},{"lineNumber":21,"author":{"gitID":"sarahnzx"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":22,"author":{"gitID":"sarahnzx"},"content":"        this.socialType \u003d socialType;"},{"lineNumber":23,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"sarahnzx"},"content":"    //@@author"},{"lineNumber":25,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public PersonCard getNewSelection() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return newSelection;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":35,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":36,"author":{"gitID":"sarahnzx"},"content":"    public String getSocialType() {"},{"lineNumber":37,"author":{"gitID":"sarahnzx"},"content":"        return socialType;"},{"lineNumber":38,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"sarahnzx"},"content":"}"}],"authorContributionMap":{"sarahnzx":14,"-":25}},{"path":"src/main/java/seedu/address/ui/UiResize.java","lines":[{"lineNumber":1,"author":{"gitID":"KeithSOC"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":3,"author":{"gitID":"KeithSOC"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"KeithSOC"},"content":"import javafx.event.EventHandler;"},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":"import javafx.event.EventType;"},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":"import javafx.scene.Cursor;"},{"lineNumber":7,"author":{"gitID":"KeithSOC"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.Parent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"import javafx.scene.input.MouseEvent;"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":13,"content":"//@@author keithsoc-reused"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":" * Manages resizing of UI Window by adding mouse event listeners to each UI component."},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":" * To be used when JavaFX StageStyle is set to TRANSPARENT or UNDECORATED."},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":" *"},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":" * By: Evgenii Kanivets and Alexander.Berg"},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":" * Adapted From: https://stackoverflow.com/questions/19455059/allow-user-to-resize-an-undecorated-stage"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":"public class UiResize {"},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"     * Registers an event handler for the Scene in the specified Stage (top-level UI container)"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"     * @param stage"},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"    public static void enableResizableWindow(Stage stage,"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"                                             double minWidth,"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"                                             double minHeight,"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"                                             double maxWidth,"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"                                             double maxHeight) {"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"        ResizeHandler resizeHandler \u003d new ResizeHandler(stage);"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"        stage.getScene().addEventHandler(MouseEvent.MOUSE_MOVED, resizeHandler);"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"        stage.getScene().addEventHandler(MouseEvent.MOUSE_PRESSED, resizeHandler);"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":"        stage.getScene().addEventHandler(MouseEvent.MOUSE_DRAGGED, resizeHandler);"},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"        stage.getScene().addEventHandler(MouseEvent.MOUSE_EXITED, resizeHandler);"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"        stage.getScene().addEventHandler(MouseEvent.MOUSE_EXITED_TARGET, resizeHandler);"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"        resizeHandler.setMinWidth(minWidth);"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"        resizeHandler.setMinHeight(minHeight);"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"        resizeHandler.setMaxWidth(maxWidth);"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"        resizeHandler.setMaxHeight(maxHeight);"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"        ObservableList\u003cNode\u003e children \u003d stage.getScene().getRoot().getChildrenUnmodifiable();"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"        for (Node child : children) {"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"            addHandlerToNodes(child, resizeHandler);"},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"     * Registers an event handler for each UI node in the hierarchy"},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"     * @param node"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"     * @param handler"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"    private static void addHandlerToNodes(Node node, EventHandler\u003cMouseEvent\u003e handler) {"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"        node.addEventHandler(MouseEvent.MOUSE_MOVED, handler);"},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":"        node.addEventHandler(MouseEvent.MOUSE_PRESSED, handler);"},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":"        node.addEventHandler(MouseEvent.MOUSE_DRAGGED, handler);"},{"lineNumber":59,"author":{"gitID":"KeithSOC"},"content":"        node.addEventHandler(MouseEvent.MOUSE_EXITED, handler);"},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"        node.addEventHandler(MouseEvent.MOUSE_EXITED_TARGET, handler);"},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":"        if (node instanceof Parent) {"},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":"            Parent parent \u003d (Parent) node;"},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"            ObservableList\u003cNode\u003e children \u003d parent.getChildrenUnmodifiable();"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"            for (Node child : children) {"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":"                addHandlerToNodes(child, handler);"},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":70,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"KeithSOC"},"content":"     * Configures mouse event handler"},{"lineNumber":72,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"KeithSOC"},"content":"    static class ResizeHandler implements EventHandler\u003cMouseEvent\u003e {"},{"lineNumber":74,"author":{"gitID":"KeithSOC"},"content":"        private Stage stage;"},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"        private Cursor cursorEvent \u003d Cursor.DEFAULT;"},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"        private int border \u003d 4;"},{"lineNumber":77,"author":{"gitID":"KeithSOC"},"content":"        private double startX \u003d 0;"},{"lineNumber":78,"author":{"gitID":"KeithSOC"},"content":"        private double startY \u003d 0;"},{"lineNumber":79,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":"        // Max and min sizes for controlled stage"},{"lineNumber":81,"author":{"gitID":"KeithSOC"},"content":"        private double minWidth;"},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":"        private double maxWidth;"},{"lineNumber":83,"author":{"gitID":"KeithSOC"},"content":"        private double minHeight;"},{"lineNumber":84,"author":{"gitID":"KeithSOC"},"content":"        private double maxHeight;"},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":"        public ResizeHandler(Stage stage) {"},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":"            this.stage \u003d stage;"},{"lineNumber":88,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":90,"author":{"gitID":"KeithSOC"},"content":"        public void setMinWidth(double minWidth) {"},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"            this.minWidth \u003d minWidth;"},{"lineNumber":92,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":94,"author":{"gitID":"KeithSOC"},"content":"        public void setMinHeight(double minHeight) {"},{"lineNumber":95,"author":{"gitID":"KeithSOC"},"content":"            this.minHeight \u003d minHeight;"},{"lineNumber":96,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":98,"author":{"gitID":"KeithSOC"},"content":"        public void setMaxWidth(double maxWidth) {"},{"lineNumber":99,"author":{"gitID":"KeithSOC"},"content":"            this.maxWidth \u003d maxWidth;"},{"lineNumber":100,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":102,"author":{"gitID":"KeithSOC"},"content":"        public void setMaxHeight(double maxHeight) {"},{"lineNumber":103,"author":{"gitID":"KeithSOC"},"content":"            this.maxHeight \u003d maxHeight;"},{"lineNumber":104,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":106,"author":{"gitID":"KeithSOC"},"content":"        private void setStageWidth(double width) {"},{"lineNumber":107,"author":{"gitID":"KeithSOC"},"content":"            width \u003d Math.min(width, maxWidth);"},{"lineNumber":108,"author":{"gitID":"KeithSOC"},"content":"            width \u003d Math.max(width, minWidth);"},{"lineNumber":109,"author":{"gitID":"KeithSOC"},"content":"            stage.setWidth(width);"},{"lineNumber":110,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":112,"author":{"gitID":"KeithSOC"},"content":"        private void setStageHeight(double height) {"},{"lineNumber":113,"author":{"gitID":"KeithSOC"},"content":"            height \u003d Math.min(height, maxHeight);"},{"lineNumber":114,"author":{"gitID":"KeithSOC"},"content":"            height \u003d Math.max(height, minHeight);"},{"lineNumber":115,"author":{"gitID":"KeithSOC"},"content":"            stage.setHeight(height);"},{"lineNumber":116,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":118,"author":{"gitID":"KeithSOC"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"KeithSOC"},"content":"        public void handle(MouseEvent mouseEvent) {"},{"lineNumber":120,"author":{"gitID":"KeithSOC"},"content":"            EventType\u003c? extends MouseEvent\u003e mouseEventType \u003d mouseEvent.getEventType();"},{"lineNumber":121,"author":{"gitID":"KeithSOC"},"content":"            Scene scene \u003d stage.getScene();"},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":123,"author":{"gitID":"KeithSOC"},"content":"            double mouseEventX \u003d mouseEvent.getSceneX();"},{"lineNumber":124,"author":{"gitID":"KeithSOC"},"content":"            double mouseEventY \u003d mouseEvent.getSceneY();"},{"lineNumber":125,"author":{"gitID":"KeithSOC"},"content":"            double sceneWidth \u003d scene.getWidth();"},{"lineNumber":126,"author":{"gitID":"KeithSOC"},"content":"            double sceneHeight \u003d scene.getHeight();"},{"lineNumber":127,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":128,"author":{"gitID":"KeithSOC"},"content":"            if (MouseEvent.MOUSE_MOVED.equals(mouseEventType)) {"},{"lineNumber":129,"author":{"gitID":"KeithSOC"},"content":"                if (mouseEventX \u003c border \u0026\u0026 mouseEventY \u003c border) {"},{"lineNumber":130,"author":{"gitID":"KeithSOC"},"content":"                    cursorEvent \u003d Cursor.NW_RESIZE;"},{"lineNumber":131,"author":{"gitID":"KeithSOC"},"content":"                } else if (mouseEventX \u003c border \u0026\u0026 mouseEventY \u003e sceneHeight - border) {"},{"lineNumber":132,"author":{"gitID":"KeithSOC"},"content":"                    cursorEvent \u003d Cursor.SW_RESIZE;"},{"lineNumber":133,"author":{"gitID":"KeithSOC"},"content":"                } else if (mouseEventX \u003e sceneWidth - border \u0026\u0026 mouseEventY \u003c border) {"},{"lineNumber":134,"author":{"gitID":"KeithSOC"},"content":"                    cursorEvent \u003d Cursor.NE_RESIZE;"},{"lineNumber":135,"author":{"gitID":"KeithSOC"},"content":"                } else if (mouseEventX \u003e sceneWidth - border \u0026\u0026 mouseEventY \u003e sceneHeight - border) {"},{"lineNumber":136,"author":{"gitID":"KeithSOC"},"content":"                    cursorEvent \u003d Cursor.SE_RESIZE;"},{"lineNumber":137,"author":{"gitID":"KeithSOC"},"content":"                } else if (mouseEventX \u003c border) {"},{"lineNumber":138,"author":{"gitID":"KeithSOC"},"content":"                    cursorEvent \u003d Cursor.W_RESIZE;"},{"lineNumber":139,"author":{"gitID":"KeithSOC"},"content":"                } else if (mouseEventX \u003e sceneWidth - border) {"},{"lineNumber":140,"author":{"gitID":"KeithSOC"},"content":"                    cursorEvent \u003d Cursor.E_RESIZE;"},{"lineNumber":141,"author":{"gitID":"KeithSOC"},"content":"                } else if (mouseEventY \u003c border) {"},{"lineNumber":142,"author":{"gitID":"KeithSOC"},"content":"                    cursorEvent \u003d Cursor.N_RESIZE;"},{"lineNumber":143,"author":{"gitID":"KeithSOC"},"content":"                } else if (mouseEventY \u003e sceneHeight - border) {"},{"lineNumber":144,"author":{"gitID":"KeithSOC"},"content":"                    cursorEvent \u003d Cursor.S_RESIZE;"},{"lineNumber":145,"author":{"gitID":"KeithSOC"},"content":"                } else {"},{"lineNumber":146,"author":{"gitID":"KeithSOC"},"content":"                    cursorEvent \u003d Cursor.DEFAULT;"},{"lineNumber":147,"author":{"gitID":"KeithSOC"},"content":"                }"},{"lineNumber":148,"author":{"gitID":"KeithSOC"},"content":"                scene.setCursor(cursorEvent);"},{"lineNumber":149,"author":{"gitID":"KeithSOC"},"content":"            } else if (MouseEvent.MOUSE_EXITED.equals(mouseEventType)"},{"lineNumber":150,"author":{"gitID":"KeithSOC"},"content":"                    || MouseEvent.MOUSE_EXITED_TARGET.equals(mouseEventType)) {"},{"lineNumber":151,"author":{"gitID":"KeithSOC"},"content":"                scene.setCursor(Cursor.DEFAULT);"},{"lineNumber":152,"author":{"gitID":"KeithSOC"},"content":"            } else if (MouseEvent.MOUSE_PRESSED.equals(mouseEventType)) {"},{"lineNumber":153,"author":{"gitID":"KeithSOC"},"content":"                startX \u003d stage.getWidth() - mouseEventX;"},{"lineNumber":154,"author":{"gitID":"KeithSOC"},"content":"                startY \u003d stage.getHeight() - mouseEventY;"},{"lineNumber":155,"author":{"gitID":"KeithSOC"},"content":"            } else if (MouseEvent.MOUSE_DRAGGED.equals(mouseEventType)) {"},{"lineNumber":156,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":157,"author":{"gitID":"KeithSOC"},"content":"                if (!Cursor.DEFAULT.equals(cursorEvent)) {"},{"lineNumber":158,"author":{"gitID":"KeithSOC"},"content":"                    if (!Cursor.W_RESIZE.equals(cursorEvent) \u0026\u0026 !Cursor.E_RESIZE.equals(cursorEvent)) {"},{"lineNumber":159,"author":{"gitID":"KeithSOC"},"content":"                        double minHeight \u003d stage.getMinHeight() \u003e (border * 2) ? stage.getMinHeight() : (border * 2);"},{"lineNumber":160,"author":{"gitID":"KeithSOC"},"content":"                        if (Cursor.NW_RESIZE.equals(cursorEvent) || Cursor.N_RESIZE.equals(cursorEvent)"},{"lineNumber":161,"author":{"gitID":"KeithSOC"},"content":"                                || Cursor.NE_RESIZE.equals(cursorEvent)) {"},{"lineNumber":162,"author":{"gitID":"KeithSOC"},"content":"                            if (stage.getHeight() \u003e minHeight || mouseEventY \u003c 0) {"},{"lineNumber":163,"author":{"gitID":"KeithSOC"},"content":"                                setStageHeight(stage.getY() - mouseEvent.getScreenY() + stage.getHeight());"},{"lineNumber":164,"author":{"gitID":"KeithSOC"},"content":"                                stage.setY(mouseEvent.getScreenY());"},{"lineNumber":165,"author":{"gitID":"KeithSOC"},"content":"                            }"},{"lineNumber":166,"author":{"gitID":"KeithSOC"},"content":"                        } else {"},{"lineNumber":167,"author":{"gitID":"KeithSOC"},"content":"                            if (stage.getHeight() \u003e minHeight || mouseEventY + startY - stage.getHeight() \u003e 0) {"},{"lineNumber":168,"author":{"gitID":"KeithSOC"},"content":"                                setStageHeight(mouseEventY + startY);"},{"lineNumber":169,"author":{"gitID":"KeithSOC"},"content":"                            }"},{"lineNumber":170,"author":{"gitID":"KeithSOC"},"content":"                        }"},{"lineNumber":171,"author":{"gitID":"KeithSOC"},"content":"                    }"},{"lineNumber":172,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":173,"author":{"gitID":"KeithSOC"},"content":"                    if (!Cursor.N_RESIZE.equals(cursorEvent) \u0026\u0026 !Cursor.S_RESIZE.equals(cursorEvent)) {"},{"lineNumber":174,"author":{"gitID":"KeithSOC"},"content":"                        double minWidth \u003d stage.getMinWidth() \u003e (border * 2) ? stage.getMinWidth() : (border * 2);"},{"lineNumber":175,"author":{"gitID":"KeithSOC"},"content":"                        if (Cursor.NW_RESIZE.equals(cursorEvent) || Cursor.W_RESIZE.equals(cursorEvent)"},{"lineNumber":176,"author":{"gitID":"KeithSOC"},"content":"                                || Cursor.SW_RESIZE.equals(cursorEvent)) {"},{"lineNumber":177,"author":{"gitID":"KeithSOC"},"content":"                            if (stage.getWidth() \u003e minWidth || mouseEventX \u003c 0) {"},{"lineNumber":178,"author":{"gitID":"KeithSOC"},"content":"                                setStageWidth(stage.getX() - mouseEvent.getScreenX() + stage.getWidth());"},{"lineNumber":179,"author":{"gitID":"KeithSOC"},"content":"                                stage.setX(mouseEvent.getScreenX());"},{"lineNumber":180,"author":{"gitID":"KeithSOC"},"content":"                            }"},{"lineNumber":181,"author":{"gitID":"KeithSOC"},"content":"                        } else {"},{"lineNumber":182,"author":{"gitID":"KeithSOC"},"content":"                            if (stage.getWidth() \u003e minWidth || mouseEventX + startX - stage.getWidth() \u003e 0) {"},{"lineNumber":183,"author":{"gitID":"KeithSOC"},"content":"                                setStageWidth(mouseEventX + startX);"},{"lineNumber":184,"author":{"gitID":"KeithSOC"},"content":"                            }"},{"lineNumber":185,"author":{"gitID":"KeithSOC"},"content":"                        }"},{"lineNumber":186,"author":{"gitID":"KeithSOC"},"content":"                    }"},{"lineNumber":187,"author":{"gitID":"KeithSOC"},"content":"                }"},{"lineNumber":188,"author":{"gitID":"KeithSOC"},"content":"            }"},{"lineNumber":189,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":192,"content":"//@@author"}],"authorContributionMap":{"null":2,"KeithSOC":188,"-":2}},{"path":"src/main/java/seedu/address/commons/core/ThemeSettings.java","lines":[{"lineNumber":1,"author":{"gitID":"KeithSOC"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.Serializable;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":7,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"KeithSOC"},"content":" * A Serializable class that contains the Theme settings."},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"public class ThemeSettings implements Serializable {"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"    private static final String DEFAULT_THEME \u003d \"view/ThemeDay.css\";"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"    private static final String DEFAULT_THEME_EXTENSIONS \u003d \"view/ThemeDayExtensions.css\";"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"    private String theme;"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":"    private String themeExtensions;"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":"    public ThemeSettings() {"},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":"        this.theme \u003d DEFAULT_THEME;"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"        this.themeExtensions \u003d DEFAULT_THEME_EXTENSIONS;"},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"    public ThemeSettings(String theme, String themeExtensions) {"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"        this.theme \u003d theme;"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"        this.themeExtensions \u003d themeExtensions;"},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"    public String getTheme() {"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"        return theme;"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"    public String getThemeExtensions() {"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"        return themeExtensions;"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"            return true;"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"        if (!(other instanceof ThemeSettings)) { // this handles null as well."},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"            return false;"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"        ThemeSettings o \u003d (ThemeSettings) other;"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"        return Objects.equals(theme, o.theme)"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"                \u0026\u0026 Objects.equals(themeExtensions, o.themeExtensions);"},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"    public int hashCode() {"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"        return Objects.hash(theme, themeExtensions);"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":"    public String toString() {"},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":59,"author":{"gitID":"KeithSOC"},"content":"        sb.append(\"Theme : \" + theme + \"\\n\");"},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"        sb.append(\"Theme Extensions : \" + themeExtensions);"},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":"        return sb.toString();"},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"//@@author"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":""}],"authorContributionMap":{"KeithSOC":62,"-":3}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Indicates a request to jump to the list of persons"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class JumpToListRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"sarahnzx"},"content":"    private String socialType \u003d null;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public JumpToListRequestEvent(Index targetIndex) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":19,"author":{"gitID":"sarahnzx"},"content":"    public JumpToListRequestEvent(Index targetIndex, String socialType) {"},{"lineNumber":20,"author":{"gitID":"sarahnzx"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":21,"author":{"gitID":"sarahnzx"},"content":"        this.socialType \u003d socialType;"},{"lineNumber":22,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"sarahnzx"},"content":"    //@@author"},{"lineNumber":24,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":31,"author":{"gitID":"sarahnzx"},"content":"    public String getSocialType() {"},{"lineNumber":32,"author":{"gitID":"sarahnzx"},"content":"        return this.socialType;"},{"lineNumber":33,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"sarahnzx"},"content":"    //@@author"},{"lineNumber":35,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahnzx":14,"-":22}},{"path":"src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"    public final boolean isError;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"    public NewResultAvailableEvent(String message, boolean isError) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"        this.isError \u003d isError;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":3,"-":20}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookAddCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"     * Completes the final step of FacebookAddCommand"},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"     * @param command The instance of the FacebookAddCommand"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"    void completeFacebookAddCommand(FacebookAddCommand command, String commandText) throws CommandException;"},{"lineNumber":29,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":7,"-":28}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DISPLAY_PHOTO;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FAV;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SOCIAL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.DisplayPhoto;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.SocialInfo;"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.UniqueSocialInfoList;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"                PREFIX_ADDRESS, PREFIX_FAV, PREFIX_DISPLAY_PHOTO, PREFIX_TAG, PREFIX_SOCIAL);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":51,"author":{"gitID":"sarahnzx"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getMultipleValues(PREFIX_PHONE)).get();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"            Favorite favorite \u003d new Favorite(false); // Allow favorite field to be optional by setting default value"},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"            if (ParserUtil.parseFavorite(argMultimap, PREFIX_FAV, null).isPresent()) {"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"                favorite \u003d new Favorite(true);"},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":"            DisplayPhoto displayPhoto \u003d new DisplayPhoto(null);"},{"lineNumber":59,"author":{"gitID":"KeithSOC"},"content":"            if (argMultimap.isPrefixPresent(PREFIX_DISPLAY_PHOTO)) {"},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"                displayPhoto \u003d ParserUtil.parseDisplayPhoto(argMultimap.getValue(PREFIX_DISPLAY_PHOTO)).get();"},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"            Set\u003cSocialInfo\u003e socialInfoSet \u003d ParserUtil.parseSocialInfos(argMultimap.getAllValues(PREFIX_SOCIAL));"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"            UniqueSocialInfoList uniqueSocialInfoList \u003d new UniqueSocialInfoList(socialInfoSet);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"            ReadOnlyPerson person \u003d new Person("},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"                    name, phone, email, address, favorite, displayPhoto, tagList, uniqueSocialInfoList);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahnzx":1,"marvinchin":7,"KeithSOC":14,"-":60}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** Prefixes mapped to their respective arguments**/"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns all values of {@code prefix}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":55,"author":{"gitID":"sarahnzx"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"sarahnzx"},"content":"     * Returns multiple values of {@code prefix}."},{"lineNumber":57,"author":{"gitID":"sarahnzx"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"sarahnzx"},"content":"    public Optional\u003cString\u003e getMultipleValues(Prefix prefix) {"},{"lineNumber":59,"author":{"gitID":"sarahnzx"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":60,"author":{"gitID":"sarahnzx"},"content":"        ArrayList\u003cString\u003e added \u003d new ArrayList\u003c\u003e();"},{"lineNumber":61,"author":{"gitID":"sarahnzx"},"content":"        String str \u003d \"\";"},{"lineNumber":62,"author":{"gitID":"sarahnzx"},"content":"        for (String v : values) {"},{"lineNumber":63,"author":{"gitID":"sarahnzx"},"content":"            if (!added.contains(v)) {"},{"lineNumber":64,"author":{"gitID":"sarahnzx"},"content":"                str +\u003d v + \"\\n\";"},{"lineNumber":65,"author":{"gitID":"sarahnzx"},"content":"                added.add(v);"},{"lineNumber":66,"author":{"gitID":"sarahnzx"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"sarahnzx"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"sarahnzx"},"content":"        if (!str.isEmpty()) {"},{"lineNumber":69,"author":{"gitID":"sarahnzx"},"content":"            str \u003d str.substring(0, str.length() - 1);"},{"lineNumber":70,"author":{"gitID":"sarahnzx"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"sarahnzx"},"content":"        return str.isEmpty() ? Optional.empty() : Optional.of(str);"},{"lineNumber":72,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"sarahnzx"},"content":"    //@@author"},{"lineNumber":74,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"KeithSOC"},"content":"     * Returns a boolean value that indicates whether a prefix is present in user input"},{"lineNumber":78,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"KeithSOC"},"content":"    public boolean isPrefixPresent(Prefix prefix) {"},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":"        return argMultimap.containsKey(prefix);"},{"lineNumber":81,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":83,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public String getPreamble() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahnzx":23,"KeithSOC":8,"-":60}},{"path":"src/main/java/seedu/address/commons/events/ui/BrowserUrlChangeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"alexfoodw"},"content":"//@@author alexfoodw"},{"lineNumber":6,"author":{"gitID":"alexfoodw"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"alexfoodw"},"content":" * Indicates a change in browser page"},{"lineNumber":8,"author":{"gitID":"alexfoodw"},"content":" */"},{"lineNumber":9,"author":{"gitID":"alexfoodw"},"content":"public class BrowserUrlChangeEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"alexfoodw"},"content":"    private String processType;"},{"lineNumber":11,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":12,"author":{"gitID":"alexfoodw"},"content":"    public BrowserUrlChangeEvent(String processType) {"},{"lineNumber":13,"author":{"gitID":"alexfoodw"},"content":"        this.processType \u003d processType;"},{"lineNumber":14,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":16,"author":{"gitID":"alexfoodw"},"content":"    public String getProcessType() {"},{"lineNumber":17,"author":{"gitID":"alexfoodw"},"content":"        return processType;"},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":20,"author":{"gitID":"alexfoodw"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"alexfoodw"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"}"}],"authorContributionMap":{"alexfoodw":20,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/ImportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":" * Parses input arguments and creates a new {@code ImportCommand}."},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"public class ImportCommandParser implements Parser {"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"     * Parses the given {@code String} of arguments in the context of the ImportCommand"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"     * and returns an ImportCommand object for execution."},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    public ImportCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"            throw new ParseException("},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"        return new ImportCommand(trimmedArgs);"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":22,"-":5}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"alexfoodw"},"content":"import java.io.StringWriter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"sarahnzx"},"content":"import java.util.Iterator;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"alexfoodw"},"content":"import javax.xml.transform.Transformer;"},{"lineNumber":8,"author":{"gitID":"alexfoodw"},"content":"import javax.xml.transform.TransformerException;"},{"lineNumber":9,"author":{"gitID":"alexfoodw"},"content":"import javax.xml.transform.TransformerFactory;"},{"lineNumber":10,"author":{"gitID":"alexfoodw"},"content":"import javax.xml.transform.dom.DOMSource;"},{"lineNumber":11,"author":{"gitID":"alexfoodw"},"content":"import javax.xml.transform.stream.StreamResult;"},{"lineNumber":12,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":13,"author":{"gitID":"alexfoodw"},"content":"import org.w3c.dom.Document;"},{"lineNumber":14,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":16,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":"import javafx.concurrent.Worker;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":"import javafx.scene.Scene;"},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"import javafx.scene.control.Label;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.commons.events.ui.BrowserUrlChangeEvent;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":29,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":30,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookAddAllFriendsCommand;"},{"lineNumber":31,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookAddCommand;"},{"lineNumber":32,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookConnectCommand;"},{"lineNumber":33,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookLinkCommand;"},{"lineNumber":34,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookPostCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":36,"author":{"gitID":"sarahnzx"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":38,"author":{"gitID":"sarahnzx"},"content":"import seedu.address.model.social.SocialInfo;"},{"lineNumber":39,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"    public static final String DEFAULT_PAGE_DAY \u003d \"defaultDay.html\";"},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"    public static final String DEFAULT_PAGE_NIGHT \u003d \"defaultNight.html\";"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/search?safe\u003doff\u0026q\u003d\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_SUFFIX \u003d \"\u0026cad\u003dh\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":53,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":54,"author":{"gitID":"alexfoodw"},"content":"    //@@author alexfoodw"},{"lineNumber":55,"author":{"gitID":"alexfoodw"},"content":"    private static String processType;"},{"lineNumber":56,"author":{"gitID":"alexfoodw"},"content":"    private static String trimmedArgs;"},{"lineNumber":57,"author":{"gitID":"alexfoodw"},"content":"    //@@author"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"alexfoodw"},"content":"    //@@author alexfoodw"},{"lineNumber":65,"author":{"gitID":"alexfoodw"},"content":"    private Logic logic;"},{"lineNumber":66,"author":{"gitID":"alexfoodw"},"content":"    private Label location;"},{"lineNumber":67,"author":{"gitID":"alexfoodw"},"content":"    //@@author"},{"lineNumber":68,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":69,"author":{"gitID":"KeithSOC"},"content":"    public BrowserPanel(Scene scene) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":73,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"        loadDefaultPage(scene);"},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":77,"author":{"gitID":"alexfoodw"},"content":"        FacebookConnectCommand.setWebEngine(browser.getEngine());"},{"lineNumber":78,"author":{"gitID":"alexfoodw"},"content":"        location \u003d new Label();"},{"lineNumber":79,"author":{"gitID":"alexfoodw"},"content":"        location.textProperty().bind(browser.getEngine().locationProperty());"},{"lineNumber":80,"author":{"gitID":"alexfoodw"},"content":"        setEventHandlerForBrowserUrlChangeEvent();"},{"lineNumber":81,"author":{"gitID":"alexfoodw"},"content":"        setEventHandlerForBrowserUrlLoadEvent();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void loadPersonPage(ReadOnlyPerson person) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        loadPage(GOOGLE_SEARCH_URL_PREFIX + person.getName().fullName.replaceAll(\" \", \"+\")"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"alexfoodw"},"content":"    //@@author alexfoodw"},{"lineNumber":95,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"alexfoodw"},"content":"     * Sets the current logic manager"},{"lineNumber":97,"author":{"gitID":"alexfoodw"},"content":"     * @param logic"},{"lineNumber":98,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"alexfoodw"},"content":"    public void setLogic(Logic logic) {"},{"lineNumber":100,"author":{"gitID":"alexfoodw"},"content":"        this.logic \u003d logic;"},{"lineNumber":101,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":103,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"alexfoodw"},"content":"     * Identifies which facebook command process is being executed"},{"lineNumber":105,"author":{"gitID":"alexfoodw"},"content":"     * @param type"},{"lineNumber":106,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"alexfoodw"},"content":"    public static void setProcessType(String type) {"},{"lineNumber":108,"author":{"gitID":"alexfoodw"},"content":"        processType \u003d type;"},{"lineNumber":109,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":111,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"alexfoodw"},"content":"     * Set arguments for the required facebook command"},{"lineNumber":113,"author":{"gitID":"alexfoodw"},"content":"     * @param trimmedArgs"},{"lineNumber":114,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"alexfoodw"},"content":"    public static void setTrimmedArgs(String trimmedArgs) {"},{"lineNumber":116,"author":{"gitID":"alexfoodw"},"content":"        BrowserPanel.trimmedArgs \u003d trimmedArgs;"},{"lineNumber":117,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"alexfoodw"},"content":"    //@@author"},{"lineNumber":119,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":120,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":121,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":"     * Loads a default HTML file with a background that matches the current theme."},{"lineNumber":123,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"KeithSOC"},"content":"    public void loadDefaultPage(Scene scene) {"},{"lineNumber":125,"author":{"gitID":"KeithSOC"},"content":"        URL defaultPage;"},{"lineNumber":126,"author":{"gitID":"KeithSOC"},"content":"        if (scene.getStylesheets().get(0).equals(UiTheme.THEME_DAY)) {"},{"lineNumber":127,"author":{"gitID":"KeithSOC"},"content":"            defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE_DAY);"},{"lineNumber":128,"author":{"gitID":"KeithSOC"},"content":"        } else {"},{"lineNumber":129,"author":{"gitID":"KeithSOC"},"content":"            defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE_NIGHT);"},{"lineNumber":130,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"KeithSOC"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":132,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"alexfoodw"},"content":"    //@@author alexfoodw"},{"lineNumber":136,"author":{"gitID":"alexfoodw"},"content":"    //method to convert Document to String"},{"lineNumber":137,"author":{"gitID":"alexfoodw"},"content":"    public String getStringFromDocument(Document doc) {"},{"lineNumber":138,"author":{"gitID":"alexfoodw"},"content":"        try {"},{"lineNumber":139,"author":{"gitID":"alexfoodw"},"content":"            DOMSource domSource \u003d new DOMSource(doc);"},{"lineNumber":140,"author":{"gitID":"alexfoodw"},"content":"            StringWriter writer \u003d new StringWriter();"},{"lineNumber":141,"author":{"gitID":"alexfoodw"},"content":"            StreamResult result \u003d new StreamResult(writer);"},{"lineNumber":142,"author":{"gitID":"alexfoodw"},"content":"            TransformerFactory tf \u003d TransformerFactory.newInstance();"},{"lineNumber":143,"author":{"gitID":"alexfoodw"},"content":"            Transformer transformer \u003d tf.newTransformer();"},{"lineNumber":144,"author":{"gitID":"alexfoodw"},"content":"            transformer.transform(domSource, result);"},{"lineNumber":145,"author":{"gitID":"alexfoodw"},"content":"            return writer.toString();"},{"lineNumber":146,"author":{"gitID":"alexfoodw"},"content":"        } catch (TransformerException ex) {"},{"lineNumber":147,"author":{"gitID":"alexfoodw"},"content":"            new CommandException(\"Transform Doc to String Error.\");"},{"lineNumber":148,"author":{"gitID":"alexfoodw"},"content":"            return null;"},{"lineNumber":149,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"alexfoodw"},"content":"    private void setEventHandlerForBrowserUrlLoadEvent() {"},{"lineNumber":152,"author":{"gitID":"alexfoodw"},"content":"        browser.getEngine().getLoadWorker().stateProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":153,"author":{"gitID":"alexfoodw"},"content":"            // Case: handle facebook related page loads"},{"lineNumber":154,"author":{"gitID":"alexfoodw"},"content":"            if (Worker.State.SUCCEEDED.equals(newValue) \u0026\u0026 browser.getEngine().getLocation().contains(\"facebook\")) {"},{"lineNumber":155,"author":{"gitID":"alexfoodw"},"content":"                String currentContent \u003d getStringFromDocument(browser.getEngine().getDocument());"},{"lineNumber":156,"author":{"gitID":"alexfoodw"},"content":"                // handle invalid friend to be added"},{"lineNumber":157,"author":{"gitID":"alexfoodw"},"content":"                if (currentContent.contains(\"Sorry, this content isn\u0027t available right now\")"},{"lineNumber":158,"author":{"gitID":"alexfoodw"},"content":"                        || currentContent.contains(\"This page isn\u0027t available\")"},{"lineNumber":159,"author":{"gitID":"alexfoodw"},"content":"                        || currentContent.contains(\"Sorry, this content isn\u0027t available at the moment\")"},{"lineNumber":160,"author":{"gitID":"alexfoodw"},"content":"                        || currentContent.contains(\"may have been expired\")) {"},{"lineNumber":161,"author":{"gitID":"alexfoodw"},"content":"                    FacebookAddAllFriendsCommand.setupNextFriend();"},{"lineNumber":162,"author":{"gitID":"alexfoodw"},"content":"                }"},{"lineNumber":163,"author":{"gitID":"alexfoodw"},"content":"            }"},{"lineNumber":164,"author":{"gitID":"alexfoodw"},"content":"        });"},{"lineNumber":165,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":167,"author":{"gitID":"alexfoodw"},"content":"    private void setEventHandlerForBrowserUrlChangeEvent() {"},{"lineNumber":168,"author":{"gitID":"alexfoodw"},"content":"        location.textProperty()"},{"lineNumber":169,"author":{"gitID":"alexfoodw"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":170,"author":{"gitID":"alexfoodw"},"content":"                    // listens for post-accesstoken generation next step"},{"lineNumber":171,"author":{"gitID":"alexfoodw"},"content":"                    if (newValue.contains(\"access_token\")) {"},{"lineNumber":172,"author":{"gitID":"alexfoodw"},"content":"                        switch (processType) {"},{"lineNumber":173,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":174,"author":{"gitID":"alexfoodw"},"content":"                        case FacebookConnectCommand.COMMAND_WORD:"},{"lineNumber":175,"author":{"gitID":"alexfoodw"},"content":"                        case FacebookConnectCommand.COMMAND_ALIAS:"},{"lineNumber":176,"author":{"gitID":"alexfoodw"},"content":"                            logger.fine(\"browser url changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":177,"author":{"gitID":"alexfoodw"},"content":"                            raise(new BrowserUrlChangeEvent(FacebookConnectCommand.COMMAND_ALIAS));"},{"lineNumber":178,"author":{"gitID":"alexfoodw"},"content":"                            break;"},{"lineNumber":179,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":180,"author":{"gitID":"alexfoodw"},"content":"                        case FacebookPostCommand.COMMAND_WORD:"},{"lineNumber":181,"author":{"gitID":"alexfoodw"},"content":"                        case FacebookPostCommand.COMMAND_ALIAS:"},{"lineNumber":182,"author":{"gitID":"alexfoodw"},"content":"                            logger.fine(\"browser url changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":183,"author":{"gitID":"alexfoodw"},"content":"                            raise(new BrowserUrlChangeEvent(FacebookPostCommand.COMMAND_ALIAS));"},{"lineNumber":184,"author":{"gitID":"alexfoodw"},"content":"                            break;"},{"lineNumber":185,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":186,"author":{"gitID":"alexfoodw"},"content":"                        case FacebookLinkCommand.COMMAND_WORD:"},{"lineNumber":187,"author":{"gitID":"alexfoodw"},"content":"                        case FacebookLinkCommand.COMMAND_ALIAS:"},{"lineNumber":188,"author":{"gitID":"alexfoodw"},"content":"                            logger.fine(\"browser url changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":189,"author":{"gitID":"alexfoodw"},"content":"                            raise(new BrowserUrlChangeEvent(FacebookLinkCommand.COMMAND_ALIAS));"},{"lineNumber":190,"author":{"gitID":"alexfoodw"},"content":"                            break;"},{"lineNumber":191,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":192,"author":{"gitID":"alexfoodw"},"content":"                        case FacebookAddCommand.COMMAND_WORD:"},{"lineNumber":193,"author":{"gitID":"alexfoodw"},"content":"                        case FacebookAddCommand.COMMAND_ALIAS:"},{"lineNumber":194,"author":{"gitID":"alexfoodw"},"content":"                            logger.fine(\"browser url changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":195,"author":{"gitID":"alexfoodw"},"content":"                            raise(new BrowserUrlChangeEvent(FacebookAddCommand.COMMAND_ALIAS));"},{"lineNumber":196,"author":{"gitID":"alexfoodw"},"content":"                            break;"},{"lineNumber":197,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":198,"author":{"gitID":"alexfoodw"},"content":"                        case FacebookAddAllFriendsCommand.COMMAND_WORD:"},{"lineNumber":199,"author":{"gitID":"alexfoodw"},"content":"                        case FacebookAddAllFriendsCommand.COMMAND_ALIAS:"},{"lineNumber":200,"author":{"gitID":"alexfoodw"},"content":"                            logger.fine(\"browser url changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":201,"author":{"gitID":"alexfoodw"},"content":"                            raise(new BrowserUrlChangeEvent(FacebookAddAllFriendsCommand.COMMAND_ALIAS));"},{"lineNumber":202,"author":{"gitID":"alexfoodw"},"content":"                            break;"},{"lineNumber":203,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":204,"author":{"gitID":"alexfoodw"},"content":"                        default:"},{"lineNumber":205,"author":{"gitID":"alexfoodw"},"content":"                            break;"},{"lineNumber":206,"author":{"gitID":"alexfoodw"},"content":"                        }"},{"lineNumber":207,"author":{"gitID":"alexfoodw"},"content":"                    } else if (newValue.contains(\"photo.php?fbid\")) {"},{"lineNumber":208,"author":{"gitID":"alexfoodw"},"content":"                        logger.fine(\"browser url changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":209,"author":{"gitID":"alexfoodw"},"content":"                        raise(new BrowserUrlChangeEvent(FacebookAddAllFriendsCommand.COMMAND_ALIAS));"},{"lineNumber":210,"author":{"gitID":"alexfoodw"},"content":"                    }"},{"lineNumber":211,"author":{"gitID":"alexfoodw"},"content":"                });"},{"lineNumber":212,"author":{"gitID":"alexfoodw"},"content":"        // reset after execution"},{"lineNumber":213,"author":{"gitID":"alexfoodw"},"content":"        processType \u003d null;"},{"lineNumber":214,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"alexfoodw"},"content":"    //@@author"},{"lineNumber":216,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":225,"author":{"gitID":"sarahnzx"},"content":"    @Subscribe"},{"lineNumber":226,"author":{"gitID":"sarahnzx"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":227,"author":{"gitID":"sarahnzx"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":228,"author":{"gitID":"sarahnzx"},"content":"        ReadOnlyPerson person \u003d event.getNewSelection().person;"},{"lineNumber":229,"author":{"gitID":"sarahnzx"},"content":"        String requestedSocialType \u003d event.getSocialType();"},{"lineNumber":230,"author":{"gitID":"sarahnzx"},"content":"        Person p \u003d new Person(person);"},{"lineNumber":231,"author":{"gitID":"sarahnzx"},"content":"        Iterator\u003cSocialInfo\u003e iterator \u003d p.getSocialInfos().iterator();"},{"lineNumber":232,"author":{"gitID":"sarahnzx"},"content":"        if (iterator.hasNext()) {"},{"lineNumber":233,"author":{"gitID":"sarahnzx"},"content":"            // if there is SocialInfo stored"},{"lineNumber":234,"author":{"gitID":"sarahnzx"},"content":"            SocialInfo social \u003d iterator.next();"},{"lineNumber":235,"author":{"gitID":"sarahnzx"},"content":"            String socialType \u003d social.getSocialType();"},{"lineNumber":236,"author":{"gitID":"sarahnzx"},"content":"            while (!socialType.equals(requestedSocialType) \u0026\u0026 iterator.hasNext() \u0026\u0026 requestedSocialType !\u003d null) {"},{"lineNumber":237,"author":{"gitID":"sarahnzx"},"content":"                // if no social type is specified, the default social type shown will be Instagram"},{"lineNumber":238,"author":{"gitID":"sarahnzx"},"content":"                social \u003d iterator.next();"},{"lineNumber":239,"author":{"gitID":"sarahnzx"},"content":"            }"},{"lineNumber":240,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":241,"author":{"gitID":"sarahnzx"},"content":"            String url \u003d social.getSocialUrl();"},{"lineNumber":242,"author":{"gitID":"sarahnzx"},"content":"            loadPage(url);"},{"lineNumber":243,"author":{"gitID":"sarahnzx"},"content":"        } else {"},{"lineNumber":244,"author":{"gitID":"sarahnzx"},"content":"            loadPersonPage(event.getNewSelection().person);"},{"lineNumber":245,"author":{"gitID":"sarahnzx"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":248,"author":{"gitID":"alexfoodw"},"content":"    //@@author alexfoodw"},{"lineNumber":249,"author":{"gitID":"alexfoodw"},"content":"    @Subscribe"},{"lineNumber":250,"author":{"gitID":"alexfoodw"},"content":"    private void handleBrowserUrlChangeEvent(BrowserUrlChangeEvent event) throws CommandException {"},{"lineNumber":251,"author":{"gitID":"alexfoodw"},"content":"        switch (event.getProcessType()) {"},{"lineNumber":252,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":253,"author":{"gitID":"alexfoodw"},"content":"        case FacebookConnectCommand.COMMAND_WORD:"},{"lineNumber":254,"author":{"gitID":"alexfoodw"},"content":"        case FacebookConnectCommand.COMMAND_ALIAS:"},{"lineNumber":255,"author":{"gitID":"alexfoodw"},"content":"            logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":256,"author":{"gitID":"alexfoodw"},"content":"            FacebookConnectCommand.completeAuth(browser.getEngine().getLocation());"},{"lineNumber":257,"author":{"gitID":"alexfoodw"},"content":"            break;"},{"lineNumber":258,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":259,"author":{"gitID":"alexfoodw"},"content":"        case FacebookPostCommand.COMMAND_WORD:"},{"lineNumber":260,"author":{"gitID":"alexfoodw"},"content":"        case FacebookPostCommand.COMMAND_ALIAS:"},{"lineNumber":261,"author":{"gitID":"alexfoodw"},"content":"            logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":262,"author":{"gitID":"alexfoodw"},"content":"            FacebookConnectCommand.completeAuth(browser.getEngine().getLocation());"},{"lineNumber":263,"author":{"gitID":"alexfoodw"},"content":"            FacebookPostCommand.completePost();"},{"lineNumber":264,"author":{"gitID":"alexfoodw"},"content":"            break;"},{"lineNumber":265,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":266,"author":{"gitID":"alexfoodw"},"content":"        case FacebookLinkCommand.COMMAND_WORD:"},{"lineNumber":267,"author":{"gitID":"alexfoodw"},"content":"        case FacebookLinkCommand.COMMAND_ALIAS:"},{"lineNumber":268,"author":{"gitID":"alexfoodw"},"content":"            logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":269,"author":{"gitID":"alexfoodw"},"content":"            FacebookConnectCommand.completeAuth(browser.getEngine().getLocation());"},{"lineNumber":270,"author":{"gitID":"alexfoodw"},"content":"            FacebookLinkCommand.completeLink();"},{"lineNumber":271,"author":{"gitID":"alexfoodw"},"content":"            break;"},{"lineNumber":272,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":273,"author":{"gitID":"alexfoodw"},"content":"        case FacebookAddCommand.COMMAND_WORD:"},{"lineNumber":274,"author":{"gitID":"alexfoodw"},"content":"        case FacebookAddCommand.COMMAND_ALIAS:"},{"lineNumber":275,"author":{"gitID":"alexfoodw"},"content":"            logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":276,"author":{"gitID":"alexfoodw"},"content":"            FacebookConnectCommand.completeAuth(browser.getEngine().getLocation());"},{"lineNumber":277,"author":{"gitID":"alexfoodw"},"content":"            FacebookAddCommand facebookAddCommand \u003d new FacebookAddCommand(trimmedArgs);"},{"lineNumber":278,"author":{"gitID":"alexfoodw"},"content":"            logic.completeFacebookAddCommand(facebookAddCommand, processType);"},{"lineNumber":279,"author":{"gitID":"alexfoodw"},"content":"            break;"},{"lineNumber":280,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":281,"author":{"gitID":"alexfoodw"},"content":"        case FacebookAddAllFriendsCommand.COMMAND_WORD:"},{"lineNumber":282,"author":{"gitID":"alexfoodw"},"content":"        case FacebookAddAllFriendsCommand.COMMAND_ALIAS:"},{"lineNumber":283,"author":{"gitID":"alexfoodw"},"content":"            logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":284,"author":{"gitID":"alexfoodw"},"content":"            FacebookAddAllFriendsCommand.setUserId(browser.getEngine().getLocation());"},{"lineNumber":285,"author":{"gitID":"alexfoodw"},"content":"            FacebookAddCommand facebookAddCommandForAddAll \u003d new FacebookAddCommand(true);"},{"lineNumber":286,"author":{"gitID":"alexfoodw"},"content":"            logic.completeFacebookAddCommand(facebookAddCommandForAddAll, processType);"},{"lineNumber":287,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":288,"author":{"gitID":"alexfoodw"},"content":"            // go on to add next friend"},{"lineNumber":289,"author":{"gitID":"alexfoodw"},"content":"            FacebookAddAllFriendsCommand.incrementTotalFriendsAdded();"},{"lineNumber":290,"author":{"gitID":"alexfoodw"},"content":"            FacebookAddAllFriendsCommand.setupNextFriend();"},{"lineNumber":291,"author":{"gitID":"alexfoodw"},"content":"            break;"},{"lineNumber":292,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":293,"author":{"gitID":"alexfoodw"},"content":"        default:"},{"lineNumber":294,"author":{"gitID":"alexfoodw"},"content":"            throw new CommandException(\"URL change error.\");"},{"lineNumber":295,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"alexfoodw"},"content":"    //@@author"},{"lineNumber":298,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":193,"sarahnzx":27,"KeithSOC":22,"-":56}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.parser.ParserUtil.parseWhitespaceSeparatedStrings;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"KeithSOC"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.DeleteByIndexCommand;"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.DeleteByTagCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":" * Parses input arguments and creates a new {@code DeleteCommand}."},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"    public static final String INVALID_DELETE_COMMAND_FORMAT_MESSAGE \u003d"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"     * Checks that the input {@code String} is not empty."},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"     * @throws ParseException if it is empty."},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    private void checkArgsNotEmpty(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        if (args \u003d\u003d null || args.isEmpty()) {"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"            throw new ParseDeleteCommandException();"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"     * @throws ParseException if the input arguments does not conform the expected format."},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"        // check that the raw args are not empty before processing"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"        checkArgsNotEmpty(args);"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"        OptionBearingArgument opArgs \u003d new OptionBearingArgument(args);"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        String filteredArgs \u003d opArgs.getFilteredArgs();"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"        // check that the filtered args are not empty"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"        checkArgsNotEmpty(filteredArgs);"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"        if (opArgs.getOptions().size() \u003e 1) {"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"            // args should only have at most 1 option"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"            throw new ParseDeleteCommandException();"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"        if (opArgs.getOptions().contains(DeleteByTagCommand.COMMAND_OPTION)) {"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"            List\u003cString\u003e tags \u003d parseWhitespaceSeparatedStrings(filteredArgs);"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"            HashSet\u003cString\u003e tagSet \u003d new HashSet\u003c\u003e(tags);"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"            return new DeleteByTagCommand(tagSet);"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        } else if (opArgs.getOptions().isEmpty()) {"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"            try {"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"                List\u003cIndex\u003e indexes \u003d ParserUtil.parseMultipleIndexes(filteredArgs);"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"                return new DeleteByIndexCommand(indexes);"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"                throw new ParseDeleteCommandException();"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"        } else {"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"            // option is not a valid option"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"            throw new ParseDeleteCommandException();"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"     * Represents a {@code ParseException} encountered when parsing arguments for a {@code DeleteCommand}."},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"    private class ParseDeleteCommandException extends ParseException {"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"        public ParseDeleteCommandException() {"},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"            super(INVALID_DELETE_COMMAND_FORMAT_MESSAGE);"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"sarahnzx":1,"marvinchin":65,"KeithSOC":1,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/SelectCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new SelectCommand object"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":16,"author":{"gitID":"sarahnzx"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"sarahnzx"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectCommand"},{"lineNumber":18,"author":{"gitID":"sarahnzx"},"content":"     * and returns an SelectCommand object for execution."},{"lineNumber":19,"author":{"gitID":"sarahnzx"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"sarahnzx"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"sarahnzx"},"content":"    public SelectCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"sarahnzx"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"sarahnzx"},"content":"            String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"sarahnzx"},"content":"            String[] tokens \u003d trimmedArgs.split(\" \");"},{"lineNumber":25,"author":{"gitID":"sarahnzx"},"content":"            String indexStr \u003d tokens[0];"},{"lineNumber":26,"author":{"gitID":"sarahnzx"},"content":"            String socialType \u003d null;"},{"lineNumber":27,"author":{"gitID":"sarahnzx"},"content":"            if (tokens.length \u003e 1) {"},{"lineNumber":28,"author":{"gitID":"sarahnzx"},"content":"                // if there is more than one argument"},{"lineNumber":29,"author":{"gitID":"sarahnzx"},"content":"                socialType \u003d ParserUtil.parseSelect(tokens[1]).get();"},{"lineNumber":30,"author":{"gitID":"sarahnzx"},"content":"            }"},{"lineNumber":31,"author":{"gitID":"sarahnzx"},"content":"            Index index \u003d ParserUtil.parseIndex(indexStr);"},{"lineNumber":32,"author":{"gitID":"sarahnzx"},"content":"            return new SelectCommand(index, socialType);"},{"lineNumber":33,"author":{"gitID":"sarahnzx"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":34,"author":{"gitID":"sarahnzx"},"content":"            throw new ParseException("},{"lineNumber":35,"author":{"gitID":"sarahnzx"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"sarahnzx"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"sarahnzx"},"content":"}"}],"authorContributionMap":{"sarahnzx":24,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/ExportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":" * Parses input arguments and creates a new {@code ExportCommand}."},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"public class ExportCommandParser implements Parser {"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"     * Parses the given {@code String} of arguments in the context of the ExportCommand"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"     * and returns an ExportCommand object for execution."},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    public ExportCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"            throw new ParseException("},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"        return new ExportCommand(trimmedArgs);"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":22,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":16,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookAddAllFriendsCommand;"},{"lineNumber":17,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookAddCommand;"},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookConnectCommand;"},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookLinkCommand;"},{"lineNumber":20,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookPostCommand;"},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.FavoriteCommand;"},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.UnFavoriteCommand;"},{"lineNumber":32,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":34,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"alexfoodw"},"content":"        //@@author alexfoodw"},{"lineNumber":68,"author":{"gitID":"alexfoodw"},"content":"        case FacebookAddCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"alexfoodw"},"content":"        case FacebookAddCommand.COMMAND_ALIAS:"},{"lineNumber":70,"author":{"gitID":"alexfoodw"},"content":"            BrowserPanel.setProcessType(commandWord);"},{"lineNumber":71,"author":{"gitID":"alexfoodw"},"content":"            return new FacebookAddCommandParser().parse(arguments);"},{"lineNumber":72,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":73,"author":{"gitID":"alexfoodw"},"content":"        case FacebookAddAllFriendsCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitID":"alexfoodw"},"content":"        case FacebookAddAllFriendsCommand.COMMAND_ALIAS:"},{"lineNumber":75,"author":{"gitID":"alexfoodw"},"content":"            BrowserPanel.setProcessType(commandWord);"},{"lineNumber":76,"author":{"gitID":"alexfoodw"},"content":"            return new FacebookAddAllFriendsCommand();"},{"lineNumber":77,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":78,"author":{"gitID":"alexfoodw"},"content":"        case FacebookConnectCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"alexfoodw"},"content":"        case FacebookConnectCommand.COMMAND_ALIAS:"},{"lineNumber":80,"author":{"gitID":"alexfoodw"},"content":"            BrowserPanel.setProcessType(commandWord);"},{"lineNumber":81,"author":{"gitID":"alexfoodw"},"content":"            return new FacebookConnectCommand();"},{"lineNumber":82,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":83,"author":{"gitID":"alexfoodw"},"content":"        case FacebookPostCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"alexfoodw"},"content":"        case FacebookPostCommand.COMMAND_ALIAS:"},{"lineNumber":85,"author":{"gitID":"alexfoodw"},"content":"            BrowserPanel.setProcessType(commandWord);"},{"lineNumber":86,"author":{"gitID":"alexfoodw"},"content":"            return new FacebookPostCommandParser().parse(arguments);"},{"lineNumber":87,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":88,"author":{"gitID":"alexfoodw"},"content":"        case FacebookLinkCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"alexfoodw"},"content":"        case FacebookLinkCommand.COMMAND_ALIAS:"},{"lineNumber":90,"author":{"gitID":"alexfoodw"},"content":"            BrowserPanel.setProcessType(commandWord);"},{"lineNumber":91,"author":{"gitID":"alexfoodw"},"content":"            return new FacebookLinkCommandParser().parse(arguments);"},{"lineNumber":92,"author":{"gitID":"alexfoodw"},"content":"        //@@author"},{"lineNumber":93,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"marvinchin"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"KeithSOC"},"content":"        //@@author keithsoc"},{"lineNumber":99,"author":{"gitID":"KeithSOC"},"content":"        case FavoriteCommand.COMMAND_WORD:"},{"lineNumber":100,"author":{"gitID":"KeithSOC"},"content":"            return new FavoriteCommandParser().parse(arguments);"},{"lineNumber":101,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":102,"author":{"gitID":"KeithSOC"},"content":"        case UnFavoriteCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"KeithSOC"},"content":"            return new UnFavoriteCommandParser().parse(arguments);"},{"lineNumber":104,"author":{"gitID":"KeithSOC"},"content":"        //@@author"},{"lineNumber":105,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"marvinchin"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"marvinchin"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":115,"author":{"gitID":"marvinchin"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"marvinchin"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":"        //@@author keithsoc"},{"lineNumber":123,"author":{"gitID":"KeithSOC"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":124,"author":{"gitID":"KeithSOC"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":125,"author":{"gitID":"KeithSOC"},"content":"            return new ListCommand(arguments);"},{"lineNumber":126,"author":{"gitID":"KeithSOC"},"content":"        //@@author"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"KeithSOC"},"content":"        //@@author keithsoc"},{"lineNumber":129,"author":{"gitID":"KeithSOC"},"content":"        case ThemeCommand.COMMAND_WORD:"},{"lineNumber":130,"author":{"gitID":"KeithSOC"},"content":"        case ThemeCommand.COMMAND_ALIAS:"},{"lineNumber":131,"author":{"gitID":"KeithSOC"},"content":"            return new ThemeCommandParser().parse(arguments);"},{"lineNumber":132,"author":{"gitID":"KeithSOC"},"content":"        //@@author"},{"lineNumber":133,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":134,"author":{"gitID":"marvinchin"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":135,"author":{"gitID":"marvinchin"},"content":"        case SortCommand.COMMAND_ALIAS:"},{"lineNumber":136,"author":{"gitID":"marvinchin"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":139,"author":{"gitID":"marvinchin"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"marvinchin"},"content":"        case ExportCommand.COMMAND_WORD:"},{"lineNumber":143,"author":{"gitID":"marvinchin"},"content":"            return new ExportCommandParser().parse(arguments);"},{"lineNumber":144,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":145,"author":{"gitID":"marvinchin"},"content":"        case ImportCommand.COMMAND_WORD:"},{"lineNumber":146,"author":{"gitID":"marvinchin"},"content":"            return new ImportCommandParser().parse(arguments);"},{"lineNumber":147,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":149,"author":{"gitID":"marvinchin"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":156,"author":{"gitID":"marvinchin"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":160,"author":{"gitID":"marvinchin"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":46,"marvinchin":22,"KeithSOC":22,"-":78}},{"path":"src/main/java/seedu/address/logic/parser/SocialInfoMapping.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.SocialInfo;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":" * Handles mappings of social related identifiers when parsing {@code SocialInfo}."},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"public class SocialInfoMapping {"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"    public static final String FACEBOOK_IDENTIFIER \u003d \"facebook\";"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"    public static final String INSTAGRAM_IDENTIFIER \u003d \"instagram\";"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"    public static final String FACEBOOK_IDENTIFIER_ALIAS \u003d \"fb\";"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"    public static final String INSTAGRAM_IDENTIFIER_ALIAS \u003d \"ig\";"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"    private static final int SOCIAL_TYPE_INDEX \u003d 0;"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"    private static final int SOCIAL_USERNAME_INDEX \u003d 1;"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"    private static final String INVALID_SYNTAX_EXCEPTION_MESSAGE \u003d \"Invalid syntax for social info\";"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"    private static final String UNRECOGNIZED_SOCIAL_TYPE_MESSAGE \u003d \"Unrecognized social type.\\n\""},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"        + \"Currently supported platforms: \""},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"        + FACEBOOK_IDENTIFIER + \"(aliases: \" + FACEBOOK_IDENTIFIER_ALIAS + \"), \""},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"        + INSTAGRAM_IDENTIFIER + \"(aliases: \" + INSTAGRAM_IDENTIFIER_ALIAS + \")\\n\";"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(SocialInfoMapping.class);"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"     * Returns the SocialInfo object represented by the input {@code String}."},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"     * @throws IllegalValueException if the input does not represent a valid {@code SocialInfo} recognized"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"     * by the defined mappings."},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    public static SocialInfo parseSocialInfo(String rawSocialInfo) throws IllegalValueException {"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"        String[] splitRawSocialInfo \u003d rawSocialInfo.split(\" \", 2);"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"        if (splitRawSocialInfo.length !\u003d 2) {"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"            logger.warning(\"Incorrect number of parts: \" + rawSocialInfo);"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"            throw new IllegalValueException(INVALID_SYNTAX_EXCEPTION_MESSAGE);"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        if (isFacebookInfo(splitRawSocialInfo)) {"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"            return buildFacebookInfo(splitRawSocialInfo);"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"        } else if (isInstagramInfo(splitRawSocialInfo)) {"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"            return buildInstagramInfo(splitRawSocialInfo);"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"        } else {"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"            logger.warning(\"Unrecognised social type: \" + rawSocialInfo);"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"            throw new IllegalValueException(UNRECOGNIZED_SOCIAL_TYPE_MESSAGE);"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":53,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":54,"author":{"gitID":"sarahnzx"},"content":"    public static String getSocialType(String socialType) throws IllegalValueException {"},{"lineNumber":55,"author":{"gitID":"sarahnzx"},"content":"        if (socialType.equals(FACEBOOK_IDENTIFIER) || socialType.equals(FACEBOOK_IDENTIFIER_ALIAS)) {"},{"lineNumber":56,"author":{"gitID":"sarahnzx"},"content":"            return FACEBOOK_IDENTIFIER;"},{"lineNumber":57,"author":{"gitID":"sarahnzx"},"content":"        } else if (socialType.equals(INSTAGRAM_IDENTIFIER) || socialType.equals(INSTAGRAM_IDENTIFIER_ALIAS)) {"},{"lineNumber":58,"author":{"gitID":"sarahnzx"},"content":"            return INSTAGRAM_IDENTIFIER;"},{"lineNumber":59,"author":{"gitID":"sarahnzx"},"content":"        } else {"},{"lineNumber":60,"author":{"gitID":"sarahnzx"},"content":"            throw new IllegalValueException(UNRECOGNIZED_SOCIAL_TYPE_MESSAGE);"},{"lineNumber":61,"author":{"gitID":"sarahnzx"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"    private static boolean isFacebookInfo(String[] splitRawSocialInfo) {"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"        String trimmedSocialType \u003d splitRawSocialInfo[SOCIAL_TYPE_INDEX].trim();"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"        return trimmedSocialType.equals(FACEBOOK_IDENTIFIER) || trimmedSocialType.equals(FACEBOOK_IDENTIFIER_ALIAS);"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"    private static SocialInfo buildFacebookInfo(String[] splitRawSocialInfo) {"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"        String trimmedSocialUsername \u003d splitRawSocialInfo[SOCIAL_USERNAME_INDEX].trim();"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"        String socialUrl \u003d \"https://facebook.com/\" + trimmedSocialUsername;"},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"        return new SocialInfo(FACEBOOK_IDENTIFIER, trimmedSocialUsername, socialUrl);"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"    private static boolean isInstagramInfo(String[] splitRawSocialInfo) {"},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":"        String trimmedSocialType \u003d splitRawSocialInfo[SOCIAL_TYPE_INDEX].trim();"},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":"        return trimmedSocialType.equals(INSTAGRAM_IDENTIFIER) || trimmedSocialType.equals(INSTAGRAM_IDENTIFIER_ALIAS);"},{"lineNumber":79,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":81,"author":{"gitID":"marvinchin"},"content":"    private static SocialInfo buildInstagramInfo(String[] splitRawSocialInfo) {"},{"lineNumber":82,"author":{"gitID":"marvinchin"},"content":"        String trimmedSocialUsername \u003d splitRawSocialInfo[SOCIAL_USERNAME_INDEX].trim();"},{"lineNumber":83,"author":{"gitID":"marvinchin"},"content":"        String socialUrl \u003d \"https://instagram.com/\" + trimmedSocialUsername;"},{"lineNumber":84,"author":{"gitID":"marvinchin"},"content":"        return new SocialInfo(INSTAGRAM_IDENTIFIER, trimmedSocialUsername, socialUrl);"},{"lineNumber":85,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"sarahnzx":11,"marvinchin":74,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.parser.ParserUtil.parseWhitespaceSeparatedStrings;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.FindByNameCommand;"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.FindByTagsCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.TagsContainKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":" * Parses input arguments and creates a new {@code FindCommand}."},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"    public static final String INVALID_FIND_COMMAND_FORMAT_MESSAGE \u003d"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"     * Checks that the input {@code String} is not empty."},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"     * @throws ParseException if it is empty."},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    private void checkArgsNotEmpty(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"        if (args \u003d\u003d null || args.isEmpty()) {"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"            throw new ParseFindCommandException();"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"        // check that the raw args are not empty before processing"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"        checkArgsNotEmpty(args);"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"        OptionBearingArgument opArgs \u003d new OptionBearingArgument(args);"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"        String filteredArgs \u003d opArgs.getFilteredArgs();"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        // check that the filtered args are not empty"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"        checkArgsNotEmpty(filteredArgs);"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"        if (opArgs.getOptions().size() \u003e 1) {"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"            // args should have at most 1 option"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"            throw new ParseFindCommandException();"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"        if (opArgs.getOptions().contains(FindByTagsCommand.COMMAND_OPTION)) {"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"            List\u003cString\u003e tagKeywords \u003d parseWhitespaceSeparatedStrings(filteredArgs);"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"            TagsContainKeywordsPredicate predicate \u003d new TagsContainKeywordsPredicate(tagKeywords);"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"            return new FindByTagsCommand(predicate);"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"        } else if (opArgs.getOptions().isEmpty()) {"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"            checkArgsNotEmpty(opArgs.getFilteredArgs());"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"            List\u003cString\u003e nameKeywords \u003d parseWhitespaceSeparatedStrings(filteredArgs);"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"            NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(nameKeywords);"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"            return new FindByNameCommand(predicate);"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"        } else {"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"            // option is not a valid option"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"            throw new ParseFindCommandException();"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"     * Represents a {@code ParseException} encountered when parsing arguments for a {@code FindCommand}."},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"    private class ParseFindCommandException extends ParseException {"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"        public ParseFindCommandException() {"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"            super(INVALID_FIND_COMMAND_FORMAT_MESSAGE);"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":64,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"    public static final Prefix PREFIX_FAV \u003d new Prefix(\"f/\");"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"    public static final Prefix PREFIX_UNFAV \u003d new Prefix(\"uf/\");"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":"    public static final Prefix PREFIX_DISPLAY_PHOTO \u003d new Prefix(\"dp/\");"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"    public static final Prefix PREFIX_SOCIAL \u003d new Prefix(\"s/\");"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":"    public static final Prefix PREFIX_OPTION \u003d new Prefix(\"-\");"},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":1,"KeithSOC":8,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"sarahnzx"},"content":"import static seedu.address.logic.parser.SocialInfoMapping.FACEBOOK_IDENTIFIER;"},{"lineNumber":5,"author":{"gitID":"sarahnzx"},"content":"import static seedu.address.logic.parser.SocialInfoMapping.FACEBOOK_IDENTIFIER_ALIAS;"},{"lineNumber":6,"author":{"gitID":"sarahnzx"},"content":"import static seedu.address.logic.parser.SocialInfoMapping.INSTAGRAM_IDENTIFIER;"},{"lineNumber":7,"author":{"gitID":"sarahnzx"},"content":"import static seedu.address.logic.parser.SocialInfoMapping.INSTAGRAM_IDENTIFIER_ALIAS;"},{"lineNumber":8,"author":{"gitID":"sarahnzx"},"content":"import static seedu.address.logic.parser.SocialInfoMapping.getSocialType;"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.parser.SocialInfoMapping.parseSocialInfo;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":"import java.util.regex.Matcher;"},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.DisplayPhoto;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.SocialInfo;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":38,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":40,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":49,"author":{"gitID":"sarahnzx"},"content":"    public static final String MESSAGE_INVALID_SOCIAL_TYPE \u003d \"Social type is not valid. Social type\""},{"lineNumber":50,"author":{"gitID":"sarahnzx"},"content":"            + \" should be facebook or instagram.\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"     * Returns the input {@code String} splitted by whitespace."},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"    public static List\u003cString\u003e parseWhitespaceSeparatedStrings(String args) {"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"        requireNonNull(args);"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"        String[] splitArgs \u003d args.split(\"\\\\s+\");"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"        return Arrays.asList(splitArgs);"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":77,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"KeithSOC"},"content":"     * Parses {@code args} into an {@code List\u003cIndex\u003e} and returns it."},{"lineNumber":79,"author":{"gitID":"KeithSOC"},"content":"     * Used for commands that need to parse multiple indexes"},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":81,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":"    public static List\u003cIndex\u003e parseMultipleIndexes(String args) throws IllegalValueException {"},{"lineNumber":83,"author":{"gitID":"KeithSOC"},"content":"        // Example of proper args: \" 1 2 3\" (has a space in front) -\u003e Hence apply trim() first then split"},{"lineNumber":84,"author":{"gitID":"KeithSOC"},"content":"        List\u003cString\u003e argsList \u003d Arrays.asList(args.trim().split(\"\\\\s+\")); // split by one or more whitespaces"},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":"        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":"        for (String index : argsList) {"},{"lineNumber":88,"author":{"gitID":"KeithSOC"},"content":"            indexList.add(parseIndex(index)); // Add each valid index into indexList"},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"KeithSOC"},"content":"        return indexList;"},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":93,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(new Name(name.get())) : Optional.empty();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(new Phone(phone.get())) : Optional.empty();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(new Address(address.get())) : Optional.empty();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(new Email(email.get())) : Optional.empty();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":131,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"KeithSOC"},"content":"     * Checks if favorite and unfavorite prefixes are present in {@code ArgumentMultimap argMultimap}"},{"lineNumber":133,"author":{"gitID":"KeithSOC"},"content":"     * Catered for both AddCommandParser and EditCommandParser usage"},{"lineNumber":134,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"KeithSOC"},"content":"    public static Optional\u003cFavorite\u003e parseFavorite(ArgumentMultimap argMultimap,"},{"lineNumber":136,"author":{"gitID":"KeithSOC"},"content":"                                         Prefix prefixFav,"},{"lineNumber":137,"author":{"gitID":"KeithSOC"},"content":"                                         Prefix prefixUnFav) throws ParseException {"},{"lineNumber":138,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":139,"author":{"gitID":"KeithSOC"},"content":"        // Disallow both f/ and uf/ to be present in the same instance of user input when editing"},{"lineNumber":140,"author":{"gitID":"KeithSOC"},"content":"        if (argMultimap.isPrefixPresent(prefixFav) \u0026\u0026 argMultimap.isPrefixPresent(prefixUnFav)) {"},{"lineNumber":141,"author":{"gitID":"KeithSOC"},"content":"            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":142,"author":{"gitID":"KeithSOC"},"content":"                    EditCommand.MESSAGE_USAGE));"},{"lineNumber":143,"author":{"gitID":"KeithSOC"},"content":"        } else if (argMultimap.isPrefixPresent(prefixFav)) { // Allow favoriting simply by supplying prefix"},{"lineNumber":144,"author":{"gitID":"KeithSOC"},"content":"            if (!argMultimap.getValue(prefixFav).get().isEmpty()) { // Disallow text after prefix"},{"lineNumber":145,"author":{"gitID":"KeithSOC"},"content":"                throw new ParseException(Favorite.MESSAGE_FAVORITE_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitID":"KeithSOC"},"content":"            } else {"},{"lineNumber":147,"author":{"gitID":"KeithSOC"},"content":"                return Optional.of(new Favorite(true));"},{"lineNumber":148,"author":{"gitID":"KeithSOC"},"content":"            }"},{"lineNumber":149,"author":{"gitID":"KeithSOC"},"content":"        } else if (argMultimap.isPrefixPresent(prefixUnFav)) { // Allow unfavoriting simply by supplying prefix"},{"lineNumber":150,"author":{"gitID":"KeithSOC"},"content":"            if (!argMultimap.getValue(prefixUnFav).get().isEmpty()) { // Disallow text after prefix"},{"lineNumber":151,"author":{"gitID":"KeithSOC"},"content":"                throw new ParseException(Favorite.MESSAGE_FAVORITE_CONSTRAINTS);"},{"lineNumber":152,"author":{"gitID":"KeithSOC"},"content":"            } else {"},{"lineNumber":153,"author":{"gitID":"KeithSOC"},"content":"                return Optional.of(new Favorite(false));"},{"lineNumber":154,"author":{"gitID":"KeithSOC"},"content":"            }"},{"lineNumber":155,"author":{"gitID":"KeithSOC"},"content":"        } else {"},{"lineNumber":156,"author":{"gitID":"KeithSOC"},"content":"            return Optional.empty();"},{"lineNumber":157,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":160,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"KeithSOC"},"content":"     * Parses a {@code Optional\u003cString\u003e displayPhoto} into an {@code Optional\u003cDisplayPhoto\u003e}"},{"lineNumber":162,"author":{"gitID":"KeithSOC"},"content":"     * if {@code displayPhoto} is present."},{"lineNumber":163,"author":{"gitID":"KeithSOC"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":164,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"KeithSOC"},"content":"    public static Optional\u003cDisplayPhoto\u003e parseDisplayPhoto(Optional\u003cString\u003e displayPhoto) throws IllegalValueException {"},{"lineNumber":166,"author":{"gitID":"KeithSOC"},"content":"        return displayPhoto.isPresent()"},{"lineNumber":167,"author":{"gitID":"KeithSOC"},"content":"                ? Optional.of(new DisplayPhoto(displayPhoto.get())) : Optional.empty();"},{"lineNumber":168,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":170,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":171,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":172,"author":{"gitID":"sarahnzx"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"sarahnzx"},"content":"     * Checks if the specified social type is valid."},{"lineNumber":174,"author":{"gitID":"sarahnzx"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"sarahnzx"},"content":"    public static Optional\u003cString\u003e parseSelect(String arg) throws IllegalValueException {"},{"lineNumber":176,"author":{"gitID":"sarahnzx"},"content":"        requireNonNull(arg);"},{"lineNumber":177,"author":{"gitID":"sarahnzx"},"content":"        if (!(arg.equals(FACEBOOK_IDENTIFIER) || arg.equals(INSTAGRAM_IDENTIFIER)"},{"lineNumber":178,"author":{"gitID":"sarahnzx"},"content":"                || arg.equals(FACEBOOK_IDENTIFIER_ALIAS) || arg.equals(INSTAGRAM_IDENTIFIER_ALIAS))) {"},{"lineNumber":179,"author":{"gitID":"sarahnzx"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_SOCIAL_TYPE);"},{"lineNumber":180,"author":{"gitID":"sarahnzx"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"sarahnzx"},"content":"        return Optional.of(getSocialType(arg));"},{"lineNumber":182,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"sarahnzx"},"content":"    //@@author"},{"lineNumber":184,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            tagSet.add(new Tag(tagName));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":197,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":198,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"marvinchin"},"content":"     * Parses {@code Collection\u003cString\u003e rawSocialInfos} into {@code Set\u003cSocialInfo}."},{"lineNumber":200,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"marvinchin"},"content":"    public static Set\u003cSocialInfo\u003e parseSocialInfos(Collection\u003cString\u003e rawSocialInfos) throws IllegalValueException {"},{"lineNumber":202,"author":{"gitID":"marvinchin"},"content":"        requireNonNull(rawSocialInfos);"},{"lineNumber":203,"author":{"gitID":"marvinchin"},"content":"        final Set\u003cSocialInfo\u003e socialInfoSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":204,"author":{"gitID":"marvinchin"},"content":"        for (String rawSocialInfo : rawSocialInfos) {"},{"lineNumber":205,"author":{"gitID":"marvinchin"},"content":"            socialInfoSet.add(parseSocialInfo(rawSocialInfo));"},{"lineNumber":206,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"marvinchin"},"content":"        return socialInfoSet;"},{"lineNumber":208,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":210,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":211,"author":{"gitID":"alexfoodw"},"content":"    //@@author alexfoodw"},{"lineNumber":212,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"alexfoodw"},"content":"     * Validates if url is valid"},{"lineNumber":214,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"alexfoodw"},"content":"    public static boolean isValidUrl(String url) {"},{"lineNumber":216,"author":{"gitID":"alexfoodw"},"content":"        Pattern p \u003d Pattern.compile(\"(http|https):\\\\/\\\\/[A-Za-z\\\\.]*\\\\.(com|org|net)[^\\\\s]*\");"},{"lineNumber":217,"author":{"gitID":"alexfoodw"},"content":"        Matcher m \u003d p.matcher(url);"},{"lineNumber":218,"author":{"gitID":"alexfoodw"},"content":"        return m.matches();"},{"lineNumber":219,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"alexfoodw"},"content":"    //@@author"},{"lineNumber":221,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahnzx":21,"alexfoodw":13,"marvinchin":27,"KeithSOC":65,"-":95}},{"path":"src/main/java/seedu/address/logic/parser/OptionBearingArgument.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OPTION;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":" * The OptionBearingArgument class encapsulates an argument that contains options, and handles the parsing and filtering"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":" * of these options from the argument."},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"public class OptionBearingArgument {"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    private String rawArgs;"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"    private Set\u003cString\u003e optionsList;"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"    private String filteredArgs;"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"     * Constructs an OptionBearingArgument for the input {@code String}."},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"    public OptionBearingArgument(String args) {"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"        requireNonNull(args);"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"        rawArgs \u003d trimmedArgs;"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        parse(rawArgs);"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"     * Parses the {@code String} to get the list of options, and a filtered argument string with the options removed."},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    private void parse(String args) {"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"        String[] splitArgs \u003d args.split(\"\\\\s+\");"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"        optionsList \u003d Arrays.stream(splitArgs)"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"                .filter(arg -\u003e arg.startsWith(PREFIX_OPTION.getPrefix()))"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"                .map(optionArg -\u003e optionArg.substring(PREFIX_OPTION.getPrefix().length())) // drop the leading prefix"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"                .collect(Collectors.toCollection(HashSet::new));"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        filteredArgs \u003d Arrays.stream(splitArgs)"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"                .filter(arg -\u003e !arg.startsWith(PREFIX_OPTION.getPrefix()))"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"                .collect(Collectors.joining(\" \"));"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"    public String getRawArgs() {"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        return rawArgs;"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"    public Set\u003cString\u003e getOptions() {"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        return optionsList;"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"    public String getFilteredArgs() {"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"        return filteredArgs;"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":57,"KeithSOC":1,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/FavoriteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.FavoriteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":" * Parses input arguments and creates a new FavoriteCommand object"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":"public class FavoriteCommandParser implements Parser\u003cFavoriteCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":"     * Parses the given {@code String} of arguments in the context of the FavoriteCommand"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"     * and returns an FavoriteCommand object for execution."},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"    public FavoriteCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"            List\u003cIndex\u003e indexList \u003d ParserUtil.parseMultipleIndexes(args);"},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"            // Sorts indexes in ascending order"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"            Collections.sort(indexList);"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"            return new FavoriteCommand(indexList);"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavoriteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"KeithSOC":26,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.SortByDefaultCommand;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.SortByNameCommand;"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.SortByRecentCommand;"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":" * Parses input arguments and creates a new {@code SortCommand}."},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"     * Parses the given {@code String} of arguments in the context of the SortCommand"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"     * and returns an SortCommand object for execution."},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"        OptionBearingArgument opArgs \u003d new OptionBearingArgument(args);"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"        Set\u003cString\u003e options \u003d opArgs.getOptions();"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"        if (!opArgs.getFilteredArgs().isEmpty() || options.size() \u003e 1) {"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"        if (options.contains(SortByNameCommand.COMMAND_OPTION)) {"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"            return new SortByNameCommand();"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"        } else if (options.contains(SortByRecentCommand.COMMAND_OPTION)) {"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"            return new SortByRecentCommand();"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"        } else if (options.size() \u003d\u003d 0) {"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"            // no options, so return sort by default command"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"            return new SortByDefaultCommand();"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"        } else {"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"            // invalid option, throw exception"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":38,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/FacebookAddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":5,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookAddCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":8,"author":{"gitID":"alexfoodw"},"content":"//@@author alexfoodw"},{"lineNumber":9,"author":{"gitID":"alexfoodw"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"alexfoodw"},"content":" * Parses the given {@code String} of arguments in the context of the FacebookAddCommand"},{"lineNumber":11,"author":{"gitID":"alexfoodw"},"content":" * and returns an FacebookAddCommand object for execution."},{"lineNumber":12,"author":{"gitID":"alexfoodw"},"content":" * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":13,"author":{"gitID":"alexfoodw"},"content":" */"},{"lineNumber":14,"author":{"gitID":"alexfoodw"},"content":"public class FacebookAddCommandParser implements Parser\u003cFacebookAddCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":16,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"alexfoodw"},"content":"     * Parses the given {@code String} of arguments in the context of the FacebookAddCommand"},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":"     * and returns an FacebookAddCommand object for execution."},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"alexfoodw"},"content":"    public FacebookAddCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacebookAddCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"        return new FacebookAddCommand(trimmedArgs);"},{"lineNumber":29,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":31,"author":{"gitID":"alexfoodw"},"content":"}"},{"lineNumber":32,"author":{"gitID":"alexfoodw"},"content":"//@@author"}],"authorContributionMap":{"alexfoodw":28,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/FacebookLinkCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"alexfoodw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_URL;"},{"lineNumber":5,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":6,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookLinkCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"alexfoodw"},"content":"//@@author alexfoodw"},{"lineNumber":10,"author":{"gitID":"alexfoodw"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"alexfoodw"},"content":" * Parses input arguments and creates a new FacebookPostCommand object"},{"lineNumber":12,"author":{"gitID":"alexfoodw"},"content":" */"},{"lineNumber":13,"author":{"gitID":"alexfoodw"},"content":"public class FacebookLinkCommandParser implements Parser\u003cFacebookLinkCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":15,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"alexfoodw"},"content":"     * Parses the given {@code String} of arguments in the context of the FacebookLinkCommand"},{"lineNumber":17,"author":{"gitID":"alexfoodw"},"content":"     * and returns an FacebookLinkCommand object for execution."},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"alexfoodw"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"alexfoodw"},"content":"    public FacebookLinkCommand parse(String userInput) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"        String trimmedArgs \u003d userInput.trim();"},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacebookLinkCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"        if (!ParserUtil.isValidUrl(trimmedArgs)) {"},{"lineNumber":29,"author":{"gitID":"alexfoodw"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitID":"alexfoodw"},"content":"                    String.format(MESSAGE_INVALID_URL, \"Example: \" + FacebookLinkCommand.EXAMPLE_LINK));"},{"lineNumber":31,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":33,"author":{"gitID":"alexfoodw"},"content":"        return new FacebookLinkCommand(trimmedArgs);"},{"lineNumber":34,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"alexfoodw"},"content":"}"},{"lineNumber":36,"author":{"gitID":"alexfoodw"},"content":"//@@author"}],"authorContributionMap":{"alexfoodw":31,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/FacebookPostCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":5,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookPostCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"alexfoodw"},"content":"//@@author alexfoodw"},{"lineNumber":9,"author":{"gitID":"alexfoodw"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"alexfoodw"},"content":" * Parses input arguments and creates a new FacebookPostCommand object"},{"lineNumber":11,"author":{"gitID":"alexfoodw"},"content":" */"},{"lineNumber":12,"author":{"gitID":"alexfoodw"},"content":"public class FacebookPostCommandParser implements Parser\u003cFacebookPostCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":14,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"alexfoodw"},"content":"     * Parses the given {@code String} of arguments in the context of the FacebookAddCommand"},{"lineNumber":16,"author":{"gitID":"alexfoodw"},"content":"     * and returns an FacebookAddCommand object for execution."},{"lineNumber":17,"author":{"gitID":"alexfoodw"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"alexfoodw"},"content":"    public FacebookPostCommand parse(String userInput) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"alexfoodw"},"content":"        String trimmedArgs \u003d userInput.trim();"},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacebookPostCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"        return new FacebookPostCommand(trimmedArgs);"},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"alexfoodw"},"content":"}"},{"lineNumber":30,"author":{"gitID":"alexfoodw"},"content":"//@@author"}],"authorContributionMap":{"alexfoodw":25,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DISPLAY_PHOTO;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FAV;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SOCIAL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_UNFAV;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.SocialInfo;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"                PREFIX_ADDRESS, PREFIX_FAV, PREFIX_DISPLAY_PHOTO, PREFIX_UNFAV, PREFIX_TAG, PREFIX_SOCIAL);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":54,"author":{"gitID":"sarahnzx"},"content":"            ParserUtil.parsePhone(argMultimap.getMultipleValues("},{"lineNumber":55,"author":{"gitID":"sarahnzx"},"content":"                    PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":"            ParserUtil.parseFavorite(argMultimap,"},{"lineNumber":59,"author":{"gitID":"KeithSOC"},"content":"                    PREFIX_FAV,"},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"                    PREFIX_UNFAV).ifPresent(editPersonDescriptor::setFavorite);"},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":"            ParserUtil.parseDisplayPhoto("},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":"                    argMultimap.getValue(PREFIX_DISPLAY_PHOTO)).ifPresent(editPersonDescriptor::setDisplayPhoto);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"            parseSocialInfosForEdit(argMultimap.getAllValues(PREFIX_SOCIAL))"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"                    .ifPresent(editPersonDescriptor::setSocialInfos);"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"marvinchin"},"content":"        return Optional.of(ParserUtil.parseTags(getCollectionToParse(tags)));"},{"lineNumber":90,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":92,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":93,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"marvinchin"},"content":"     * Parses {@code Collection\u003cString\u003e socialInfos} into a {@code Set\u003cSocialInfo\u003e} if {@code tags} is non-empty."},{"lineNumber":95,"author":{"gitID":"marvinchin"},"content":"     * If {@code socialInfos} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":96,"author":{"gitID":"marvinchin"},"content":"     * {@code Set\u003cSocialInfo\u003e} containing zero elements."},{"lineNumber":97,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"marvinchin"},"content":"    private Optional\u003cSet\u003cSocialInfo\u003e\u003e parseSocialInfosForEdit(Collection\u003cString\u003e socialInfos)"},{"lineNumber":99,"author":{"gitID":"marvinchin"},"content":"            throws IllegalValueException {"},{"lineNumber":100,"author":{"gitID":"marvinchin"},"content":"        assert socialInfos !\u003d null;"},{"lineNumber":101,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":102,"author":{"gitID":"marvinchin"},"content":"        if (socialInfos.isEmpty()) {"},{"lineNumber":103,"author":{"gitID":"marvinchin"},"content":"            return Optional.empty();"},{"lineNumber":104,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"marvinchin"},"content":"        return Optional.of(ParserUtil.parseSocialInfos(getCollectionToParse(socialInfos)));"},{"lineNumber":106,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":108,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"marvinchin"},"content":"     * Returns the input collection, or an empty collection if the input collection contains"},{"lineNumber":110,"author":{"gitID":"marvinchin"},"content":"     * only a single element which is an empty string."},{"lineNumber":111,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"marvinchin"},"content":"    private Collection\u003cString\u003e getCollectionToParse(Collection\u003cString\u003e collection) {"},{"lineNumber":113,"author":{"gitID":"marvinchin"},"content":"        return collection.size() \u003d\u003d 1 \u0026\u0026 collection.contains(\"\")"},{"lineNumber":114,"author":{"gitID":"marvinchin"},"content":"                ? Collections.emptySet()"},{"lineNumber":115,"author":{"gitID":"marvinchin"},"content":"                : collection;"},{"lineNumber":116,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahnzx":2,"marvinchin":35,"KeithSOC":9,"-":73}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"sarahnzx"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import java.util.Collection;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":" * Represents a command that deletes {@Person}s from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"public abstract class DeleteCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"            + \": Deletes the specified persons from the address book\\n\""},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"            + \"Alias: \" + COMMAND_ALIAS + \"\\n\""},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"            + \"Parameters: [OPTION] IDENTIFIER [MORE_IDENTIFIERS]...\\n\""},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"            + \"Options: \\n\""},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"            + \"\\tdefault - Deletes the persons identified by the index numbers \""},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"            + \"(must be positive integers) used in the last person listing.\\n\""},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"            + \"\\t\" + DeleteByTagCommand.COMMAND_OPTION"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"            + \" - Deletes the perons in the last person listing with the specified tags.\\n\""},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"            + \"Example:\\n\""},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"            + COMMAND_WORD + \" 1 2\\n\""},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"            + COMMAND_WORD + \" -\" + DeleteByTagCommand.COMMAND_OPTION + \" friends colleagues\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":34,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":35,"author":{"gitID":"sarahnzx"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person(s): %1$s\";"},{"lineNumber":36,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":37,"author":{"gitID":"sarahnzx"},"content":"    private List\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":39,"author":{"gitID":"sarahnzx"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"sarahnzx"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"sarahnzx"},"content":"        Collection\u003cReadOnlyPerson\u003e personsToDelete \u003d getPersonsToDelete();"},{"lineNumber":42,"author":{"gitID":"sarahnzx"},"content":"        StringBuilder deletedPersons \u003d new StringBuilder();"},{"lineNumber":43,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":44,"author":{"gitID":"sarahnzx"},"content":"        for (ReadOnlyPerson personToDelete : personsToDelete) {"},{"lineNumber":45,"author":{"gitID":"sarahnzx"},"content":"            try {"},{"lineNumber":46,"author":{"gitID":"sarahnzx"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":47,"author":{"gitID":"sarahnzx"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":48,"author":{"gitID":"sarahnzx"},"content":"                assert false : \"The target person cannot be missing\";"},{"lineNumber":49,"author":{"gitID":"sarahnzx"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":51,"author":{"gitID":"sarahnzx"},"content":"            deletedPersons.append(\"\\n\");"},{"lineNumber":52,"author":{"gitID":"sarahnzx"},"content":"            deletedPersons.append(personToDelete);"},{"lineNumber":53,"author":{"gitID":"sarahnzx"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"sarahnzx"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPersons));"},{"lineNumber":55,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"     * Returns the collection of {@code Person}s to be deleted."},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"    protected abstract Collection\u003cReadOnlyPerson\u003e getPersonsToDelete() throws CommandException;"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":"                \u0026\u0026 this.targetIndexList.equals(((DeleteCommand) other).targetIndexList)); // state check"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahnzx":24,"marvinchin":23,"KeithSOC":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OPTION;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_FAV_PERSONS;"},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"    public static final String COMMAND_OPTION_FAV \u003d PREFIX_OPTION + FavoriteCommand.COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":"    public static final String MESSAGE_SUCCESS_LIST_ALL \u003d \"Listed all persons\";"},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":"    public static final String MESSAGE_SUCCESS_LIST_FAV \u003d \"Listed all favorite persons\";"},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"    private boolean hasOptionFav \u003d false;"},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"    public ListCommand(String args) {"},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"        if (args.trim().equals(COMMAND_OPTION_FAV)) {"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"            hasOptionFav \u003d true;"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"        if (hasOptionFav) {"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_FAV_PERSONS);"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"            return new CommandResult(MESSAGE_SUCCESS_LIST_FAV);"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"        } else {"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":"            return new CommandResult(MESSAGE_SUCCESS_LIST_ALL);"},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":1,"KeithSOC":28,"-":10}},{"path":"src/main/java/seedu/address/logic/parser/UnFavoriteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.UnFavoriteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":" * Parses input arguments and creates a new UnFavoriteCommand object"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":"public class UnFavoriteCommandParser implements Parser\u003cUnFavoriteCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":"     * Parses the given {@code String} of arguments in the context of the UnFavoriteCommand"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"     * and returns an UnFavoriteCommand object for execution."},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"    public UnFavoriteCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"            List\u003cIndex\u003e indexList \u003d ParserUtil.parseMultipleIndexes(args);"},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"            // Sorts indexes in descending order"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"            Collections.sort(indexList, Collections.reverseOrder());"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"            return new UnFavoriteCommand(indexList);"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnFavoriteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"KeithSOC":26,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    public void setData(Model model, Storage storage, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":4,"-":35}},{"path":"src/main/java/seedu/address/logic/commands/ExportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.DisplayPhoto;"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":" * Exports existing {@code Person}s to an external XML file."},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"public class ExportCommand extends Command {"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_WORD \u003d \"export\";"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports existing contacts.\\n\""},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"            + \"Parameters: FILE PATH (must be a valid file path where the current user has write access\\n\""},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"            + \"Example: \" + COMMAND_WORD + \" /Users/seedu/Documents/exportedData.xml\";"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"    public static final String MESSAGE_EXPORT_CONTACTS_SUCCESS \u003d \"Contacts exported to: %1$s\";"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    public static final String MESSAGE_EXPORT_CONTACTS_FAILURE \u003d \"Unable to export contacts to: %1$s\";"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ExportCommand.class);"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"    private final Path exportFilePath;"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    public ExportCommand(String filePath) {"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        exportFilePath \u003d Paths.get(filePath);"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyAddressBook currentAddressBook \u003d model.getAddressBook();"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyAddressBook exportAddressBook \u003d generateExportAddressBook(currentAddressBook);"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        String absoluteExportFilePathString \u003d exportFilePath.toAbsolutePath().toString();"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"            storage.saveAddressBook(exportAddressBook, absoluteExportFilePathString);"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        } catch (IOException ioe) {"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"            logger.warning(\"Error writing to file at: \" + absoluteExportFilePathString);"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"            throw new CommandException(String.format(MESSAGE_EXPORT_CONTACTS_FAILURE, absoluteExportFilePathString));"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"        return new CommandResult(String.format(MESSAGE_EXPORT_CONTACTS_SUCCESS, absoluteExportFilePathString));"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"     * Generates an address book for exporting that is equivalent to the input address book, but with all display"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"     * pictures removed."},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"    private ReadOnlyAddressBook generateExportAddressBook(ReadOnlyAddressBook currentAddressBook) {"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"        AddressBook exportAddressBook \u003d new AddressBook(currentAddressBook);"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"        for (ReadOnlyPerson person : exportAddressBook.getPersonList()) {"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"            Person personWithoutDisplayPicture \u003d new Person(person);"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"            try {"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"                personWithoutDisplayPicture.setDisplayPhoto(new DisplayPhoto(null));"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"                exportAddressBook.updatePerson(person, personWithoutDisplayPicture);"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"                assert false : \"Display photo should not be invalid\";"},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"                assert false : \"Person should not be missing\";"},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":"        return exportAddressBook;"},{"lineNumber":79,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":81,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"marvinchin"},"content":"    public void setData(Model model, Storage storage, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":83,"author":{"gitID":"marvinchin"},"content":"        this.model \u003d model;"},{"lineNumber":84,"author":{"gitID":"marvinchin"},"content":"        this.storage \u003d storage;"},{"lineNumber":85,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":87,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"marvinchin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"marvinchin"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":90,"author":{"gitID":"marvinchin"},"content":"                || (other instanceof ExportCommand // instanceof handles nulls"},{"lineNumber":91,"author":{"gitID":"marvinchin"},"content":"                \u0026\u0026 this.exportFilePath.equals(((ExportCommand) other).exportFilePath)); // state check"},{"lineNumber":92,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":91,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/DeleteByIndexCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"sarahnzx"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import java.util.Collection;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":" * Deletes {@code Person}s from the address book identified by their indexes in the last displayed person list."},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"public class DeleteByIndexCommand extends DeleteCommand {"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"    private Collection\u003cIndex\u003e targetIndexes;"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"    public DeleteByIndexCommand(Collection\u003cIndex\u003e indexes) {"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"        targetIndexes \u003d indexes;"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"     * Returns the list of {@code Person}s in the last shown list referenced by indexes provided."},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"     * @throws CommandException if any of the input indexes are invalid."},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    private Collection\u003cReadOnlyPerson\u003e mapPersonsToIndexes(Collection\u003cIndex\u003e indexes) throws CommandException {"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        ArrayList\u003cReadOnlyPerson\u003e personSet \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        for (Index index : indexes) {"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"            }"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"            ReadOnlyPerson person \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"            personSet.add(person);"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"        return personSet;"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"    protected Collection\u003cReadOnlyPerson\u003e getPersonsToDelete() throws CommandException {"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"        return mapPersonsToIndexes(targetIndexes);"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"                || (other instanceof DeleteByIndexCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"                \u0026\u0026 this.targetIndexes.equals(((DeleteByIndexCommand) other).targetIndexes)); // state check"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"sarahnzx":1,"marvinchin":45,"-":6}},{"path":"src/main/java/seedu/address/logic/parser/ThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":" * Parses input arguments and creates a new ThemeCommand object"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"public class ThemeCommandParser implements Parser\u003cThemeCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"     * Parses the given {@code String} of arguments in the context of the ThemeCommand"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":"     * and returns an ThemeCommand object for execution."},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":"    public ThemeCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"        OptionBearingArgument opArgs \u003d new OptionBearingArgument(args);"},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":"        String trimmedArgs \u003d opArgs.getRawArgs();"},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"        if (opArgs.getOptions().size() !\u003d 1) {"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"            // theme command must have one option specified"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"        if (trimmedArgs.isEmpty()"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"                || (!opArgs.getOptions().contains(ThemeCommand.COMMAND_OPTION_DAY)"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"                \u0026\u0026 !opArgs.getOptions().contains(ThemeCommand.COMMAND_OPTION_NIGHT))) {"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"            throw new ParseException("},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"        return new ThemeCommand(trimmedArgs);"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"KeithSOC":34,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/SortByDefaultCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.PersonDefaultComparator;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":" * Sorts the {@code Person}s in the address book first by favorite status, then by name in lexicographic order."},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":" * @see PersonDefaultComparator"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"public class SortByDefaultCommand extends SortCommand {"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"    protected Comparator\u003cReadOnlyPerson\u003e getComparator() {"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"        return new PersonDefaultComparator();"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"                || other instanceof SortByDefaultCommand; // instanceof handles nulls"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":22,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"    protected Storage storage;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"    public void setData(Model model, Storage storage, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":3,"-":42}},{"path":"src/main/java/seedu/address/logic/commands/SortByNameCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.PersonNameComparator;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":" * Sorts the {@code Person}s in the address book by their names in lexicographic order order."},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":" * @see PersonNameComparator"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"public class SortByNameCommand extends SortCommand {"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_OPTION \u003d \"name\";"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    protected Comparator\u003cReadOnlyPerson\u003e getComparator() {"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"        return new PersonNameComparator();"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"                || other instanceof SortByNameCommand; // instanceof handles nulls"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":25,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DISPLAY_PHOTO;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FAV;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SOCIAL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book.\\n\""},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"            + \"Alias: \" + COMMAND_ALIAS + \"\\n\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"            + \"[\" + PREFIX_FAV + \"] \""},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"            + \"[\" + PREFIX_DISPLAY_PHOTO + \"DISPLAY_PHOTO_PATH] \""},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \""},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"            + \"[\" + PREFIX_SOCIAL + \"SOCIAL_TYPE USERNAME\" + \"]... \\n\""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"            + PREFIX_FAV + \" \""},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"            + PREFIX_DISPLAY_PHOTO + \"C:/Users/Seedu/Desktop/batman.png \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"            + PREFIX_TAG + \"owesMoney \""},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"            + PREFIX_SOCIAL + \"facebook johnd\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public AddCommand(ReadOnlyPerson person) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        toAdd \u003d new Person(person);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":8,"KeithSOC":6,"-":64}},{"path":"src/main/java/seedu/address/logic/commands/FacebookAddAllFriendsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"alexfoodw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":6,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.Facebook;"},{"lineNumber":7,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.FacebookException;"},{"lineNumber":8,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.Paging;"},{"lineNumber":9,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.ResponseList;"},{"lineNumber":10,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.TaggableFriend;"},{"lineNumber":11,"author":{"gitID":"alexfoodw"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":16,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":17,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":"//@@author alexfoodw"},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"alexfoodw"},"content":" * Adds all available friends from a personal Facebook account."},{"lineNumber":21,"author":{"gitID":"alexfoodw"},"content":" */"},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"public class FacebookAddAllFriendsCommand extends Command {"},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"    public static final String COMMAND_WORD \u003d \"facebookaddallfriends\";"},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"    public static final String COMMAND_ALIAS \u003d \"fbaddall\";"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"            + \": adds all available friends from an authenticated Facebook account.\\n\""},{"lineNumber":29,"author":{"gitID":"alexfoodw"},"content":"            + \"Alias: \" + COMMAND_ALIAS + \"\\n\";"},{"lineNumber":30,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_FACEBOOK_ADD_ALL_FRIENDS_ERROR \u003d \"Error with Facebook Tagable Friends API call.\""},{"lineNumber":31,"author":{"gitID":"alexfoodw"},"content":"            + \"User may not be registered as \u0027Test User\u0027\";"},{"lineNumber":32,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_FACEBOOK_ADD_ALL_FRIENDS_PAGING_ERROR \u003d \"Error with getting next page\";"},{"lineNumber":33,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_FACEBOOK_ADD_ALL_FRIENDS_SUCCESS \u003d \" valid friends added from Facebook!\";"},{"lineNumber":34,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_FACEBOOK_ADD_ALL_FRIENDS_INITIATION_ERROR \u003d \"User not authenticated, \""},{"lineNumber":35,"author":{"gitID":"alexfoodw"},"content":"            + \"please input \u0027facebookconnect\u0027 command first.\";"},{"lineNumber":36,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_FACEBOOK_ADD_ALL_FRIENDS_INITIATED \u003d \"Adding all friends from Facebook...\";"},{"lineNumber":37,"author":{"gitID":"alexfoodw"},"content":"    public static final String EXTRACT_USER_ID_REGEX \u003d \"set\u003da.(.*?)\\\\\u0026type\";"},{"lineNumber":38,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":39,"author":{"gitID":"alexfoodw"},"content":"    private static Facebook facebookInstance;"},{"lineNumber":40,"author":{"gitID":"alexfoodw"},"content":"    private static String currentUserId;"},{"lineNumber":41,"author":{"gitID":"alexfoodw"},"content":"    private static String currentUserName;"},{"lineNumber":42,"author":{"gitID":"alexfoodw"},"content":"    private static ResponseList\u003cTaggableFriend\u003e currentList;"},{"lineNumber":43,"author":{"gitID":"alexfoodw"},"content":"    private static Paging\u003cTaggableFriend\u003e currentPaging;"},{"lineNumber":44,"author":{"gitID":"alexfoodw"},"content":"    private static String currentPhotoID;"},{"lineNumber":45,"author":{"gitID":"alexfoodw"},"content":"    private static int totalFriendsAdded \u003d 0;"},{"lineNumber":46,"author":{"gitID":"alexfoodw"},"content":"    private static int friendIndex \u003d 0;"},{"lineNumber":47,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":48,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"alexfoodw"},"content":"     * Returns the current Facebook ID of the user being added"},{"lineNumber":50,"author":{"gitID":"alexfoodw"},"content":"     * @return currentUserId"},{"lineNumber":51,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"alexfoodw"},"content":"    public static String getCurrentUserId() {"},{"lineNumber":53,"author":{"gitID":"alexfoodw"},"content":"        return currentUserId;"},{"lineNumber":54,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":56,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"alexfoodw"},"content":"     * Returns the current Facebook Username of the user being added"},{"lineNumber":58,"author":{"gitID":"alexfoodw"},"content":"     * @return currentUserName"},{"lineNumber":59,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"alexfoodw"},"content":"    public static String getCurrentUserName() {"},{"lineNumber":61,"author":{"gitID":"alexfoodw"},"content":"        return currentUserName;"},{"lineNumber":62,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":64,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"alexfoodw"},"content":"     * Increments the counter of total friends added so far"},{"lineNumber":66,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"alexfoodw"},"content":"    public static void incrementTotalFriendsAdded() {"},{"lineNumber":68,"author":{"gitID":"alexfoodw"},"content":"        totalFriendsAdded++;"},{"lineNumber":69,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":71,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"alexfoodw"},"content":"     * Adds all facebook contacts to addressbook"},{"lineNumber":73,"author":{"gitID":"alexfoodw"},"content":"     * @throws CommandException"},{"lineNumber":74,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"alexfoodw"},"content":"    public static void addFirstFriend() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"alexfoodw"},"content":"        facebookInstance \u003d FacebookConnectCommand.getFacebookInstance();"},{"lineNumber":77,"author":{"gitID":"alexfoodw"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"alexfoodw"},"content":"            currentList \u003d facebookInstance.getTaggableFriends();"},{"lineNumber":79,"author":{"gitID":"alexfoodw"},"content":"            currentPaging \u003d currentList.getPaging();"},{"lineNumber":80,"author":{"gitID":"alexfoodw"},"content":"            addNextFriend();"},{"lineNumber":81,"author":{"gitID":"alexfoodw"},"content":"        } catch (FacebookException e) {"},{"lineNumber":82,"author":{"gitID":"alexfoodw"},"content":"            throw new CommandException(MESSAGE_FACEBOOK_ADD_ALL_FRIENDS_ERROR);"},{"lineNumber":83,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":85,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":87,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"alexfoodw"},"content":"     * Proceeds to add the next available friend from facebook contacts to addressbook"},{"lineNumber":89,"author":{"gitID":"alexfoodw"},"content":"     * @throws CommandException"},{"lineNumber":90,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"alexfoodw"},"content":"    public static void addNextFriend() throws CommandException {"},{"lineNumber":92,"author":{"gitID":"alexfoodw"},"content":"        if (friendIndex \u003e\u003d currentList.size()) {"},{"lineNumber":93,"author":{"gitID":"alexfoodw"},"content":"            // go to next list"},{"lineNumber":94,"author":{"gitID":"alexfoodw"},"content":"            try {"},{"lineNumber":95,"author":{"gitID":"alexfoodw"},"content":"                currentList \u003d facebookInstance.fetchNext(currentPaging);"},{"lineNumber":96,"author":{"gitID":"alexfoodw"},"content":"            } catch (FacebookException e) {"},{"lineNumber":97,"author":{"gitID":"alexfoodw"},"content":"                throw new CommandException(MESSAGE_FACEBOOK_ADD_ALL_FRIENDS_PAGING_ERROR);"},{"lineNumber":98,"author":{"gitID":"alexfoodw"},"content":"            }"},{"lineNumber":99,"author":{"gitID":"alexfoodw"},"content":"            if (currentList \u003d\u003d null) {"},{"lineNumber":100,"author":{"gitID":"alexfoodw"},"content":"                finishFacebookAddAllFriends();"},{"lineNumber":101,"author":{"gitID":"alexfoodw"},"content":"                return;"},{"lineNumber":102,"author":{"gitID":"alexfoodw"},"content":"            }"},{"lineNumber":103,"author":{"gitID":"alexfoodw"},"content":"            friendIndex \u003d 0;"},{"lineNumber":104,"author":{"gitID":"alexfoodw"},"content":"            currentPaging \u003d currentList.getPaging();"},{"lineNumber":105,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"alexfoodw"},"content":"        TaggableFriend friend \u003d currentList.get(friendIndex);"},{"lineNumber":107,"author":{"gitID":"alexfoodw"},"content":"        currentUserName \u003d friend.getName();"},{"lineNumber":108,"author":{"gitID":"alexfoodw"},"content":"        // extract photo ID"},{"lineNumber":109,"author":{"gitID":"alexfoodw"},"content":"        String photoUrl \u003d friend.getPicture().getURL().toString();"},{"lineNumber":110,"author":{"gitID":"alexfoodw"},"content":"        Pattern p \u003d Pattern.compile(\"_(.*?)\\\\_\");"},{"lineNumber":111,"author":{"gitID":"alexfoodw"},"content":"        Matcher m \u003d p.matcher(photoUrl);"},{"lineNumber":112,"author":{"gitID":"alexfoodw"},"content":"        m.matches();"},{"lineNumber":113,"author":{"gitID":"alexfoodw"},"content":"        m.find();"},{"lineNumber":114,"author":{"gitID":"alexfoodw"},"content":"        currentPhotoID \u003d m.group(1);"},{"lineNumber":115,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":116,"author":{"gitID":"alexfoodw"},"content":"        // initialise getting user ID"},{"lineNumber":117,"author":{"gitID":"alexfoodw"},"content":"        WebEngine webEngine \u003d FacebookConnectCommand.getWebEngine();"},{"lineNumber":118,"author":{"gitID":"alexfoodw"},"content":"        webEngine.load(FacebookConnectCommand.FACEBOOK_DOMAIN + currentPhotoID);"},{"lineNumber":119,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":121,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"alexfoodw"},"content":"     * Sets up the counter and adds the next Facebook Contact"},{"lineNumber":123,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"alexfoodw"},"content":"    public static void setupNextFriend() {"},{"lineNumber":125,"author":{"gitID":"alexfoodw"},"content":"        friendIndex++;"},{"lineNumber":126,"author":{"gitID":"alexfoodw"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"alexfoodw"},"content":"            addNextFriend();"},{"lineNumber":128,"author":{"gitID":"alexfoodw"},"content":"        } catch (CommandException e) {"},{"lineNumber":129,"author":{"gitID":"alexfoodw"},"content":"            new CommandException(MESSAGE_FACEBOOK_ADD_ALL_FRIENDS_ERROR);"},{"lineNumber":130,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":133,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"alexfoodw"},"content":"     * Extracts the user id for the required URL"},{"lineNumber":135,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"alexfoodw"},"content":"    public static void setUserId(String url) {"},{"lineNumber":137,"author":{"gitID":"alexfoodw"},"content":"        // extract photo ID"},{"lineNumber":138,"author":{"gitID":"alexfoodw"},"content":"        Pattern p \u003d Pattern.compile(EXTRACT_USER_ID_REGEX);"},{"lineNumber":139,"author":{"gitID":"alexfoodw"},"content":"        Matcher m \u003d p.matcher(url);"},{"lineNumber":140,"author":{"gitID":"alexfoodw"},"content":"        m.matches();"},{"lineNumber":141,"author":{"gitID":"alexfoodw"},"content":"        m.find();"},{"lineNumber":142,"author":{"gitID":"alexfoodw"},"content":"        String groupId \u003d m.group(1);"},{"lineNumber":143,"author":{"gitID":"alexfoodw"},"content":"        String[] parts \u003d groupId.split(\"\\\\.\");"},{"lineNumber":144,"author":{"gitID":"alexfoodw"},"content":"        currentUserId \u003d parts[2];"},{"lineNumber":145,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":147,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"alexfoodw"},"content":"     * Completes and exits the command"},{"lineNumber":149,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"alexfoodw"},"content":"    private static void finishFacebookAddAllFriends() {"},{"lineNumber":151,"author":{"gitID":"alexfoodw"},"content":"        FacebookConnectCommand.loadUserPage();"},{"lineNumber":152,"author":{"gitID":"alexfoodw"},"content":"        EventsCenter.getInstance().post(new NewResultAvailableEvent(totalFriendsAdded"},{"lineNumber":153,"author":{"gitID":"alexfoodw"},"content":"                + MESSAGE_FACEBOOK_ADD_ALL_FRIENDS_SUCCESS + \" (From \""},{"lineNumber":154,"author":{"gitID":"alexfoodw"},"content":"                + FacebookConnectCommand.getAuthenticatedUsername() + \"\u0027s account)\", false));"},{"lineNumber":155,"author":{"gitID":"alexfoodw"},"content":"        friendIndex \u003d 0;"},{"lineNumber":156,"author":{"gitID":"alexfoodw"},"content":"        totalFriendsAdded \u003d 0;"},{"lineNumber":157,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":159,"author":{"gitID":"alexfoodw"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"alexfoodw"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":161,"author":{"gitID":"alexfoodw"},"content":"        if (!FacebookConnectCommand.isAuthenticated()) {"},{"lineNumber":162,"author":{"gitID":"alexfoodw"},"content":"            throw new CommandException(MESSAGE_FACEBOOK_ADD_ALL_FRIENDS_INITIATION_ERROR);"},{"lineNumber":163,"author":{"gitID":"alexfoodw"},"content":"        } else {"},{"lineNumber":164,"author":{"gitID":"alexfoodw"},"content":"            BrowserPanel.setProcessType(COMMAND_WORD);"},{"lineNumber":165,"author":{"gitID":"alexfoodw"},"content":"            addFirstFriend();"},{"lineNumber":166,"author":{"gitID":"alexfoodw"},"content":"            return new CommandResult(MESSAGE_FACEBOOK_ADD_ALL_FRIENDS_INITIATED);"},{"lineNumber":167,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":170,"author":{"gitID":"alexfoodw"},"content":"    @Override"},{"lineNumber":171,"author":{"gitID":"alexfoodw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":172,"author":{"gitID":"alexfoodw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":173,"author":{"gitID":"alexfoodw"},"content":"                || (other instanceof FacebookAddAllFriendsCommand); // instanceof handles nulls"},{"lineNumber":174,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"alexfoodw"},"content":"}"},{"lineNumber":176,"author":{"gitID":"alexfoodw"},"content":"//@@author"}],"authorContributionMap":{"alexfoodw":172,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/ThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"KeithSOC"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.ui.UiTheme;"},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":7,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"KeithSOC"},"content":" * Changes the application theme to the user specified option."},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"public class ThemeCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"    public static final String COMMAND_ALIAS \u003d \"t\";"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"    public static final String COMMAND_OPTION_DAY \u003d \"day\";"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"    public static final String COMMAND_OPTION_NIGHT \u003d \"night\";"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":"            + \": Changes the application theme to the specified option.\\n\""},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":"            + \"Alias: \" + COMMAND_ALIAS + \"\\n\""},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":"            + \"Parameters: -OPTION\\n\""},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"            + \"Options: \\n\""},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":"            + \"\\t\" + COMMAND_OPTION_DAY + \" - Changes the application theme to a light color scheme.\\n\""},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"            + \"\\t\" + COMMAND_OPTION_NIGHT + \" - Changes the application theme to a dark color scheme.\\n\""},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"            + \"Example: \\n\""},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"            + \"\\t\" + COMMAND_WORD + \" -\" + COMMAND_OPTION_DAY + \"\\n\""},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"            + \"\\t\" + COMMAND_WORD + \" -\" + COMMAND_OPTION_NIGHT + \"\\n\";"},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"    public static final String MESSAGE_THEME_CHANGE_SUCCESS \u003d \"Theme successfully applied! ✓\";"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"    private final String optedTheme;"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"    public ThemeCommand (String args) {"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"        this.optedTheme \u003d args;"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"        UiTheme.getInstance().changeTheme(optedTheme);"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"        return new CommandResult(MESSAGE_THEME_CHANGE_SUCCESS);"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"                || (other instanceof ThemeCommand // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"                \u0026\u0026 this.optedTheme.equals(((ThemeCommand) other).optedTheme)); // state check"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"KeithSOC":47,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":" * Sorts the displayed person list."},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"public abstract class SortCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_ALIAS \u003d \"sr\";"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"    public static final String MESSAGE_SORT_SUCCESS \u003d \"Person list sorted!\\n\";"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the displayed person list.\\n\""},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"            + \"Alias: \" + COMMAND_ALIAS + \"\\n\""},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"            + \"Parameters: [OPTION]\\n\""},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"            + \"Options: \\n\""},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"            + \"\\tdefault - Sorts first by favorite status of a contact, then by name in alphabetical order.\\n\""},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"            + \"\\t\" + SortByNameCommand.COMMAND_OPTION + \" - Sorts by name in alphabetical order\\n\""},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"            + \"Example: \\n\""},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"            + COMMAND_WORD + \"\\n\";"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        Comparator\u003cReadOnlyPerson\u003e comparator \u003d getComparator();"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        model.sortPersons(comparator);"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"        return new CommandResult(MESSAGE_SORT_SUCCESS);"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"     * Gets the comparator that defines the ordering in the person list."},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"    protected abstract Comparator\u003cReadOnlyPerson\u003e getComparator();"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":36,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/FindByTagsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.TagsContainKeywordsPredicate;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":" * Finds and lists all {@code Person}s in address book whose {@code Tag}s contains any of the input keywords."},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":" * Keyword matching is case sensitive."},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"public class FindByTagsCommand extends FindCommand {"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_OPTION \u003d \"tag\";"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"    private TagsContainKeywordsPredicate predicate;"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    public FindByTagsCommand(TagsContainKeywordsPredicate predicate) {"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"    protected Predicate\u003cReadOnlyPerson\u003e getPredicate() {"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"        return predicate;"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"                || (other instanceof FindByTagsCommand // instanceof handles nulls"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"                \u0026\u0026 this.predicate.equals(((FindByTagsCommand) other).predicate)); // state check"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":33}},{"path":"src/main/java/seedu/address/logic/commands/FavoriteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"KeithSOC"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":3,"author":{"gitID":"KeithSOC"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitID":"KeithSOC"},"content":"import java.util.LinkedHashSet;"},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":" * Favorites the person(s) identified using it\u0027s last displayed index from the address book."},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":"public class FavoriteCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":"    public static final String COMMAND_WORD \u003d \"fav\";"},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"            + \": Favorites the person(s) identified by the index number used in the last person listing.\\n\""},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"            + \"Parameters: INDEX [ADDITIONAL INDEXES] (INDEX must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\\n\""},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 3\";"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"    public static final String MESSAGE_FAVORITE_PERSON_SUCCESS \u003d \"Added as favorite contact(s): \";"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"    public static final String MESSAGE_FAVORITE_PERSON_FAILURE \u003d \"These contact(s) has already been \""},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"            + \"added as favorites: \";"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"    private final List\u003cIndex\u003e targetIndexList;"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"    private final Set\u003cReadOnlyPerson\u003e targetPersonList;"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":"    private final StringBuilder allNameList;"},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"    private final StringBuilder successNameList;"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"    private final StringBuilder failureNameList;"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"    public FavoriteCommand(List\u003cIndex\u003e targetIndexList) {"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"        this.targetIndexList \u003d targetIndexList;"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"        this.targetPersonList \u003d new LinkedHashSet\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"        this.allNameList \u003d new StringBuilder();"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"        this.successNameList \u003d new StringBuilder();"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"        this.failureNameList \u003d new StringBuilder();"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"     * Efficiently check whether user input any index larger than address book size with Collections.max"},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"     * This is to avoid the following situation:"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"     * E.g. AddressBook size is 100"},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"     * Execute \"fav 6 7 101 8 9\" -\u003e"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"     * persons at indexes 7 and 8 gets favorited but method halts due to CommandException for index 101 and"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"     * person at index 9 and beyond does not get favorited."},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"    private void checkIndexBoundaries(List\u003cReadOnlyPerson\u003e lastShownList) throws CommandException {"},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":"        if (Collections.max(targetIndexList).getOneBased() \u003e lastShownList.size()) {"},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":"            if (targetIndexList.size() \u003e 1) {"},{"lineNumber":59,"author":{"gitID":"KeithSOC"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX_MULTI);"},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"            } else {"},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"KeithSOC"},"content":"     * Stores all persons to favorite into {@code targetPersonList} found from the index(es) used in last shown list."},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":"     * {@code targetPersonList} uses a LinkedHashSet implementation for the following purposes:"},{"lineNumber":69,"author":{"gitID":"KeithSOC"},"content":"     * 1. Prevent duplicates (of persons) resulting from such an input: fav 1 1 1"},{"lineNumber":70,"author":{"gitID":"KeithSOC"},"content":"     * 2. Preserve insertion order (since {@code targetIndexList} is sorted)"},{"lineNumber":71,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"KeithSOC"},"content":"    private void getPersonsToFavorite(List\u003cReadOnlyPerson\u003e lastShownList) {"},{"lineNumber":73,"author":{"gitID":"KeithSOC"},"content":"        for (Index targetIndex : targetIndexList) {"},{"lineNumber":74,"author":{"gitID":"KeithSOC"},"content":"            ReadOnlyPerson personToFavorite \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"            if (!isAlreadyFavorite(personToFavorite)) { // Add person into set"},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"                targetPersonList.add(personToFavorite);"},{"lineNumber":77,"author":{"gitID":"KeithSOC"},"content":"            } else { // Do not add person into set, append into failure name list instead"},{"lineNumber":78,"author":{"gitID":"KeithSOC"},"content":"                failureNameList.append(\"\\n\\t- \");"},{"lineNumber":79,"author":{"gitID":"KeithSOC"},"content":"                failureNameList.append(personToFavorite.getName().toString());"},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":84,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":"     * Checks if {@code person} is already a favorite contact."},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":"    private boolean isAlreadyFavorite(ReadOnlyPerson person) {"},{"lineNumber":88,"author":{"gitID":"KeithSOC"},"content":"        return person.getFavorite().isFavorite();"},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"KeithSOC"},"content":"     * Adds all appropriate String messages into {@code allNameList}."},{"lineNumber":93,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"KeithSOC"},"content":"    private String compileAllNames() {"},{"lineNumber":95,"author":{"gitID":"KeithSOC"},"content":"        if (successNameList.length() !\u003d 0 \u0026\u0026 failureNameList.length() !\u003d 0) {"},{"lineNumber":96,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(MESSAGE_FAVORITE_PERSON_SUCCESS);"},{"lineNumber":97,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(successNameList);"},{"lineNumber":98,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(\"\\n\");"},{"lineNumber":99,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(MESSAGE_FAVORITE_PERSON_FAILURE);"},{"lineNumber":100,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(failureNameList);"},{"lineNumber":101,"author":{"gitID":"KeithSOC"},"content":"        } else if (successNameList.length() !\u003d 0 \u0026\u0026 failureNameList.length() \u003d\u003d 0) {"},{"lineNumber":102,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(MESSAGE_FAVORITE_PERSON_SUCCESS);"},{"lineNumber":103,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(successNameList);"},{"lineNumber":104,"author":{"gitID":"KeithSOC"},"content":"        } else {"},{"lineNumber":105,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(MESSAGE_FAVORITE_PERSON_FAILURE);"},{"lineNumber":106,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(failureNameList);"},{"lineNumber":107,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"KeithSOC"},"content":"        return allNameList.toString();"},{"lineNumber":109,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":111,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"KeithSOC"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":113,"author":{"gitID":"KeithSOC"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":114,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":115,"author":{"gitID":"KeithSOC"},"content":"        checkIndexBoundaries(lastShownList);"},{"lineNumber":116,"author":{"gitID":"KeithSOC"},"content":"        /*"},{"lineNumber":117,"author":{"gitID":"KeithSOC"},"content":"         * As long no exception is thrown above i.e. all index are within boundaries,"},{"lineNumber":118,"author":{"gitID":"KeithSOC"},"content":"         * the following codes will run"},{"lineNumber":119,"author":{"gitID":"KeithSOC"},"content":"         */"},{"lineNumber":120,"author":{"gitID":"KeithSOC"},"content":"        getPersonsToFavorite(lastShownList);"},{"lineNumber":121,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":"        for (ReadOnlyPerson personToFavorite : targetPersonList) {"},{"lineNumber":123,"author":{"gitID":"KeithSOC"},"content":"            try {"},{"lineNumber":124,"author":{"gitID":"KeithSOC"},"content":"                model.toggleFavoritePerson(personToFavorite, COMMAND_WORD);"},{"lineNumber":125,"author":{"gitID":"KeithSOC"},"content":"                successNameList.append(\"\\n\\t★ \");"},{"lineNumber":126,"author":{"gitID":"KeithSOC"},"content":"                successNameList.append(personToFavorite.getName().toString());"},{"lineNumber":127,"author":{"gitID":"KeithSOC"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":128,"author":{"gitID":"KeithSOC"},"content":"                throw new CommandException(EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":129,"author":{"gitID":"KeithSOC"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":130,"author":{"gitID":"KeithSOC"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":131,"author":{"gitID":"KeithSOC"},"content":"            }"},{"lineNumber":132,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":134,"author":{"gitID":"KeithSOC"},"content":"        return new CommandResult(compileAllNames());"},{"lineNumber":135,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":137,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"KeithSOC"},"content":"    public boolean equals(Object other) {"},{"lineNumber":139,"author":{"gitID":"KeithSOC"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":140,"author":{"gitID":"KeithSOC"},"content":"                || (other instanceof FavoriteCommand // instanceof handles nulls"},{"lineNumber":141,"author":{"gitID":"KeithSOC"},"content":"                \u0026\u0026 this.targetIndexList.equals(((FavoriteCommand) other).targetIndexList)); // state check"},{"lineNumber":142,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":144,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"KeithSOC":137,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"    public void setData(Model model, Storage storage, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":4,"-":37}},{"path":"src/main/java/seedu/address/logic/commands/DeleteByTagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import java.util.Collection;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.TagsContainKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":" * Deletes {@code Person}s from the list whose {@code Tag}s match the input keywords."},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"public class DeleteByTagCommand extends DeleteCommand {"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_OPTION \u003d \"tag\";"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    private Set\u003cString\u003e targetTags;"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"    public DeleteByTagCommand(Set\u003cString\u003e tags) {"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"        targetTags \u003d tags;"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"     * Returns the list of {@code Person}s in the last shown list whose {@code Tag}s match the input keywords."},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    private Collection\u003cReadOnlyPerson\u003e mapPersonsToTags(Collection\u003cString\u003e keywords) {"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"        TagsContainKeywordsPredicate predicate \u003d new TagsContainKeywordsPredicate(keywords);"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        List\u003cReadOnlyPerson\u003e matchedPersons \u003d lastShownList.stream().filter(predicate).collect(Collectors.toList());"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"        return matchedPersons;"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    protected Collection\u003cReadOnlyPerson\u003e getPersonsToDelete() {"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"        return mapPersonsToTags(targetTags);"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"                || (other instanceof DeleteByTagCommand // instanceof handles nulls"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"                \u0026\u0026 this.targetTags.equals(((DeleteByTagCommand) other).targetTags)); // state check"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":43,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DISPLAY_PHOTO;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FAV;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SOCIAL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_UNFAV;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.DisplayPhoto;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.SocialInfo;"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.UniqueSocialInfoList;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"            + \"Alias: \" + COMMAND_ALIAS + \"\\n\""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"            + \"[\" + PREFIX_FAV + \" OR \" + PREFIX_UNFAV + \"] \""},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"            + \"[\" + PREFIX_DISPLAY_PHOTO + \"DISPLAY_PHOTO_PATH] \""},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \""},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"            + \"[\" + PREFIX_SOCIAL + \"SOCIAL_TYPE USERNAME\" + \"]... \\n\""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"marvinchin"},"content":"        Person editedPerson \u003d null;"},{"lineNumber":92,"author":{"gitID":"marvinchin"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"marvinchin"},"content":"            editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":94,"author":{"gitID":"marvinchin"},"content":"        } catch (DuplicateDataException dde) {"},{"lineNumber":95,"author":{"gitID":"marvinchin"},"content":"            throw new CommandException(dde.getMessage());"},{"lineNumber":96,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(ReadOnlyPerson personToEdit,"},{"lineNumber":114,"author":{"gitID":"marvinchin"},"content":"                                             EditPersonDescriptor editPersonDescriptor) throws DuplicateDataException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":121,"author":{"gitID":"KeithSOC"},"content":"        Favorite updatedFavorite \u003d editPersonDescriptor.getFavorite().orElse(personToEdit.getFavorite());"},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":"        DisplayPhoto updatedPhoto \u003d editPersonDescriptor.getDisplayPhoto().orElse(personToEdit.getDisplayPhoto());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":124,"author":{"gitID":"marvinchin"},"content":"        Set\u003cSocialInfo\u003e updatedSocialInfos \u003d"},{"lineNumber":125,"author":{"gitID":"marvinchin"},"content":"                editPersonDescriptor.getSocialInfos().orElse(personToEdit.getSocialInfos());"},{"lineNumber":126,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList uniqueSocialInfoList \u003d new UniqueSocialInfoList(updatedSocialInfos);"},{"lineNumber":127,"author":{"gitID":"KeithSOC"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedFavorite, updatedPhoto,"},{"lineNumber":128,"author":{"gitID":"marvinchin"},"content":"                updatedTags, uniqueSocialInfoList);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":158,"author":{"gitID":"KeithSOC"},"content":"        private Favorite favorite;"},{"lineNumber":159,"author":{"gitID":"KeithSOC"},"content":"        private DisplayPhoto displayPhoto;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":161,"author":{"gitID":"marvinchin"},"content":"        private Set\u003cSocialInfo\u003e socialInfos;"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            this.name \u003d toCopy.name;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            this.phone \u003d toCopy.phone;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            this.email \u003d toCopy.email;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            this.address \u003d toCopy.address;"},{"lineNumber":170,"author":{"gitID":"KeithSOC"},"content":"            this.favorite \u003d toCopy.favorite;"},{"lineNumber":171,"author":{"gitID":"KeithSOC"},"content":"            this.displayPhoto \u003d toCopy.displayPhoto;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            this.tags \u003d toCopy.tags;"},{"lineNumber":173,"author":{"gitID":"marvinchin"},"content":"            this.socialInfos \u003d toCopy.socialInfos;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":178,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":180,"author":{"gitID":"KeithSOC"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address,"},{"lineNumber":181,"author":{"gitID":"KeithSOC"},"content":"                    this.favorite, this.displayPhoto, this.tags, this.socialInfos);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"KeithSOC"},"content":"        //@@author keithsoc"},{"lineNumber":217,"author":{"gitID":"KeithSOC"},"content":"        public void setFavorite(Favorite favorite) {"},{"lineNumber":218,"author":{"gitID":"KeithSOC"},"content":"            this.favorite \u003d favorite;"},{"lineNumber":219,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":221,"author":{"gitID":"KeithSOC"},"content":"        public Optional\u003cFavorite\u003e getFavorite() {"},{"lineNumber":222,"author":{"gitID":"KeithSOC"},"content":"            return Optional.ofNullable(favorite);"},{"lineNumber":223,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":225,"author":{"gitID":"KeithSOC"},"content":"        public void setDisplayPhoto(DisplayPhoto displayPhoto) {"},{"lineNumber":226,"author":{"gitID":"KeithSOC"},"content":"            this.displayPhoto \u003d displayPhoto;"},{"lineNumber":227,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":229,"author":{"gitID":"KeithSOC"},"content":"        public Optional\u003cDisplayPhoto\u003e getDisplayPhoto() {"},{"lineNumber":230,"author":{"gitID":"KeithSOC"},"content":"            return Optional.ofNullable(displayPhoto);"},{"lineNumber":231,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"KeithSOC"},"content":"        //@@author"},{"lineNumber":233,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            this.tags \u003d tags;"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"marvinchin"},"content":"        //@@author marvinchin"},{"lineNumber":239,"author":{"gitID":"marvinchin"},"content":"        public Optional\u003cSet\u003cSocialInfo\u003e\u003e getSocialInfos() {"},{"lineNumber":240,"author":{"gitID":"marvinchin"},"content":"            return Optional.ofNullable(socialInfos);"},{"lineNumber":241,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":243,"author":{"gitID":"marvinchin"},"content":"        public void setSocialInfos(Set\u003cSocialInfo\u003e socialInfos) {"},{"lineNumber":244,"author":{"gitID":"marvinchin"},"content":"            this.socialInfos \u003d socialInfos;"},{"lineNumber":245,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"marvinchin"},"content":"        //@@author"},{"lineNumber":247,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(tags);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":268,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":269,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":270,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":271,"author":{"gitID":"KeithSOC"},"content":"                    \u0026\u0026 getFavorite().equals(e.getFavorite())"},{"lineNumber":272,"author":{"gitID":"KeithSOC"},"content":"                    \u0026\u0026 getDisplayPhoto().equals(e.getDisplayPhoto())"},{"lineNumber":273,"author":{"gitID":"marvinchin"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())"},{"lineNumber":274,"author":{"gitID":"marvinchin"},"content":"                    \u0026\u0026 getSocialInfos().equals(e.getSocialInfos());"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":32,"KeithSOC":36,"-":209}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"sarahnzx"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"sarahnzx"},"content":"import seedu.address.model.social.SocialInfo;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"            + \"Alias: \" + COMMAND_ALIAS + \"\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":30,"author":{"gitID":"sarahnzx"},"content":"    public static final String MESSAGE_SOCIAL_TYPE_NOT_FOUND \u003d \"Requested social media type not found for person.\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":33,"author":{"gitID":"sarahnzx"},"content":"    private String socialType \u003d null;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":40,"author":{"gitID":"sarahnzx"},"content":"    public SelectCommand(Index targetIndex, String socialType) {"},{"lineNumber":41,"author":{"gitID":"sarahnzx"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":42,"author":{"gitID":"sarahnzx"},"content":"        this.socialType \u003d socialType;"},{"lineNumber":43,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"sarahnzx"},"content":"    //@@author"},{"lineNumber":45,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyPerson selectedPerson \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"        if (socialType !\u003d null \u0026\u0026 !checkPersonHasSocialType(selectedPerson, socialType)) {"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"            // check to see if the social type matches any of the selected person\u0027s social media accounts"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"            // if the selected person does not have the requested social type, throw a command exception"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"            throw new CommandException(MESSAGE_SOCIAL_TYPE_NOT_FOUND);"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"            model.selectPerson(selectedPerson);"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"            // index of person might have shifted because of the select operation"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"            // so we need to find the new index"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"            Index newIndex \u003d model.getPersonIndex(selectedPerson);"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"            EventsCenter.getInstance().post(new JumpToListRequestEvent(newIndex, socialType));"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"            assert false : \"The selected person should be in the last shown list\";"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":78,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":79,"author":{"gitID":"sarahnzx"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"sarahnzx"},"content":"     * Checks if a person has a specified social type."},{"lineNumber":81,"author":{"gitID":"sarahnzx"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"sarahnzx"},"content":"    private boolean checkPersonHasSocialType(ReadOnlyPerson selectedPerson, String socialType) {"},{"lineNumber":83,"author":{"gitID":"sarahnzx"},"content":"        Set\u003cSocialInfo\u003e selectedPersonSocialInfos \u003d selectedPerson.getSocialInfos();"},{"lineNumber":84,"author":{"gitID":"sarahnzx"},"content":"        boolean hasSameSocialType \u003d false;"},{"lineNumber":85,"author":{"gitID":"sarahnzx"},"content":"        // iterate through the SocialInfos of the selected person"},{"lineNumber":86,"author":{"gitID":"sarahnzx"},"content":"        for (SocialInfo si : selectedPersonSocialInfos) {"},{"lineNumber":87,"author":{"gitID":"sarahnzx"},"content":"            if (si.getSocialType().equals(socialType)) {"},{"lineNumber":88,"author":{"gitID":"sarahnzx"},"content":"                hasSameSocialType \u003d true;"},{"lineNumber":89,"author":{"gitID":"sarahnzx"},"content":"                break;"},{"lineNumber":90,"author":{"gitID":"sarahnzx"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"sarahnzx"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"sarahnzx"},"content":"        return hasSameSocialType;"},{"lineNumber":93,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"sarahnzx"},"content":"    //@@author"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahnzx":28,"marvinchin":34,"-":40}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    public void setData(Model model, Storage storage, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":4,"-":35}},{"path":"src/main/java/seedu/address/logic/commands/FacebookPostCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"alexfoodw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":3,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.Facebook;"},{"lineNumber":4,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.FacebookException;"},{"lineNumber":5,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":6,"author":{"gitID":"alexfoodw"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":11,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":12,"author":{"gitID":"alexfoodw"},"content":"//@@author alexfoodw"},{"lineNumber":13,"author":{"gitID":"alexfoodw"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"alexfoodw"},"content":" * Posts a message to a personal Facebook account."},{"lineNumber":15,"author":{"gitID":"alexfoodw"},"content":" */"},{"lineNumber":16,"author":{"gitID":"alexfoodw"},"content":"public class FacebookPostCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"alexfoodw"},"content":"    public static final String COMMAND_WORD \u003d \"facebookpost\";"},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":"    public static final String COMMAND_ALIAS \u003d \"fbpost\";"},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":"    public static final String EXAMPLE_POST \u003d \"Hello World!\";"},{"lineNumber":20,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":21,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"            + \": post a message to Facebook account\\n\""},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"            + \"Alias: \" + COMMAND_ALIAS + \"\\n\""},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"            + \"Parameters: MESSAGE\\n\""},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + EXAMPLE_POST;"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_FACEBOOK_POST_SUCCESS \u003d \"Posted to Facebook!\";"},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_FACEBOOK_POST_INITIATED \u003d \"User not authenticated, log in to proceed.\";"},{"lineNumber":29,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_FACEBOOK_POST_ERROR \u003d \"Error posting to Facebook\";"},{"lineNumber":30,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":31,"author":{"gitID":"alexfoodw"},"content":"    private static String currentPost;"},{"lineNumber":32,"author":{"gitID":"alexfoodw"},"content":"    private static WebEngine webEngine;"},{"lineNumber":33,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":34,"author":{"gitID":"alexfoodw"},"content":"    private String toPost;"},{"lineNumber":35,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":36,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"alexfoodw"},"content":"     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}"},{"lineNumber":38,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"alexfoodw"},"content":"    public FacebookPostCommand(String message) {"},{"lineNumber":40,"author":{"gitID":"alexfoodw"},"content":"        currentPost \u003d message;"},{"lineNumber":41,"author":{"gitID":"alexfoodw"},"content":"        toPost \u003d message;"},{"lineNumber":42,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":44,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"alexfoodw"},"content":"     * Completes the post command"},{"lineNumber":46,"author":{"gitID":"alexfoodw"},"content":"     * @throws CommandException"},{"lineNumber":47,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"alexfoodw"},"content":"    public static void completePost() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"alexfoodw"},"content":"        Facebook facebookInstance \u003d FacebookConnectCommand.getFacebookInstance();"},{"lineNumber":50,"author":{"gitID":"alexfoodw"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"alexfoodw"},"content":"            facebookInstance.postStatusMessage(currentPost);"},{"lineNumber":52,"author":{"gitID":"alexfoodw"},"content":"        } catch (FacebookException e) {"},{"lineNumber":53,"author":{"gitID":"alexfoodw"},"content":"            // exception not handled because Facebook API still throws an exception even if success,"},{"lineNumber":54,"author":{"gitID":"alexfoodw"},"content":"            // so exception is ignored for now"},{"lineNumber":55,"author":{"gitID":"alexfoodw"},"content":"            e.printStackTrace();"},{"lineNumber":56,"author":{"gitID":"alexfoodw"},"content":"            new CommandException(MESSAGE_FACEBOOK_POST_ERROR);"},{"lineNumber":57,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":59,"author":{"gitID":"alexfoodw"},"content":"        EventsCenter.getInstance().post(new NewResultAvailableEvent(MESSAGE_FACEBOOK_POST_SUCCESS"},{"lineNumber":60,"author":{"gitID":"alexfoodw"},"content":"                + \" (to \" + FacebookConnectCommand.getAuthenticatedUsername() + \"\u0027s page.)\", false));"},{"lineNumber":61,"author":{"gitID":"alexfoodw"},"content":"        webEngine \u003d FacebookConnectCommand.getWebEngine();"},{"lineNumber":62,"author":{"gitID":"alexfoodw"},"content":"        webEngine.load(FacebookConnectCommand.getAuthenticatedUserPage());"},{"lineNumber":63,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":65,"author":{"gitID":"alexfoodw"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"alexfoodw"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":67,"author":{"gitID":"alexfoodw"},"content":"        if (!FacebookConnectCommand.isAuthenticated()) {"},{"lineNumber":68,"author":{"gitID":"alexfoodw"},"content":"            BrowserPanel.setProcessType(COMMAND_WORD);"},{"lineNumber":69,"author":{"gitID":"alexfoodw"},"content":"            FacebookConnectCommand newFacebookConnect \u003d new FacebookConnectCommand();"},{"lineNumber":70,"author":{"gitID":"alexfoodw"},"content":"            newFacebookConnect.execute();"},{"lineNumber":71,"author":{"gitID":"alexfoodw"},"content":"            return new CommandResult(MESSAGE_FACEBOOK_POST_INITIATED);"},{"lineNumber":72,"author":{"gitID":"alexfoodw"},"content":"        } else {"},{"lineNumber":73,"author":{"gitID":"alexfoodw"},"content":"            completePost();"},{"lineNumber":74,"author":{"gitID":"alexfoodw"},"content":"            return new CommandResult(MESSAGE_FACEBOOK_POST_SUCCESS + \" (to \""},{"lineNumber":75,"author":{"gitID":"alexfoodw"},"content":"                    + FacebookConnectCommand.getAuthenticatedUsername() + \"\u0027s page.)\");"},{"lineNumber":76,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":79,"author":{"gitID":"alexfoodw"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"alexfoodw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitID":"alexfoodw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":82,"author":{"gitID":"alexfoodw"},"content":"                || (other instanceof FacebookPostCommand // instanceof handles nulls"},{"lineNumber":83,"author":{"gitID":"alexfoodw"},"content":"                \u0026\u0026 toPost.equals(((FacebookPostCommand) other).toPost));"},{"lineNumber":84,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"alexfoodw"},"content":"}"},{"lineNumber":86,"author":{"gitID":"alexfoodw"},"content":"//@@author"}],"authorContributionMap":{"alexfoodw":84,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":" * Finds and lists all {@code Person}s in address book who meet the specified criteria."},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"public abstract class FindCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons who meet the specified criteria\""},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"            + \"and displays them as a list with index numbers.\\n\""},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"            + \"Alias: \" + COMMAND_ALIAS + \"\\n\""},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"            + \"Options: \\n\""},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"            + \"\\tdefault - Find contacts whose names contain any of the specified keywords (case-sensitive)\\n\""},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"            + \"\\t\" + FindByTagsCommand.COMMAND_OPTION"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"            + \" - Find contacts whose tags contain any of the specified keywords (case-sensitive)\\n\""},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"            + \"Parameters: [OPTION] KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"            + \"Example: \\n\""},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"            + COMMAND_WORD + \" bob alice\\n\""},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"            + COMMAND_WORD + \" -\" + FindByTagsCommand.COMMAND_OPTION + \" friends colleagues\";"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        model.updateFilteredPersonList(getPredicate());"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"     * Returns the predicate used to determine which {@code Person}s should be shown."},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"    protected abstract Predicate\u003cReadOnlyPerson\u003e getPredicate();"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":36,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/SortByRecentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.PersonRecentComparator;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":" * Sorts the {@code Person}s in the address book by the last time they were added, updated, or selected."},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":" * @see PersonRecentComparator"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"public class SortByRecentCommand extends SortCommand {"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_OPTION \u003d \"recent\";"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    protected Comparator\u003cReadOnlyPerson\u003e getComparator() {"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"        return new PersonRecentComparator();"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"                || other instanceof SortByRecentCommand; // instanceof handles nulls"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":25,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_ALIAS \u003d \"x\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":1,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/FacebookConnectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"alexfoodw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":3,"author":{"gitID":"alexfoodw"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitID":"alexfoodw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":6,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.Facebook;"},{"lineNumber":7,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.FacebookException;"},{"lineNumber":8,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.FacebookFactory;"},{"lineNumber":9,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.auth.AccessToken;"},{"lineNumber":10,"author":{"gitID":"alexfoodw"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":15,"author":{"gitID":"alexfoodw"},"content":"//@@author alexfoodw"},{"lineNumber":16,"author":{"gitID":"alexfoodw"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"alexfoodw"},"content":" * Connects the addressbook to a personal Facebook account."},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":" */"},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":"public class FacebookConnectCommand extends Command {"},{"lineNumber":20,"author":{"gitID":"alexfoodw"},"content":"    public static final String COMMAND_WORD \u003d \"facebookconnect\";"},{"lineNumber":21,"author":{"gitID":"alexfoodw"},"content":"    public static final String COMMAND_ALIAS \u003d \"fbconnect\";"},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Connected to your Facebook Account!\";"},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_STARTED_PROCESS \u003d \"Authentication has been initiated. \""},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"            + \"Please log into your Facebook account.\";"},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"    public static final String FACEBOOK_DOMAIN \u003d \"https://www.facebook.com/\";"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"    private static final String FACEBOOK_APP_ID \u003d \"131555220900267\";"},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"    private static final String FACEBOOK_PERMISSIONS \u003d \"user_about_me,email,publish_actions,user_birthday,\""},{"lineNumber":29,"author":{"gitID":"alexfoodw"},"content":"            + \"user_education_history,user_friends,user_games_activity,user_hometown,user_likes,\""},{"lineNumber":30,"author":{"gitID":"alexfoodw"},"content":"            + \"user_location,user_photos,user_posts,user_relationship_details,user_relationships,\""},{"lineNumber":31,"author":{"gitID":"alexfoodw"},"content":"            + \"user_religion_politics,user_status,user_tagged_places,user_videos,user_website,user_work_history,\""},{"lineNumber":32,"author":{"gitID":"alexfoodw"},"content":"            + \"ads_management,ads_read,business_management,manage_pages,pages_manage_cta,publish_pages,\""},{"lineNumber":33,"author":{"gitID":"alexfoodw"},"content":"            + \"user_actions.books,user_actions.fitness,pages_messaging,read_custom_friendlists,\""},{"lineNumber":34,"author":{"gitID":"alexfoodw"},"content":"            + \"pages_messaging_phone_number,pages_messaging_subscriptions,pages_show_list,user_actions.music,\""},{"lineNumber":35,"author":{"gitID":"alexfoodw"},"content":"            + \"user_actions.news,read_page_mailboxes,rsvp_event,user_events,user_managed_groups,\""},{"lineNumber":36,"author":{"gitID":"alexfoodw"},"content":"            + \"pages_manage_instant_articles,user_actions.video,instagram_basic,instagram_manage_comments,\""},{"lineNumber":37,"author":{"gitID":"alexfoodw"},"content":"            + \"instagram_manage_insights,read_audience_network_insights,read_insights\";"},{"lineNumber":38,"author":{"gitID":"alexfoodw"},"content":"    private static final String FACEBOOK_AUTH_URL \u003d"},{"lineNumber":39,"author":{"gitID":"alexfoodw"},"content":"            \"https://graph.facebook.com/oauth/authorize?type\u003duser_agent\u0026client_id\u003d\" + FACEBOOK_APP_ID"},{"lineNumber":40,"author":{"gitID":"alexfoodw"},"content":"                    + \"\u0026redirect_uri\u003d\" + FACEBOOK_DOMAIN + \"\u0026scope\u003d\" + FACEBOOK_PERMISSIONS;"},{"lineNumber":41,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":42,"author":{"gitID":"alexfoodw"},"content":"    private static boolean authenticated \u003d false;"},{"lineNumber":43,"author":{"gitID":"alexfoodw"},"content":"    private static String authenticatedUsername;"},{"lineNumber":44,"author":{"gitID":"alexfoodw"},"content":"    private static String authenticatedUserId;"},{"lineNumber":45,"author":{"gitID":"alexfoodw"},"content":"    private static String authenticatedUserPage;"},{"lineNumber":46,"author":{"gitID":"alexfoodw"},"content":"    private static Facebook facebookInstance;"},{"lineNumber":47,"author":{"gitID":"alexfoodw"},"content":"    private static WebEngine webEngine;"},{"lineNumber":48,"author":{"gitID":"alexfoodw"},"content":"    private static String accessToken;"},{"lineNumber":49,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":50,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":51,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"alexfoodw"},"content":"     * Returns the existing WebEngine"},{"lineNumber":53,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"alexfoodw"},"content":"    public static WebEngine getWebEngine() {"},{"lineNumber":55,"author":{"gitID":"alexfoodw"},"content":"        return webEngine;"},{"lineNumber":56,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":58,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"alexfoodw"},"content":"     * Sets a WebEngine"},{"lineNumber":60,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"alexfoodw"},"content":"    public static void setWebEngine(WebEngine webEngine) {"},{"lineNumber":62,"author":{"gitID":"alexfoodw"},"content":"        FacebookConnectCommand.webEngine \u003d webEngine;"},{"lineNumber":63,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":65,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"alexfoodw"},"content":"     * Returns the authenticated Facebook instance"},{"lineNumber":67,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"alexfoodw"},"content":"    public static Facebook getFacebookInstance() {"},{"lineNumber":69,"author":{"gitID":"alexfoodw"},"content":"        return facebookInstance;"},{"lineNumber":70,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":72,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"alexfoodw"},"content":"     * Returns name of the authenticated user"},{"lineNumber":74,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"alexfoodw"},"content":"    public static String getAuthenticatedUsername() {"},{"lineNumber":76,"author":{"gitID":"alexfoodw"},"content":"        return authenticatedUsername;"},{"lineNumber":77,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":79,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"alexfoodw"},"content":"     * Returns page of the authenticated user"},{"lineNumber":81,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"alexfoodw"},"content":"    public static String getAuthenticatedUserPage() {"},{"lineNumber":83,"author":{"gitID":"alexfoodw"},"content":"        return authenticatedUserPage;"},{"lineNumber":84,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":86,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"alexfoodw"},"content":"     * Checks if there is an authenticated Facebook instance"},{"lineNumber":88,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"alexfoodw"},"content":"    public static boolean isAuthenticated() {"},{"lineNumber":90,"author":{"gitID":"alexfoodw"},"content":"        return authenticated;"},{"lineNumber":91,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":93,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":94,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"alexfoodw"},"content":"     * Loads user page"},{"lineNumber":96,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"alexfoodw"},"content":"    public static void loadUserPage() {"},{"lineNumber":98,"author":{"gitID":"alexfoodw"},"content":"        webEngine.load(authenticatedUserPage);"},{"lineNumber":99,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":101,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"alexfoodw"},"content":"     * Completes the authentication process"},{"lineNumber":103,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"alexfoodw"},"content":"    public static void completeAuth(String url) throws CommandException {"},{"lineNumber":105,"author":{"gitID":"alexfoodw"},"content":"        Pattern p \u003d Pattern.compile(\"access_token\u003d(.*?)\\\\\u0026\");"},{"lineNumber":106,"author":{"gitID":"alexfoodw"},"content":"        Matcher m \u003d p.matcher(url);"},{"lineNumber":107,"author":{"gitID":"alexfoodw"},"content":"        m.matches();"},{"lineNumber":108,"author":{"gitID":"alexfoodw"},"content":"        m.find();"},{"lineNumber":109,"author":{"gitID":"alexfoodw"},"content":"        accessToken \u003d m.group(1);"},{"lineNumber":110,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":111,"author":{"gitID":"alexfoodw"},"content":"        facebookInstance \u003d new FacebookFactory().getInstance();"},{"lineNumber":112,"author":{"gitID":"alexfoodw"},"content":"        facebookInstance.setOAuthPermissions(FACEBOOK_PERMISSIONS);"},{"lineNumber":113,"author":{"gitID":"alexfoodw"},"content":"        facebookInstance.setOAuthAccessToken(new AccessToken(accessToken, null));"},{"lineNumber":114,"author":{"gitID":"alexfoodw"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"alexfoodw"},"content":"            authenticatedUsername \u003d facebookInstance.getName();"},{"lineNumber":116,"author":{"gitID":"alexfoodw"},"content":"            authenticatedUserId \u003d facebookInstance.getMe().getId();"},{"lineNumber":117,"author":{"gitID":"alexfoodw"},"content":"        } catch (FacebookException e) {"},{"lineNumber":118,"author":{"gitID":"alexfoodw"},"content":"            throw new CommandException(\"Error in Facebook Authorisation\");"},{"lineNumber":119,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":121,"author":{"gitID":"alexfoodw"},"content":"        if (accessToken !\u003d null) {"},{"lineNumber":122,"author":{"gitID":"alexfoodw"},"content":"            authenticated \u003d true;"},{"lineNumber":123,"author":{"gitID":"alexfoodw"},"content":"            authenticatedUserPage \u003d \"https://www.facebook.com/\" + authenticatedUserId;"},{"lineNumber":124,"author":{"gitID":"alexfoodw"},"content":"            EventsCenter.getInstance().post(new NewResultAvailableEvent("},{"lineNumber":125,"author":{"gitID":"alexfoodw"},"content":"                    MESSAGE_SUCCESS + \" User name: \" + authenticatedUsername, false));"},{"lineNumber":126,"author":{"gitID":"alexfoodw"},"content":"        } else {"},{"lineNumber":127,"author":{"gitID":"alexfoodw"},"content":"            throw new CommandException(\"Error in Facebook Authorisation\");"},{"lineNumber":128,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":131,"author":{"gitID":"alexfoodw"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"alexfoodw"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":133,"author":{"gitID":"alexfoodw"},"content":"        webEngine.load(FACEBOOK_AUTH_URL);"},{"lineNumber":134,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":135,"author":{"gitID":"alexfoodw"},"content":"        if (webEngine.getLocation().equals(FACEBOOK_AUTH_URL)) {"},{"lineNumber":136,"author":{"gitID":"alexfoodw"},"content":"            return new CommandResult(MESSAGE_STARTED_PROCESS);"},{"lineNumber":137,"author":{"gitID":"alexfoodw"},"content":"        } else {"},{"lineNumber":138,"author":{"gitID":"alexfoodw"},"content":"            throw new CommandException(\"Error in Facebook Authorisation\");"},{"lineNumber":139,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":142,"author":{"gitID":"alexfoodw"},"content":"    @Override"},{"lineNumber":143,"author":{"gitID":"alexfoodw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":144,"author":{"gitID":"alexfoodw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":145,"author":{"gitID":"alexfoodw"},"content":"                || (other instanceof FacebookConnectCommand); // instanceof handles null"},{"lineNumber":146,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"alexfoodw"},"content":"}"},{"lineNumber":148,"author":{"gitID":"alexfoodw"},"content":"//@@author"}],"authorContributionMap":{"alexfoodw":146,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/ImportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":" * Imports contacts from an external XML file"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"public class ImportCommand extends Command {"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"    public static final String COMMAND_WORD \u003d \"import\";"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports contacts from external file.\\n\""},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"            + \"Parameters: FILE PATH (must be a path to a valid exported contacts data file\\n\""},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"            + \"Example: \" + COMMAND_WORD + \" /Users/seedu/Documents/exportedData.xml\";"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"    public static final String MESSAGE_IMPORT_CONTACTS_SUCCESS \u003d \"Contacts imported from: %1$s\";"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"    public static final String MESSAGE_IMPORT_CONTACTS_DCE_FAILURE \u003d \"Unable to parse file at: %1$s\";"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"    public static final String MESSAGE_IMPORT_CONTACTS_IO_FAILURE \u003d \"Unable to import contacts from: %1$s\";"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"    public static final String MESSAGE_IMPORT_CONTACTS_FNF_FAILURE \u003d \"File at %1$s not found\";"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ImportCommand.class);"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"    private final Path importFilePath;"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"    public ImportCommand(String filePath) {"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"        importFilePath \u003d Paths.get(filePath);"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"        String absoluteImportFilePathString \u003d importFilePath.toAbsolutePath().toString();"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"        Optional\u003cReadOnlyAddressBook\u003e optionalImportedAddressBook;"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"            optionalImportedAddressBook \u003d storage.readAddressBook(absoluteImportFilePathString);"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"            logger.warning(\"Error converting file at: \" + absoluteImportFilePathString);"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"            throw new CommandException("},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"                    String.format(MESSAGE_IMPORT_CONTACTS_DCE_FAILURE, absoluteImportFilePathString));"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"        } catch (IOException ioe) {"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"            logger.warning(\"Error reading file at: \" + absoluteImportFilePathString);"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"            throw new CommandException("},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"                    String.format(MESSAGE_IMPORT_CONTACTS_IO_FAILURE, absoluteImportFilePathString));"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"        ReadOnlyAddressBook importedAddressBook;"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"        if (optionalImportedAddressBook.isPresent()) {"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"            importedAddressBook \u003d optionalImportedAddressBook.get();"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"        } else {"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"            // no address book returned, so we know that file was not found"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"            throw new CommandException("},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"                    String.format(MESSAGE_IMPORT_CONTACTS_FNF_FAILURE, absoluteImportFilePathString));"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"        model.addPersons(importedAddressBook.getPersonList());"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"        return new CommandResult(String.format(MESSAGE_IMPORT_CONTACTS_SUCCESS, absoluteImportFilePathString));"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"    public void setData(Model model, Storage storage, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"        this.model \u003d model;"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"        this.storage \u003d storage;"},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":79,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"marvinchin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitID":"marvinchin"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":82,"author":{"gitID":"marvinchin"},"content":"                || (other instanceof ImportCommand // instanceof handles nulls"},{"lineNumber":83,"author":{"gitID":"marvinchin"},"content":"                \u0026\u0026 this.importFilePath.equals(((ImportCommand) other).importFilePath)); // state check"},{"lineNumber":84,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":82,"-":3}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.commands.FacebookAddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"    private final Storage storage;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        this.storage \u003d storage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.history \u003d new CommandHistory();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.addressBookParser \u003d new AddressBookParser();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"alexfoodw"},"content":"    //@@author alexfoodw"},{"lineNumber":39,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"alexfoodw"},"content":"     * Completes the final step of FacebookAddCommand"},{"lineNumber":41,"author":{"gitID":"alexfoodw"},"content":"     * Stores the current model and adds the contact to the model."},{"lineNumber":42,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"alexfoodw"},"content":"    public void completeFacebookAddCommand(FacebookAddCommand command, String commandText) throws CommandException {"},{"lineNumber":44,"author":{"gitID":"alexfoodw"},"content":"        command.setData(model, storage, history, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"alexfoodw"},"content":"        command.completeAdd();"},{"lineNumber":46,"author":{"gitID":"alexfoodw"},"content":"        undoRedoStack.push(command);"},{"lineNumber":47,"author":{"gitID":"alexfoodw"},"content":"        history.add(commandText);"},{"lineNumber":48,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"alexfoodw"},"content":"    //@@author"},{"lineNumber":50,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"            command.setData(model, storage, history, undoRedoStack);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":14,"marvinchin":5,"-":55}},{"path":"src/main/java/seedu/address/logic/commands/FacebookLinkCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"alexfoodw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.Facebook;"},{"lineNumber":7,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.FacebookException;"},{"lineNumber":8,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":9,"author":{"gitID":"alexfoodw"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":11,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":14,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":15,"author":{"gitID":"alexfoodw"},"content":"//@@author alexfoodw"},{"lineNumber":16,"author":{"gitID":"alexfoodw"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"alexfoodw"},"content":" * Shares a link to a personal Facebook account."},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":" */"},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":"public class FacebookLinkCommand extends Command {"},{"lineNumber":20,"author":{"gitID":"alexfoodw"},"content":"    public static final String COMMAND_WORD \u003d \"facebooklink\";"},{"lineNumber":21,"author":{"gitID":"alexfoodw"},"content":"    public static final String COMMAND_ALIAS \u003d \"fblink\";"},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"    public static final String EXAMPLE_LINK \u003d \"https://www.google.com.sg/\";"},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"            + \": share a URL in link format to Facebook account\\n\""},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":"            + \"Alias: \" + COMMAND_ALIAS + \"\\n\""},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"            + \"Parameters: MESSAGE\\n\""},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + EXAMPLE_LINK;"},{"lineNumber":29,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":30,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_FACEBOOK_LINK_SUCCESS \u003d \"Shared link on Facebook!\";"},{"lineNumber":31,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_FACEBOOK_LINK_INITIATED \u003d \"User not authenticated, log in to proceed.\";"},{"lineNumber":32,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":33,"author":{"gitID":"alexfoodw"},"content":"    private static String user;"},{"lineNumber":34,"author":{"gitID":"alexfoodw"},"content":"    private static String link;"},{"lineNumber":35,"author":{"gitID":"alexfoodw"},"content":"    private static WebEngine webEngine;"},{"lineNumber":36,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":37,"author":{"gitID":"alexfoodw"},"content":"    private String toPost;"},{"lineNumber":38,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"alexfoodw"},"content":"     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}"},{"lineNumber":40,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"alexfoodw"},"content":"    public FacebookLinkCommand(String url) {"},{"lineNumber":42,"author":{"gitID":"alexfoodw"},"content":"        link \u003d url;"},{"lineNumber":43,"author":{"gitID":"alexfoodw"},"content":"        toPost \u003d url;"},{"lineNumber":44,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":46,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"alexfoodw"},"content":"     * Completes the Facebook Link command"},{"lineNumber":48,"author":{"gitID":"alexfoodw"},"content":"     * @throws CommandException"},{"lineNumber":49,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"alexfoodw"},"content":"    public static void completeLink() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"alexfoodw"},"content":"        Facebook facebookInstance \u003d FacebookConnectCommand.getFacebookInstance();"},{"lineNumber":52,"author":{"gitID":"alexfoodw"},"content":"        user \u003d null;"},{"lineNumber":53,"author":{"gitID":"alexfoodw"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"alexfoodw"},"content":"            user \u003d facebookInstance.getName();"},{"lineNumber":55,"author":{"gitID":"alexfoodw"},"content":"            try {"},{"lineNumber":56,"author":{"gitID":"alexfoodw"},"content":"                facebookInstance.postLink(new URL(link));"},{"lineNumber":57,"author":{"gitID":"alexfoodw"},"content":"            } catch (MalformedURLException e) {"},{"lineNumber":58,"author":{"gitID":"alexfoodw"},"content":"                new Exception(\"Please enter a valid URL.\");"},{"lineNumber":59,"author":{"gitID":"alexfoodw"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"alexfoodw"},"content":"        } catch (FacebookException e) {"},{"lineNumber":61,"author":{"gitID":"alexfoodw"},"content":"            // exception not handled because Facebook API still throws an exception even if success,"},{"lineNumber":62,"author":{"gitID":"alexfoodw"},"content":"            // so exception is ignored for now"},{"lineNumber":63,"author":{"gitID":"alexfoodw"},"content":"            e.printStackTrace();"},{"lineNumber":64,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":66,"author":{"gitID":"alexfoodw"},"content":"        EventsCenter.getInstance().post(new NewResultAvailableEvent("},{"lineNumber":67,"author":{"gitID":"alexfoodw"},"content":"                MESSAGE_FACEBOOK_LINK_SUCCESS + \" (to \" + user + \"\u0027s page.)\", false));"},{"lineNumber":68,"author":{"gitID":"alexfoodw"},"content":"        webEngine \u003d FacebookConnectCommand.getWebEngine();"},{"lineNumber":69,"author":{"gitID":"alexfoodw"},"content":"        webEngine.load(FacebookConnectCommand.getAuthenticatedUserPage());"},{"lineNumber":70,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":72,"author":{"gitID":"alexfoodw"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"alexfoodw"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":74,"author":{"gitID":"alexfoodw"},"content":"        if (!FacebookConnectCommand.isAuthenticated()) {"},{"lineNumber":75,"author":{"gitID":"alexfoodw"},"content":"            BrowserPanel.setProcessType(COMMAND_WORD);"},{"lineNumber":76,"author":{"gitID":"alexfoodw"},"content":"            FacebookConnectCommand newFacebookConnect \u003d new FacebookConnectCommand();"},{"lineNumber":77,"author":{"gitID":"alexfoodw"},"content":"            newFacebookConnect.execute();"},{"lineNumber":78,"author":{"gitID":"alexfoodw"},"content":"            return new CommandResult(MESSAGE_FACEBOOK_LINK_INITIATED);"},{"lineNumber":79,"author":{"gitID":"alexfoodw"},"content":"        } else {"},{"lineNumber":80,"author":{"gitID":"alexfoodw"},"content":"            completeLink();"},{"lineNumber":81,"author":{"gitID":"alexfoodw"},"content":"            return new CommandResult(MESSAGE_FACEBOOK_LINK_SUCCESS + \" (to \" + user + \"\u0027s page.)\");"},{"lineNumber":82,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":85,"author":{"gitID":"alexfoodw"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"alexfoodw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":87,"author":{"gitID":"alexfoodw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":88,"author":{"gitID":"alexfoodw"},"content":"                || (other instanceof FacebookLinkCommand // instanceof handles nulls"},{"lineNumber":89,"author":{"gitID":"alexfoodw"},"content":"                \u0026\u0026 toPost.equals(((FacebookLinkCommand) other).toPost));"},{"lineNumber":90,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"alexfoodw"},"content":"}"},{"lineNumber":92,"author":{"gitID":"alexfoodw"},"content":"//@@author"}],"authorContributionMap":{"alexfoodw":87,"-":5}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"alexfoodw"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the backup storage."},{"lineNumber":46,"author":{"gitID":"alexfoodw"},"content":"     * @param addressBook"},{"lineNumber":47,"author":{"gitID":"alexfoodw"},"content":"     * @throws IOException"},{"lineNumber":48,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"alexfoodw"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":50,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":7,"-":44}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"alexfoodw"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"alexfoodw"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":82,"author":{"gitID":"alexfoodw"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath() + \"-backup.xml\");"},{"lineNumber":83,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":4,"-":92}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook addressBookOptional \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return Optional.of(addressBookOptional);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"alexfoodw"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"alexfoodw"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":79,"author":{"gitID":"alexfoodw"},"content":"        saveAddressBook(addressBook, filePath + \"-backup.xml\");"},{"lineNumber":80,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":5,"-":77}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.DisplayPhoto;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.LastAccessDate;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.SocialInfo;"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.UniqueSocialInfoList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"    @XmlElement"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"    private boolean favorite;"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"    @XmlElement"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"    private String displayPhoto;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"    @XmlElement"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"    private List\u003cXmlAdaptedSocialInfo\u003e addedSocialInfos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"    private long lastAccessDateEpoch;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(ReadOnlyPerson source) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"        favorite \u003d source.getFavorite().isFavorite();"},{"lineNumber":67,"author":{"gitID":"KeithSOC"},"content":"        displayPhoto \u003d source.getDisplayPhoto().value;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"        addedSocialInfos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"        for (SocialInfo socialInfo : source.getSocialInfos()) {"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"            addedSocialInfos.add(new XmlAdaptedSocialInfo(socialInfo));"},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"        LastAccessDate lastAccessDate \u003d source.getLastAccessDate();"},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":"        lastAccessDateEpoch \u003d lastAccessDate.getDate().getTime();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"marvinchin"},"content":"        final List\u003cSocialInfo\u003e personSocialInfos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":91,"author":{"gitID":"marvinchin"},"content":"        for (XmlAdaptedSocialInfo socialInfo : addedSocialInfos) {"},{"lineNumber":92,"author":{"gitID":"marvinchin"},"content":"            personSocialInfos.add(socialInfo.toModelType());"},{"lineNumber":93,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":98,"author":{"gitID":"KeithSOC"},"content":"        final Favorite favorite \u003d new Favorite(this.favorite);"},{"lineNumber":99,"author":{"gitID":"KeithSOC"},"content":"        final DisplayPhoto displayPhoto \u003d new DisplayPhoto(this.displayPhoto);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":101,"author":{"gitID":"marvinchin"},"content":"        final Set\u003cSocialInfo\u003e socialInfos \u003d new HashSet\u003c\u003e(personSocialInfos);"},{"lineNumber":102,"author":{"gitID":"marvinchin"},"content":"        final UniqueSocialInfoList uniqueSocialInfoList \u003d new UniqueSocialInfoList(socialInfos);"},{"lineNumber":103,"author":{"gitID":"marvinchin"},"content":"        final LastAccessDate lastAccessDate \u003d new LastAccessDate(new Date(lastAccessDateEpoch));"},{"lineNumber":104,"author":{"gitID":"marvinchin"},"content":"        return new Person(name, phone, email, address, favorite, displayPhoto, tags,"},{"lineNumber":105,"author":{"gitID":"marvinchin"},"content":"                uniqueSocialInfoList, lastAccessDate);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":22,"KeithSOC":10,"-":75}},{"path":"src/main/java/seedu/address/logic/commands/FacebookAddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":5,"author":{"gitID":"alexfoodw"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"alexfoodw"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":8,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.Facebook;"},{"lineNumber":9,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.FacebookException;"},{"lineNumber":10,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.ResponseList;"},{"lineNumber":11,"author":{"gitID":"alexfoodw"},"content":"import facebook4j.User;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.logic.parser.SocialInfoMapping;"},{"lineNumber":17,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.model.person.DisplayPhoto;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.SocialInfo;"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.UniqueSocialInfoList;"},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":29,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":30,"author":{"gitID":"alexfoodw"},"content":"//@@author alexfoodw"},{"lineNumber":31,"author":{"gitID":"alexfoodw"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"alexfoodw"},"content":" * Adds a facebook contact to the address book."},{"lineNumber":33,"author":{"gitID":"alexfoodw"},"content":" */"},{"lineNumber":34,"author":{"gitID":"alexfoodw"},"content":"public class FacebookAddCommand extends Command {"},{"lineNumber":35,"author":{"gitID":"alexfoodw"},"content":"    public static final String COMMAND_WORD \u003d \"facebookadd\";"},{"lineNumber":36,"author":{"gitID":"alexfoodw"},"content":"    public static final String COMMAND_ALIAS \u003d \"fbadd\";"},{"lineNumber":37,"author":{"gitID":"alexfoodw"},"content":"    public static final String EXAMPLE_NAME \u003d \"Barack Obama\";"},{"lineNumber":38,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":39,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a facebook user to the address book.\\n\""},{"lineNumber":40,"author":{"gitID":"alexfoodw"},"content":"            + \"Alias: \" + COMMAND_ALIAS + \"\\n\""},{"lineNumber":41,"author":{"gitID":"alexfoodw"},"content":"            + \"Parameters: FACEBOOK_USER_NAME\\n\""},{"lineNumber":42,"author":{"gitID":"alexfoodw"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + EXAMPLE_NAME;"},{"lineNumber":43,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":44,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":45,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":46,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_FACEBOOK_ADD_SUCCESS \u003d \" has been imported from Facebook!\";"},{"lineNumber":47,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_FACEBOOK_ADD_INITIATED \u003d \"User not authenticated, log in to proceed.\";"},{"lineNumber":48,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_FACEBOOK_ADD_ERROR \u003d \"Error with Facebook API call.\";"},{"lineNumber":49,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_FACEBOOK_ADD_PERSON_ERROR \u003d \"Error with creating Person Object\";"},{"lineNumber":50,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":51,"author":{"gitID":"alexfoodw"},"content":"    private String userName;"},{"lineNumber":52,"author":{"gitID":"alexfoodw"},"content":"    private String toAddName;"},{"lineNumber":53,"author":{"gitID":"alexfoodw"},"content":"    private String toAddId;"},{"lineNumber":54,"author":{"gitID":"alexfoodw"},"content":"    private Person toAdd;"},{"lineNumber":55,"author":{"gitID":"alexfoodw"},"content":"    private boolean isAddAll;"},{"lineNumber":56,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":57,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"alexfoodw"},"content":"     * Creates an FacebookAddCommand to add the specified Facebook contact"},{"lineNumber":59,"author":{"gitID":"alexfoodw"},"content":"     * @param trimmedArgs"},{"lineNumber":60,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"alexfoodw"},"content":"    public FacebookAddCommand(String trimmedArgs) {"},{"lineNumber":62,"author":{"gitID":"alexfoodw"},"content":"        userName \u003d trimmedArgs;"},{"lineNumber":63,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":65,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"alexfoodw"},"content":"     * Creates an alternative FacebookAddCommand to add the specified Facebook contact initiated by facebook"},{"lineNumber":67,"author":{"gitID":"alexfoodw"},"content":"     * add all friends command."},{"lineNumber":68,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"alexfoodw"},"content":"    public FacebookAddCommand(boolean isAddAll) {"},{"lineNumber":70,"author":{"gitID":"alexfoodw"},"content":"        this.isAddAll \u003d isAddAll;"},{"lineNumber":71,"author":{"gitID":"alexfoodw"},"content":"        toAddName \u003d FacebookAddAllFriendsCommand.getCurrentUserName();"},{"lineNumber":72,"author":{"gitID":"alexfoodw"},"content":"        toAddId \u003d FacebookAddAllFriendsCommand.getCurrentUserId();"},{"lineNumber":73,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":75,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"alexfoodw"},"content":"     * Completes the Facebook Add command"},{"lineNumber":77,"author":{"gitID":"alexfoodw"},"content":"     * @throws CommandException"},{"lineNumber":78,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"alexfoodw"},"content":"    public void completeAdd() throws CommandException {"},{"lineNumber":80,"author":{"gitID":"alexfoodw"},"content":"        // if add is not called from the FacebookAddAllFriends Command"},{"lineNumber":81,"author":{"gitID":"alexfoodw"},"content":"        if (!isAddAll) {"},{"lineNumber":82,"author":{"gitID":"alexfoodw"},"content":"            Facebook facebookInstance \u003d FacebookConnectCommand.getFacebookInstance();"},{"lineNumber":83,"author":{"gitID":"alexfoodw"},"content":"            ResponseList\u003cUser\u003e friendList \u003d null;"},{"lineNumber":84,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":85,"author":{"gitID":"alexfoodw"},"content":"            // fetch data from Facebook"},{"lineNumber":86,"author":{"gitID":"alexfoodw"},"content":"            try {"},{"lineNumber":87,"author":{"gitID":"alexfoodw"},"content":"                friendList \u003d facebookInstance.searchUsers(userName);"},{"lineNumber":88,"author":{"gitID":"alexfoodw"},"content":"            } catch (FacebookException e) {"},{"lineNumber":89,"author":{"gitID":"alexfoodw"},"content":"                throw new CommandException(MESSAGE_FACEBOOK_ADD_ERROR);"},{"lineNumber":90,"author":{"gitID":"alexfoodw"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"alexfoodw"},"content":"            User user \u003d friendList.get(0);"},{"lineNumber":92,"author":{"gitID":"alexfoodw"},"content":"            toAddName \u003d user.getName();"},{"lineNumber":93,"author":{"gitID":"alexfoodw"},"content":"            toAddId \u003d user.getId();"},{"lineNumber":94,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":96,"author":{"gitID":"alexfoodw"},"content":"        // Assign data to Person object"},{"lineNumber":97,"author":{"gitID":"alexfoodw"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"alexfoodw"},"content":"            Set\u003cSocialInfo\u003e socialInfos \u003d new HashSet\u003c\u003e();"},{"lineNumber":99,"author":{"gitID":"alexfoodw"},"content":"            SocialInfo facebookInfo \u003d null;"},{"lineNumber":100,"author":{"gitID":"alexfoodw"},"content":"            facebookInfo \u003d SocialInfoMapping.parseSocialInfo(\"facebook \" + toAddId);"},{"lineNumber":101,"author":{"gitID":"alexfoodw"},"content":"            socialInfos.add(facebookInfo);"},{"lineNumber":102,"author":{"gitID":"alexfoodw"},"content":"            UniqueSocialInfoList uniqueSocialInfoList \u003d new UniqueSocialInfoList(socialInfos);"},{"lineNumber":103,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":104,"author":{"gitID":"alexfoodw"},"content":"            Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":105,"author":{"gitID":"alexfoodw"},"content":"            tags.add(new Tag(\"facebookFriend\"));"},{"lineNumber":106,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":107,"author":{"gitID":"alexfoodw"},"content":"            toAdd \u003d new Person(new Name(toAddName), new Phone(), new Email(), new Address(),"},{"lineNumber":108,"author":{"gitID":"alexfoodw"},"content":"                    new Favorite(false), new DisplayPhoto(null), tags, uniqueSocialInfoList);"},{"lineNumber":109,"author":{"gitID":"alexfoodw"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":110,"author":{"gitID":"alexfoodw"},"content":"            throw new CommandException(MESSAGE_FACEBOOK_ADD_PERSON_ERROR);"},{"lineNumber":111,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":113,"author":{"gitID":"alexfoodw"},"content":"        addContactToAddressBook();"},{"lineNumber":114,"author":{"gitID":"alexfoodw"},"content":"        EventsCenter.getInstance().post(new NewResultAvailableEvent("},{"lineNumber":115,"author":{"gitID":"alexfoodw"},"content":"                toAddName + MESSAGE_FACEBOOK_ADD_SUCCESS, false));"},{"lineNumber":116,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":118,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"alexfoodw"},"content":"     * Adds the facebook contact to addressbook"},{"lineNumber":120,"author":{"gitID":"alexfoodw"},"content":"     * @throws CommandException"},{"lineNumber":121,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"alexfoodw"},"content":"    private void addContactToAddressBook() throws CommandException {"},{"lineNumber":123,"author":{"gitID":"alexfoodw"},"content":"        // add to model and return"},{"lineNumber":124,"author":{"gitID":"alexfoodw"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"alexfoodw"},"content":"            requireNonNull(model);"},{"lineNumber":126,"author":{"gitID":"alexfoodw"},"content":"            System.out.println(toAdd);"},{"lineNumber":127,"author":{"gitID":"alexfoodw"},"content":"            model.addPerson(toAdd);"},{"lineNumber":128,"author":{"gitID":"alexfoodw"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":129,"author":{"gitID":"alexfoodw"},"content":"            new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":130,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":133,"author":{"gitID":"alexfoodw"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"alexfoodw"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":135,"author":{"gitID":"alexfoodw"},"content":"        if (!FacebookConnectCommand.isAuthenticated()) {"},{"lineNumber":136,"author":{"gitID":"alexfoodw"},"content":"            BrowserPanel.setProcessType(COMMAND_WORD);"},{"lineNumber":137,"author":{"gitID":"alexfoodw"},"content":"            BrowserPanel.setTrimmedArgs(userName);"},{"lineNumber":138,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":139,"author":{"gitID":"alexfoodw"},"content":"            FacebookConnectCommand newFacebookConnect \u003d new FacebookConnectCommand();"},{"lineNumber":140,"author":{"gitID":"alexfoodw"},"content":"            newFacebookConnect.execute();"},{"lineNumber":141,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":142,"author":{"gitID":"alexfoodw"},"content":"            return new CommandResult(MESSAGE_FACEBOOK_ADD_INITIATED);"},{"lineNumber":143,"author":{"gitID":"alexfoodw"},"content":"        } else {"},{"lineNumber":144,"author":{"gitID":"alexfoodw"},"content":"            completeAdd();"},{"lineNumber":145,"author":{"gitID":"alexfoodw"},"content":"            return new CommandResult(toAddName + MESSAGE_FACEBOOK_ADD_SUCCESS);"},{"lineNumber":146,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":149,"author":{"gitID":"alexfoodw"},"content":"    @Override"},{"lineNumber":150,"author":{"gitID":"alexfoodw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":151,"author":{"gitID":"alexfoodw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":152,"author":{"gitID":"alexfoodw"},"content":"                || (other instanceof FacebookAddCommand // instanceof handles nulls"},{"lineNumber":153,"author":{"gitID":"alexfoodw"},"content":"                \u0026\u0026 userName.equals(((FacebookAddCommand) other).userName));"},{"lineNumber":154,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":156,"author":{"gitID":"alexfoodw"},"content":"}"},{"lineNumber":157,"author":{"gitID":"alexfoodw"},"content":"//@@author"}],"authorContributionMap":{"alexfoodw":143,"marvinchin":2,"KeithSOC":1,"-":11}},{"path":"src/main/java/seedu/address/storage/JsonUserPrefsStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public JsonUserPrefsStorage(String filePath) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException,"},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"            IOException {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return readUserPrefs(filePath);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Similar to {@link #readUserPrefs()}"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(String prefsFilePath) throws DataConversionException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":2,"-":44}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"import javafx.stage.StageStyle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"sarahnzx"},"content":"    public static final Version VERSION \u003d new Version(1, 5, 0, true);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"alexfoodw"},"content":"    //@@author alexfoodw"},{"lineNumber":80,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"alexfoodw"},"content":"     * Returns the current logic Manager"},{"lineNumber":82,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"alexfoodw"},"content":"    public Logic getLogic() {"},{"lineNumber":84,"author":{"gitID":"alexfoodw"},"content":"        return logic;"},{"lineNumber":85,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"alexfoodw"},"content":"    //@@author"},{"lineNumber":87,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":145,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":173,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":195,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":196,"author":{"gitID":"KeithSOC"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":197,"author":{"gitID":"KeithSOC"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":198,"author":{"gitID":"KeithSOC"},"content":"        /*"},{"lineNumber":199,"author":{"gitID":"KeithSOC"},"content":"         * Remove default window decorations"},{"lineNumber":200,"author":{"gitID":"KeithSOC"},"content":"         * Have to be placed here instead of MainWindow or UiManager to prevent the following exception:"},{"lineNumber":201,"author":{"gitID":"KeithSOC"},"content":"         * \"Cannot set style once stage has been set visible\""},{"lineNumber":202,"author":{"gitID":"KeithSOC"},"content":"         */"},{"lineNumber":203,"author":{"gitID":"KeithSOC"},"content":"        primaryStage.initStyle(StageStyle.TRANSPARENT);"},{"lineNumber":204,"author":{"gitID":"KeithSOC"},"content":"        ui.start(primaryStage);"},{"lineNumber":205,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahnzx":1,"alexfoodw":9,"marvinchin":1,"KeithSOC":14,"-":205}},{"path":"src/main/java/seedu/address/logic/commands/FindByNameCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":" * Finds and lists all {@code Person} in address book whose {@code Name} contains any of the input keywords."},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":" * Keyword matching is case sensitive."},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"public class FindByNameCommand extends FindCommand {"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"    private NameContainsKeywordsPredicate predicate;"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"    public FindByNameCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"    protected Predicate\u003cReadOnlyPerson\u003e getPredicate() {"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"        return predicate;"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"                || (other instanceof FindByNameCommand // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"                \u0026\u0026 this.predicate.equals(((FindByNameCommand) other).predicate)); // state check"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":29,"-":2}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedSocialInfo.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.SocialInfo;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":" * JAXB-friendly adapted version of the {@code SocialInfo}."},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"public class XmlAdaptedSocialInfo {"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"    private String username;"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"    private String socialType;"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"    private String socialUrl;"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"     * Constructs an XmlAdaptedSocialInfo."},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"    public XmlAdaptedSocialInfo() {}"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"     * Converts a given {@code SocialInfo} into this class for JAXB use."},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"    public XmlAdaptedSocialInfo(SocialInfo source) {"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        socialType \u003d source.getSocialType();"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"        username \u003d source.getUsername();"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"        socialUrl \u003d source.getSocialUrl();"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"     * Converts this JAXB-friendly adapted {@code SocialInfo} object into the model\u0027s {@code SocialInfo} object."},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted {@code SocialInfo}"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    public SocialInfo toModelType() throws IllegalValueException {"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        return new SocialInfo(socialType, username, socialUrl);"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":42,"-":3}},{"path":"src/main/java/seedu/address/model/person/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"sarahnzx"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"sarahnzx"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s phone number in the address book."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":20,"author":{"gitID":"sarahnzx"},"content":"    public final List\u003cString\u003e phonelist;"},{"lineNumber":21,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"    //@@author alexfoodw"},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"     * Constructs a blank phone field"},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":"    public Phone() {"},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"        this.value \u003d \" \";"},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"        this.phonelist \u003d null;"},{"lineNumber":29,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"alexfoodw"},"content":"    //@@author"},{"lineNumber":31,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Validates given phone number."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if given phone string is invalid."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Phone(String phone) throws IllegalValueException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":39,"author":{"gitID":"sarahnzx"},"content":"        String[] numbers \u003d phone.split(\"\\n\");"},{"lineNumber":40,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":41,"author":{"gitID":"sarahnzx"},"content":"        List\u003cString\u003e phones \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"sarahnzx"},"content":"        boolean invalid \u003d false;"},{"lineNumber":43,"author":{"gitID":"sarahnzx"},"content":"        String phoneStr \u003d \"\";"},{"lineNumber":44,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":45,"author":{"gitID":"sarahnzx"},"content":"        for (int i \u003d 0; i \u003c numbers.length; i++) {"},{"lineNumber":46,"author":{"gitID":"sarahnzx"},"content":"            String trimmedPhone \u003d numbers[i].trim();"},{"lineNumber":47,"author":{"gitID":"sarahnzx"},"content":"            if (isValidPhone(trimmedPhone)) {"},{"lineNumber":48,"author":{"gitID":"sarahnzx"},"content":"                phones.add(numbers[i]);"},{"lineNumber":49,"author":{"gitID":"sarahnzx"},"content":"                phoneStr +\u003d numbers[i] + \"\\n\";"},{"lineNumber":50,"author":{"gitID":"sarahnzx"},"content":"            } else {"},{"lineNumber":51,"author":{"gitID":"sarahnzx"},"content":"                invalid \u003d true;"},{"lineNumber":52,"author":{"gitID":"sarahnzx"},"content":"            }"},{"lineNumber":53,"author":{"gitID":"sarahnzx"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        if (phones.isEmpty() || invalid) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"        // remove the last newline"},{"lineNumber":60,"author":{"gitID":"sarahnzx"},"content":"        phoneStr \u003d phoneStr.substring(0, phoneStr.length() - 1);"},{"lineNumber":61,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":62,"author":{"gitID":"sarahnzx"},"content":"        this.phonelist \u003d phones;"},{"lineNumber":63,"author":{"gitID":"sarahnzx"},"content":"        this.value \u003d phoneStr;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"content":"    //@@author"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":71,"author":{"gitID":"alexfoodw"},"content":"        //@@author alexfoodw"},{"lineNumber":72,"author":{"gitID":"alexfoodw"},"content":"        // allow blank phone number"},{"lineNumber":73,"author":{"gitID":"alexfoodw"},"content":"        if (test.isEmpty()) {"},{"lineNumber":74,"author":{"gitID":"alexfoodw"},"content":"            return true;"},{"lineNumber":75,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"alexfoodw"},"content":"        //@@author"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":82,"author":{"gitID":"sarahnzx"},"content":"        return value.toString();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"sarahnzx":28,"alexfoodw":16,"marvinchin":2,"-":50}},{"path":"src/main/java/seedu/address/model/person/PersonNameComparator.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareAddress;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareEmail;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareFavorite;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareName;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.comparePhone;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import java.util.Comparator;"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":" * Comparator for {@Person}s when sorting by {@code Name}."},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":" * Sorts in the order:"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":" * 1. {@code Name} in lexicographic order"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":" * 2. {@code Favorite} status"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":" * 3. {@code Phone} in numeric order"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":" * 4. {@code Address} in lexicographic order"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":" * 5. {@code Email} in lexicographic order"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"public class PersonNameComparator implements Comparator\u003cReadOnlyPerson\u003e {"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"    public int compare(ReadOnlyPerson thisPerson, ReadOnlyPerson otherPerson) {"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"        if (!thisPerson.getName().equals(otherPerson.getName())) {"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"            return compareName(thisPerson, otherPerson);"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"        } else if (!thisPerson.getFavorite().equals(otherPerson.getFavorite())) {"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"            return compareFavorite(thisPerson, otherPerson);"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"        } else if (!thisPerson.getPhone().equals(otherPerson.getPhone())) {"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"            return comparePhone(thisPerson, otherPerson);"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        } else if (!thisPerson.getAddress().equals(otherPerson.getAddress())) {"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"            return compareAddress(thisPerson, otherPerson);"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        } else {"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"            return compareEmail(thisPerson, otherPerson);"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"}"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":""}],"authorContributionMap":{"marvinchin":37}},{"path":"src/main/java/seedu/address/model/person/Favorite.java","lines":[{"lineNumber":1,"author":{"gitID":"KeithSOC"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":3,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":4,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":" * Represents a Person\u0027s favorite status in the address book."},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":" * Guarantees: immutable."},{"lineNumber":7,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":8,"author":{"gitID":"KeithSOC"},"content":"public class Favorite {"},{"lineNumber":9,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"    public static final String MESSAGE_FAVORITE_CONSTRAINTS \u003d \"Only prefix is required for favorite status.\";"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"    private boolean value;"},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"     * Allow only \u0027true\u0027 or \u0027false\u0027 values specified in AddCommandParser, EditCommandParser and test files."},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"     * If user specifies \"f/\"  : pass in \u0027true\u0027"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":"     * If user specifies \"uf/\" : pass in \u0027false\u0027"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":"    public Favorite(boolean isFav) {"},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":"        this.value \u003d isFav;"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"     * Getter-method for returning favorite status"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"    public boolean isFavorite() {"},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"        return this.value;"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"     * Formats \u0027true\u0027/\u0027false\u0027 values to \"Yes\"/\"No\" Strings to be displayed to user"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"        return isFavorite() ? \"Yes\" : \"No\";"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"                || (other instanceof Favorite // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"                \u0026\u0026 this.value \u003d\u003d (((Favorite) other).value)); // state check"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"    public int hashCode() {"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"        return Boolean.hashCode(value);"},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"KeithSOC":50}},{"path":"src/main/java/seedu/address/model/person/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s phone number in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d \"[\\\\w\\\\.]+@[\\\\w\\\\.]+\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":"    //@@author alexfoodw"},{"lineNumber":20,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"alexfoodw"},"content":"     * Constructs a blank email field"},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"    public Email() {"},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"        this.value \u003d \" \";"},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":"    //@@author"},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Validates given email."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if given email address string is invalid."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public Email(String email) throws IllegalValueException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        if (!isValidEmail(trimmedEmail)) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.value \u003d trimmedEmail;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns if a given string is a valid person email."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":46,"author":{"gitID":"alexfoodw"},"content":"        //@@author alexfoodw"},{"lineNumber":47,"author":{"gitID":"alexfoodw"},"content":"        // allow blank email"},{"lineNumber":48,"author":{"gitID":"alexfoodw"},"content":"        if (test.isEmpty()) {"},{"lineNumber":49,"author":{"gitID":"alexfoodw"},"content":"            return true;"},{"lineNumber":50,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"alexfoodw"},"content":"        //@@author"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":15,"-":57}},{"path":"src/main/java/seedu/address/model/person/ReadOnlyPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.SocialInfo;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.UniqueSocialInfoList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A read-only immutable interface for a Person in the addressbook."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Implementations should guarantee: details are present and not null, field values are validated."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface ReadOnlyPerson {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cName\u003e nameProperty();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Name getName();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cPhone\u003e phoneProperty();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Phone getPhone();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cEmail\u003e emailProperty();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    Email getEmail();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cAddress\u003e addressProperty();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    Address getAddress();"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"    ObjectProperty\u003cFavorite\u003e favoriteProperty();"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"    Favorite getFavorite();"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"    ObjectProperty\u003cDisplayPhoto\u003e displayPhotoProperty();"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"    DisplayPhoto getDisplayPhoto();"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cUniqueTagList\u003e tagProperty();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    Set\u003cTag\u003e getTags();"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"    ObjectProperty\u003cUniqueSocialInfoList\u003e socialInfoProperty();"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"    Set\u003cSocialInfo\u003e getSocialInfos();"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    ObjectProperty\u003cLastAccessDate\u003e lastAccessDateProperty();"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"    LastAccessDate getLastAccessDate();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    default boolean isSameStateAs(ReadOnlyPerson other) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getPhone().equals(this.getPhone())"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getEmail().equals(this.getEmail())"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getAddress().equals(this.getAddress()));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Formats the person as text, showing all contact details."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    default String getAsText() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"                .append(\" | Phone: \")"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":"                .append(\" | Email: \")"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"                .append(\" | Address: \")"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":"                .append(\" | Favorite: \")"},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"                .append(getFavorite())"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"                .append(\" | Display Photo: \")"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":"                .append(getDisplayPhoto())"},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"                .append(\" | Tags: \");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":"        builder.append(\" | Social Infos: \");"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"        getSocialInfos().forEach(builder::append);"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"        // omit last access date as it doesn\u0027t provide much useful information to the user"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":8,"KeithSOC":15,"-":51}},{"path":"src/main/java/seedu/address/logic/commands/UnFavoriteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"KeithSOC"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":3,"author":{"gitID":"KeithSOC"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitID":"KeithSOC"},"content":"import java.util.LinkedHashSet;"},{"lineNumber":5,"author":{"gitID":"KeithSOC"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":" * Unfavorites the person(s) identified using it\u0027s last displayed index from the address book."},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":"public class UnFavoriteCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":"    public static final String COMMAND_WORD \u003d \"unfav\";"},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"            + \": Unfavorites the person(s) identified by the index number used in the last person listing.\\n\""},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"            + \"Parameters: INDEX [ADDITIONAL INDEXES] (INDEX must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\\n\""},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 3\";"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"    public static final String MESSAGE_UNFAVORITE_PERSON_SUCCESS \u003d \"Removed from favorite contact(s): \";"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"    public static final String MESSAGE_UNFAVORITE_PERSON_FAILURE \u003d \"These contact(s) has not been \""},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"            + \"added as favorites for this operation: \";"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"    private final List\u003cIndex\u003e targetIndexList;"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"    private final Set\u003cReadOnlyPerson\u003e targetPersonList;"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":"    private final StringBuilder allNameList;"},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"    private final StringBuilder successNameList;"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"    private final StringBuilder failureNameList;"},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"    public UnFavoriteCommand(List\u003cIndex\u003e targetIndexList) {"},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"        this.targetIndexList \u003d targetIndexList;"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"        this.targetPersonList \u003d new LinkedHashSet\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"        this.allNameList \u003d new StringBuilder();"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"        this.successNameList \u003d new StringBuilder();"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"        this.failureNameList \u003d new StringBuilder();"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"     * Efficiently check whether user input any index larger than address book size with Collections.max."},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"     * This is to avoid the following situation:"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"     * E.g. AddressBook size is 100"},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"     * Execute \"unfav 6 7 101 8 9\" -\u003e"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"     * persons at indexes 7 and 8 gets unfavorited but method halts due to CommandException for index 101 and"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"     * person at index 9 and beyond does not get unfavorited."},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"    private void checkIndexBoundaries(List\u003cReadOnlyPerson\u003e lastShownList) throws CommandException {"},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":"        if (Collections.max(targetIndexList).getOneBased() \u003e lastShownList.size()) {"},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":"            if (targetIndexList.size() \u003e 1) {"},{"lineNumber":59,"author":{"gitID":"KeithSOC"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX_MULTI);"},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"            } else {"},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"KeithSOC"},"content":"     * Stores all persons to unfavorite into {@code targetPersonList} found from the index(es) used in last shown list."},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":"     * {@code targetPersonList} uses a LinkedHashSet implementation for the following purposes:"},{"lineNumber":69,"author":{"gitID":"KeithSOC"},"content":"     * 1. Prevent duplicates (of persons) resulting from such an input: unfav 1 1 1"},{"lineNumber":70,"author":{"gitID":"KeithSOC"},"content":"     * 2. Preserve insertion order (since {@code targetIndexList} is sorted)"},{"lineNumber":71,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"KeithSOC"},"content":"    private void getPersonsToUnFavorite(List\u003cReadOnlyPerson\u003e lastShownList) {"},{"lineNumber":73,"author":{"gitID":"KeithSOC"},"content":"        for (Index targetIndex : targetIndexList) {"},{"lineNumber":74,"author":{"gitID":"KeithSOC"},"content":"            ReadOnlyPerson personToUnFavorite \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"            if (isAlreadyFavorite(personToUnFavorite)) { // Add person into set"},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"                targetPersonList.add(personToUnFavorite);"},{"lineNumber":77,"author":{"gitID":"KeithSOC"},"content":"            } else { // Do not add person into set, append into failure name list instead"},{"lineNumber":78,"author":{"gitID":"KeithSOC"},"content":"                failureNameList.append(\"\\n\\t- \");"},{"lineNumber":79,"author":{"gitID":"KeithSOC"},"content":"                failureNameList.append(personToUnFavorite.getName().toString());"},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":84,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":"     * Checks if {@code person} is already a favorite contact."},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":"    private boolean isAlreadyFavorite(ReadOnlyPerson person) {"},{"lineNumber":88,"author":{"gitID":"KeithSOC"},"content":"        return person.getFavorite().isFavorite();"},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"KeithSOC"},"content":"     * Adds all appropriate String messages into {@code allNameList}."},{"lineNumber":93,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"KeithSOC"},"content":"    private String compileAllNames() {"},{"lineNumber":95,"author":{"gitID":"KeithSOC"},"content":"        if (successNameList.length() !\u003d 0 \u0026\u0026 failureNameList.length() !\u003d 0) {"},{"lineNumber":96,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(MESSAGE_UNFAVORITE_PERSON_SUCCESS);"},{"lineNumber":97,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(successNameList);"},{"lineNumber":98,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(\"\\n\");"},{"lineNumber":99,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(MESSAGE_UNFAVORITE_PERSON_FAILURE);"},{"lineNumber":100,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(failureNameList);"},{"lineNumber":101,"author":{"gitID":"KeithSOC"},"content":"        } else if (successNameList.length() !\u003d 0 \u0026\u0026 failureNameList.length() \u003d\u003d 0) {"},{"lineNumber":102,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(MESSAGE_UNFAVORITE_PERSON_SUCCESS);"},{"lineNumber":103,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(successNameList);"},{"lineNumber":104,"author":{"gitID":"KeithSOC"},"content":"        } else {"},{"lineNumber":105,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(MESSAGE_UNFAVORITE_PERSON_FAILURE);"},{"lineNumber":106,"author":{"gitID":"KeithSOC"},"content":"            allNameList.append(failureNameList);"},{"lineNumber":107,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"KeithSOC"},"content":"        return allNameList.toString();"},{"lineNumber":109,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":111,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"KeithSOC"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":113,"author":{"gitID":"KeithSOC"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":114,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":115,"author":{"gitID":"KeithSOC"},"content":"        checkIndexBoundaries(lastShownList);"},{"lineNumber":116,"author":{"gitID":"KeithSOC"},"content":"        /*"},{"lineNumber":117,"author":{"gitID":"KeithSOC"},"content":"         * As long no exception is thrown above i.e. all index are within boundaries,"},{"lineNumber":118,"author":{"gitID":"KeithSOC"},"content":"         * the following codes will run"},{"lineNumber":119,"author":{"gitID":"KeithSOC"},"content":"         */"},{"lineNumber":120,"author":{"gitID":"KeithSOC"},"content":"        getPersonsToUnFavorite(lastShownList);"},{"lineNumber":121,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":"        for (ReadOnlyPerson personToUnFavorite : targetPersonList) {"},{"lineNumber":123,"author":{"gitID":"KeithSOC"},"content":"            try {"},{"lineNumber":124,"author":{"gitID":"KeithSOC"},"content":"                model.toggleFavoritePerson(personToUnFavorite, COMMAND_WORD);"},{"lineNumber":125,"author":{"gitID":"KeithSOC"},"content":"                successNameList.append(\"\\n\\t- \");"},{"lineNumber":126,"author":{"gitID":"KeithSOC"},"content":"                successNameList.append(personToUnFavorite.getName().toString());"},{"lineNumber":127,"author":{"gitID":"KeithSOC"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":128,"author":{"gitID":"KeithSOC"},"content":"                throw new CommandException(EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":129,"author":{"gitID":"KeithSOC"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":130,"author":{"gitID":"KeithSOC"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":131,"author":{"gitID":"KeithSOC"},"content":"            }"},{"lineNumber":132,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":134,"author":{"gitID":"KeithSOC"},"content":"        return new CommandResult(compileAllNames());"},{"lineNumber":135,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":137,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"KeithSOC"},"content":"    public boolean equals(Object other) {"},{"lineNumber":139,"author":{"gitID":"KeithSOC"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":140,"author":{"gitID":"KeithSOC"},"content":"                || (other instanceof UnFavoriteCommand // instanceof handles nulls"},{"lineNumber":141,"author":{"gitID":"KeithSOC"},"content":"                \u0026\u0026 this.targetIndexList.equals(((UnFavoriteCommand) other).targetIndexList)); // state check"},{"lineNumber":142,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":144,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"KeithSOC":137,"-":7}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.DisplayPhoto;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.SocialInfo;"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.UniqueSocialInfoList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"            Person alex \u003d new Person("},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"                    new Name(\"Alex Yeoh\"),"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"                    new Phone(\"87438807\"),"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"                    new Email(\"alexyeoh@example.com\"),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":"                    new Favorite(true),"},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"                    new DisplayPhoto(DisplayPhoto.SAMPLE_PHOTO),"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"                    getTagSet(\"friends\"),"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"                    getSocialInfos("},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"                            new SocialInfo(\"facebook\", \"alex\", \"https://facebook.com/alex\")));"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"            Person bernice \u003d new Person("},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"                    new Name(\"Bernice Yu\"),"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"                    new Phone(\"99272758\"),"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"                    new Email(\"berniceyu@example.com\"),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"                    new Favorite(false),"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"                    new DisplayPhoto(null),"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"                    getTagSet(\"colleagues\", \"friends\"),"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"                    getSocialInfos("},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"                            new SocialInfo(\"facebook\", \"bernice\", \"https://facebook.com/bernice\"),"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"                            new SocialInfo(\"instagram\", \"bernice\", \"https://instagram.com/bernice\")));"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"            Person charlotte \u003d new Person("},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"                    new Name(\"Charlotte Oliveiro\"),"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"                    new Phone(\"93210283\"),"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"                    new Email(\"charlotte@example.com\"),"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"                    new Favorite(false),"},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"                    new DisplayPhoto(null),"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"                    getTagSet(\"neighbours\"),"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"                    getSocialInfos());"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"            Person david \u003d new Person("},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"                    new Name(\"David Li\"),"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"                    new Phone(\"91031282\"),"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"                    new Email(\"lidavid@example.com\"),"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"                    new Favorite(true),"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"                    new DisplayPhoto(null),"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"                    getTagSet(\"family\"),"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"                    getSocialInfos());"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"            Person irfan \u003d new Person("},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"                    new Name(\"Irfan Ibrahim\"),"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"                    new Phone(\"92492021\"),"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"                    new Email(\"irfan@example.com\"),"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":72,"author":{"gitID":"KeithSOC"},"content":"                    new Favorite(false),"},{"lineNumber":73,"author":{"gitID":"KeithSOC"},"content":"                    new DisplayPhoto(null),"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"                    getTagSet(\"classmates\"),"},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"                    getSocialInfos());"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"            Person roy \u003d new Person("},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":"                    new Name(\"Roy Balakrishnan\"),"},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":"                    new Phone(\"92624417\"),"},{"lineNumber":79,"author":{"gitID":"marvinchin"},"content":"                    new Email(\"royb@example.com\"),"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":81,"author":{"gitID":"KeithSOC"},"content":"                    new Favorite(false),"},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":"                    new DisplayPhoto(null),"},{"lineNumber":83,"author":{"gitID":"marvinchin"},"content":"                    getTagSet(\"colleagues\"),"},{"lineNumber":84,"author":{"gitID":"marvinchin"},"content":"                    getSocialInfos());"},{"lineNumber":85,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":86,"author":{"gitID":"marvinchin"},"content":"            return new Person[] {alex, bernice, charlotte, david, irfan, roy};"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot be invalid\", e);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) throws IllegalValueException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":116,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"marvinchin"},"content":"     * Returns a {@code UniqueSocialInfoList} containing the {@code SocialInfo}s given."},{"lineNumber":118,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"marvinchin"},"content":"    public static UniqueSocialInfoList getSocialInfos(SocialInfo... socialInfos) throws DuplicateDataException {"},{"lineNumber":120,"author":{"gitID":"marvinchin"},"content":"        HashSet\u003cSocialInfo\u003e socialInfoSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":121,"author":{"gitID":"marvinchin"},"content":"        for (SocialInfo socialInfo : socialInfos) {"},{"lineNumber":122,"author":{"gitID":"marvinchin"},"content":"            socialInfoSet.add(socialInfo);"},{"lineNumber":123,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":125,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList uniqueSocialInfoList \u003d new UniqueSocialInfoList(socialInfoSet);"},{"lineNumber":126,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":127,"author":{"gitID":"marvinchin"},"content":"        return uniqueSocialInfoList;"},{"lineNumber":128,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":130,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":59,"KeithSOC":14,"-":58}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"alexfoodw"},"content":"    public static final String BLANK_ADDRESS \u003d \" \";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"    //@@author alexfoodw"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"     * Constructs a blank address field"},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"alexfoodw"},"content":"    public Address() {"},{"lineNumber":30,"author":{"gitID":"alexfoodw"},"content":"        this.value \u003d BLANK_ADDRESS;"},{"lineNumber":31,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"alexfoodw"},"content":"    //@@author"},{"lineNumber":33,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Validates given address."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if given address string is invalid."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public Address(String address) throws IllegalValueException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (!isValidAddress(address)) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":51,"author":{"gitID":"alexfoodw"},"content":"        //@@author alexfoodw"},{"lineNumber":52,"author":{"gitID":"alexfoodw"},"content":"        // allow blank address"},{"lineNumber":53,"author":{"gitID":"alexfoodw"},"content":"        if ((\" \").equals(test)) {"},{"lineNumber":54,"author":{"gitID":"alexfoodw"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"alexfoodw"},"content":"        //@@author"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":16,"-":61}},{"path":"src/main/java/seedu/address/model/person/PersonDefaultComparator.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareAddress;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareEmail;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareFavorite;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareName;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.comparePhone;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import java.util.Comparator;"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":" * Default comparator for {@Person}s."},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":" * Sorts in the order:"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":" * 1. {@code Favorite} status"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":" * 2. {@code Name} in lexicographic order"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":" * 3. {@code Phone} in numeric order"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":" * 4. {@code Address} in lexicographic order"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":" * 5. {@code Email} in lexicographic order"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"public class PersonDefaultComparator implements Comparator\u003cReadOnlyPerson\u003e {"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"    public int compare(ReadOnlyPerson thisPerson, ReadOnlyPerson otherPerson) {"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"        if (!thisPerson.getFavorite().equals(otherPerson.getFavorite())) {"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"            return compareFavorite(thisPerson, otherPerson);"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"        } else if (!thisPerson.getName().equals(otherPerson.getName())) {"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"            return compareName(thisPerson, otherPerson);"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"        } else if (!thisPerson.getPhone().equals(otherPerson.getPhone())) {"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"            return comparePhone(thisPerson, otherPerson);"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        } else if (!thisPerson.getAddress().equals(otherPerson.getAddress())) {"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"            return compareAddress(thisPerson, otherPerson);"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        } else {"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"            return compareEmail(thisPerson, otherPerson);"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":36}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.SocialInfo;"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.social.UniqueSocialInfoList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class Person implements ReadOnlyPerson {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cName\u003e name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cPhone\u003e phone;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cEmail\u003e email;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cAddress\u003e address;"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"    private ObjectProperty\u003cFavorite\u003e favorite;"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"    private ObjectProperty\u003cDisplayPhoto\u003e displayPhoto;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cUniqueTagList\u003e tags;"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"    private ObjectProperty\u003cUniqueSocialInfoList\u003e socialInfos;"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"    private ObjectProperty\u003cLastAccessDate\u003e lastAccessDate;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"alexfoodw"},"content":"     * Every field must be present but can be null except \u0027name\u0027."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Favorite favorite, DisplayPhoto displayPhoto,"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"                  Set\u003cTag\u003e tags, UniqueSocialInfoList socialInfos) {"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"        requireAllNonNull(name, phone, email, address, tags, socialInfos);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"        this.favorite \u003d new SimpleObjectProperty\u003c\u003e(favorite);"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"        this.displayPhoto \u003d new SimpleObjectProperty\u003c\u003e(displayPhoto);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        this.socialInfos \u003d new SimpleObjectProperty\u003c\u003e(socialInfos);"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        // set the last access date to now"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"        this.lastAccessDate \u003d new SimpleObjectProperty\u003c\u003e(new LastAccessDate());"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Favorite favorite,"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"                  DisplayPhoto displayPhoto, Set\u003cTag\u003e tags, UniqueSocialInfoList socialInfos,"},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"                  LastAccessDate lastAccessDate) {"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"        this(name, phone, email, address, favorite, displayPhoto, tags, socialInfos);"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"        requireNonNull(lastAccessDate);"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"        this.lastAccessDate \u003d new SimpleObjectProperty\u003c\u003e(lastAccessDate);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Creates a copy of the given ReadOnlyPerson."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Person(ReadOnlyPerson source) {"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"            this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(), source.getFavorite(),"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"                    source.getDisplayPhoto(), source.getTags(), createUniqueSocialInfoList(source),"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"                    source.getLastAccessDate());"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"     * Creates a {@code UniqueSocialInfoList} based on the {@code SocialInfo} belonging to the {@code source}."},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"     * Helper method for {@code Person(ReadOnlyPerson)} constructor to handle the {@code DuplicateDataException}"},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"     * that might be thrown by {@code UniqueSocialInfoList}\u0027s constructor."},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"    private static UniqueSocialInfoList createUniqueSocialInfoList(ReadOnlyPerson source) {"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"        UniqueSocialInfoList uniqueSocialInfoList \u003d null;"},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":"            uniqueSocialInfoList \u003d new UniqueSocialInfoList(source.getSocialInfos());"},{"lineNumber":79,"author":{"gitID":"marvinchin"},"content":"        } catch (DuplicateDataException dde) {"},{"lineNumber":80,"author":{"gitID":"marvinchin"},"content":"            assert false : \"A ReadOnlyPerson should not have duplicate social types in it\u0027s social infos\";"},{"lineNumber":81,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":83,"author":{"gitID":"marvinchin"},"content":"        return uniqueSocialInfoList;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void setName(Name name) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.name.set(requireNonNull(name));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cName\u003e nameProperty() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return name.get();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"marvinchin"},"content":"    public void setPhone(Phone phone) {"},{"lineNumber":101,"author":{"gitID":"marvinchin"},"content":"        this.phone.set(phone);"},{"lineNumber":102,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cPhone\u003e phoneProperty() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return phone.get();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"marvinchin"},"content":"    public void setEmail(Email email) {"},{"lineNumber":115,"author":{"gitID":"marvinchin"},"content":"        this.email.set(email);"},{"lineNumber":116,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cEmail\u003e emailProperty() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return email.get();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"marvinchin"},"content":"    public void setAddress(Address address) {"},{"lineNumber":129,"author":{"gitID":"marvinchin"},"content":"        this.address.set(address);"},{"lineNumber":130,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cAddress\u003e addressProperty() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return address.get();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":143,"author":{"gitID":"KeithSOC"},"content":"    public void setFavorite(Favorite favorite) {"},{"lineNumber":144,"author":{"gitID":"KeithSOC"},"content":"        this.favorite.set(requireNonNull(favorite));"},{"lineNumber":145,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":147,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":148,"author":{"gitID":"KeithSOC"},"content":"    public ObjectProperty\u003cFavorite\u003e favoriteProperty() {"},{"lineNumber":149,"author":{"gitID":"KeithSOC"},"content":"        return favorite;"},{"lineNumber":150,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":152,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":153,"author":{"gitID":"KeithSOC"},"content":"    public Favorite getFavorite() {"},{"lineNumber":154,"author":{"gitID":"KeithSOC"},"content":"        return favorite.get();"},{"lineNumber":155,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":157,"author":{"gitID":"KeithSOC"},"content":"    public void setDisplayPhoto(DisplayPhoto displayPhoto) {"},{"lineNumber":158,"author":{"gitID":"KeithSOC"},"content":"        this.displayPhoto.set(requireNonNull(displayPhoto));"},{"lineNumber":159,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":161,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":162,"author":{"gitID":"KeithSOC"},"content":"    public ObjectProperty\u003cDisplayPhoto\u003e displayPhotoProperty() {"},{"lineNumber":163,"author":{"gitID":"KeithSOC"},"content":"        return displayPhoto;"},{"lineNumber":164,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":166,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":167,"author":{"gitID":"KeithSOC"},"content":"    public DisplayPhoto getDisplayPhoto() {"},{"lineNumber":168,"author":{"gitID":"KeithSOC"},"content":"        return displayPhoto.get();"},{"lineNumber":169,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":171,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.get().toSet());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cUniqueTagList\u003e tagProperty() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Replaces this person\u0027s tags with the tags in the argument tag set."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e replacement) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        tags.set(new UniqueTagList(replacement));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":193,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":194,"author":{"gitID":"marvinchin"},"content":"    public ObjectProperty\u003cUniqueSocialInfoList\u003e socialInfoProperty() {"},{"lineNumber":195,"author":{"gitID":"marvinchin"},"content":"        return socialInfos;"},{"lineNumber":196,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":198,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":199,"author":{"gitID":"marvinchin"},"content":"    public Set\u003cSocialInfo\u003e getSocialInfos() {"},{"lineNumber":200,"author":{"gitID":"marvinchin"},"content":"        return socialInfos.get().toSet();"},{"lineNumber":201,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":203,"author":{"gitID":"marvinchin"},"content":"    public void setSocialInfos(Set\u003cSocialInfo\u003e replacement) throws DuplicateDataException {"},{"lineNumber":204,"author":{"gitID":"marvinchin"},"content":"        socialInfos.set(new UniqueSocialInfoList(replacement));"},{"lineNumber":205,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":207,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":208,"author":{"gitID":"marvinchin"},"content":"    public ObjectProperty\u003cLastAccessDate\u003e lastAccessDateProperty() {"},{"lineNumber":209,"author":{"gitID":"marvinchin"},"content":"        return lastAccessDate;"},{"lineNumber":210,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":212,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":213,"author":{"gitID":"marvinchin"},"content":"    public LastAccessDate getLastAccessDate() {"},{"lineNumber":214,"author":{"gitID":"marvinchin"},"content":"        return lastAccessDate.get();"},{"lineNumber":215,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":217,"author":{"gitID":"marvinchin"},"content":"    public void setLastAccessDate(LastAccessDate replacement) {"},{"lineNumber":218,"author":{"gitID":"marvinchin"},"content":"        lastAccessDate.set(replacement);"},{"lineNumber":219,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":221,"author":{"gitID":"marvinchin"},"content":"    public void setLastAccessDateToNow() {"},{"lineNumber":222,"author":{"gitID":"marvinchin"},"content":"        setLastAccessDate(new LastAccessDate());"},{"lineNumber":223,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":225,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":229,"author":{"gitID":"-"},"content":"                || (other instanceof ReadOnlyPerson // instanceof handles nulls"},{"lineNumber":230,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":236,"author":{"gitID":"KeithSOC"},"content":"        return Objects.hash(name, phone, email, address, favorite, tags);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        return getAsText();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":1,"marvinchin":77,"KeithSOC":38,"-":128}},{"path":"src/main/java/seedu/address/model/person/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s name in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":12,"author":{"gitID":"alexfoodw"},"content":"    //@@author alexfoodw"},{"lineNumber":13,"author":{"gitID":"alexfoodw"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Person names should not be blank\";"},{"lineNumber":14,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":15,"author":{"gitID":"alexfoodw"},"content":"    public final String fullName;"},{"lineNumber":16,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":17,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":"     * Validates given name."},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"alexfoodw"},"content":"     * @throws IllegalValueException if given name string is invalid."},{"lineNumber":21,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"    public Name(String name) throws IllegalValueException {"},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"        requireNonNull(name);"},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"        if (!isValidName(trimmedName)) {"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":"            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"alexfoodw"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"alexfoodw"},"content":"        this.fullName \u003d trimmedName;"},{"lineNumber":29,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":31,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"alexfoodw"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":33,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"alexfoodw"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":35,"author":{"gitID":"alexfoodw"},"content":"        return !(\"\").equals(test);"},{"lineNumber":36,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"alexfoodw"},"content":"    //@@author"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":26,"-":31}},{"path":"src/main/java/seedu/address/model/person/PersonComparatorUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":" * Utility class with useful methods for writing {@code Person} comparators."},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"public class PersonComparatorUtil {"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"     * Compares two {@code Person} based on their {@code Favorite} status."},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"     * The favorited person will be ordered first."},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"     * If both persons have the same favorite status (yes/no), they are considered equal."},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"    public static int compareFavorite(ReadOnlyPerson thisPerson, ReadOnlyPerson otherPerson) {"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"        boolean isThisPersonFavorite \u003d thisPerson.getFavorite().isFavorite();"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"        boolean isOtherPersonFavorite \u003d otherPerson.getFavorite().isFavorite();"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"        if (isThisPersonFavorite \u0026\u0026 !isOtherPersonFavorite) {"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"            return -1;"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"        } else if (!isThisPersonFavorite \u0026\u0026 isOtherPersonFavorite) {"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"            return 1;"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"        } else {"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"            return 0;"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"     * Compares two {@code Person}s based on their {@code Name}."},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"    public static int compareName(ReadOnlyPerson thisPerson, ReadOnlyPerson otherPerson) {"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"        String thisPersonName \u003d thisPerson.getName().toString();"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        String otherPersonName \u003d otherPerson.getName().toString();"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"        return thisPersonName.compareToIgnoreCase(otherPersonName);"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"     * Compares two {@code Person}s based on their {@code Phone}."},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"    public static int comparePhone(ReadOnlyPerson thisPerson, ReadOnlyPerson otherPerson) {"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"        String thisPersonPhone \u003d thisPerson.getPhone().toString();"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"        String otherPersonPhone \u003d otherPerson.getPhone().toString();"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"        return thisPersonPhone.compareToIgnoreCase(otherPersonPhone);"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"     * Compares two {@code Person}s based on their {@code Address}."},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"    public static int compareAddress(ReadOnlyPerson thisPerson, ReadOnlyPerson otherPerson) {"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        String thisPersonAddress \u003d thisPerson.getAddress().toString();"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"        String otherPersonAddress \u003d otherPerson.getAddress().toString();"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"        return thisPersonAddress.compareToIgnoreCase(otherPersonAddress);"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"     * Compares two {@code Person}s based on their {@code Email}."},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"    public static int compareEmail(ReadOnlyPerson thisPerson, ReadOnlyPerson otherPerson) {"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"        String thisPersonEmail \u003d thisPerson.getEmail().toString();"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"        String otherPersonEmail \u003d otherPerson.getEmail().toString();"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"        return thisPersonEmail.compareToIgnoreCase(otherPersonEmail);"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"     * Compares two {@code Person}s based on their {@code LastAccessDate}."},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"     * The person which is most recently accessed person will be ordered first."},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"    public static int compareLastAccessDate(ReadOnlyPerson thisPerson, ReadOnlyPerson otherPerson) {"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"        LastAccessDate thisPersonLastAccessDate \u003d thisPerson.getLastAccessDate();"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"        LastAccessDate otherPersonLastAccessDate \u003d otherPerson.getLastAccessDate();"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"        int dateCompare \u003d thisPersonLastAccessDate.compareTo(otherPersonLastAccessDate);"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"        // Date comparison puts earlier dates first, so we need to reverse it"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"        return -dateCompare;"},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":74}},{"path":"src/main/java/seedu/address/model/person/LastAccessDate.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import java.util.Date;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":" * Represents the last date a {@code Person} is accessed."},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":" * Guarantees immutability."},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"public class LastAccessDate implements Comparable\u003cLastAccessDate\u003e {"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"    private Date lastAccessDate;"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"     * Constructs a new LastAccessDate with the date set to the current date."},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"    public LastAccessDate() {"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"        lastAccessDate \u003d new Date();"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"     * Constructs a new LastAccessDate with the date equivalent to the input {@code Date}."},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"    public LastAccessDate(Date date) {"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"        requireNonNull(date);"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"        // store a copy instead of using input date directly to avoid reference to external objects that can be mutated"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"        lastAccessDate \u003d copyDate(date);"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"    public Date getDate() {"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        // returns a copy of the date so that the internal date cannot be mutated by external methods"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"        return copyDate(lastAccessDate);"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"        return lastAccessDate.toString();"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"                || (other instanceof LastAccessDate // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"                \u0026\u0026 this.lastAccessDate.equals(((LastAccessDate) other).lastAccessDate));"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"     * Utility method to create a copy of the input {@code Date}s."},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"    private Date copyDate(Date originalDate) {"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        // clone using constructor instead of clone method due to vulnerabilities in the clone method"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"        // see https://stackoverflow.com/questions/7082553/java-util-date-clone-or-copy-to-not-expose-internal-reference"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"        Date copiedDate \u003d new Date(originalDate.getTime());"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        return copiedDate;"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"    public int compareTo(LastAccessDate other) {"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"        return this.lastAccessDate.compareTo(other.lastAccessDate);"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":62}},{"path":"src/main/java/seedu/address/model/social/SocialInfo.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.model.social;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":" * Represents information about a {@code Person}\u0027s social media account."},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":" * Guarantees immutability."},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"public class SocialInfo {"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"    private final String username;"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"    private final String socialType;"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"    private final String socialUrl;"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"    public SocialInfo(String socialType, String username, String socialUrl) {"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"        requireAllNonNull(username, socialType, socialUrl);"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"        String trimmedUsername \u003d username.trim();"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"        String trimmedSocialType \u003d socialType.trim();"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":"        String trimmedSocialUrl \u003d socialUrl.trim();"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"        this.username \u003d trimmedUsername;"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"        this.socialType \u003d trimmedSocialType;"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"        this.socialUrl \u003d trimmedSocialUrl;"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"     * Returns the username for the represented account."},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"    public String getUsername() {"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        return this.username;"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"     * Returns the platform of this social media information."},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"    public String getSocialType() {"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"        return this.socialType;"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"     * Returns the link to the social media feed for the represented account."},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"    public String getSocialUrl() {"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"        return this.socialUrl;"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"     * Formats state as text for viewing."},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"        return \"[\""},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"            + \"Type: \" + getSocialType() + \", \""},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"            + \"Username: \" + getUsername() + \", \""},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"            + \"Link: \" + getSocialUrl() + \"]\";"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"        return toString().hashCode();"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"        return other \u003d\u003d this"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"                || (other instanceof SocialInfo"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":"                \u0026\u0026 this.getUsername().equals(((SocialInfo) other).getUsername())"},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"                \u0026\u0026 this.getSocialType().equals(((SocialInfo) other).getSocialType())"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"                \u0026\u0026 this.getSocialUrl().equals(((SocialInfo) other).getSocialUrl()));"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":71}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.commons.core.ThemeSettings;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"    private ThemeSettings themeSettings;"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":"    private String addressBookName \u003d \"KayPoh\";"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"    public UserPrefs() {"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"        this.setGuiSettings(1100, 835, 0, 0);"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"        this.setThemeSettings(\"view/ThemeDay.css\", \"view/ThemeDayExtensions.css\");"},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"    public ThemeSettings getThemeSettings() {"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"        return themeSettings \u003d\u003d null ? new ThemeSettings() : themeSettings;"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"    public void updateLastUsedThemeSetting(ThemeSettings themeSettings) {"},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"        this.themeSettings \u003d themeSettings;"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"    public void setThemeSettings(String theme, String themeExtensions) {"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"        themeSettings \u003d new ThemeSettings(theme, themeExtensions);"},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { // this handles null as well."},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName)"},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":"                \u0026\u0026 Objects.equals(themeSettings, o.themeSettings);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"        return Objects.hash(guiSettings, themeSettings, addressBookFilePath, addressBookName);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":98,"author":{"gitID":"KeithSOC"},"content":"        sb.append(\"\\nTheme Settings : \" + themeSettings.toString());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KeithSOC":32,"-":72}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.logic.commands.FavoriteCommand;"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            setPersons(newData.getPersonList());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            assert false : \"AddressBooks should not have duplicate persons\";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(persons);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void addPerson(ReadOnlyPerson p) throws DuplicatePersonException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Person newPerson \u003d new Person(p);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(newPerson);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":94,"author":{"gitID":"-"},"content":"        persons.add(newPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedReadOnlyPerson}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedReadOnlyPerson}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @see #syncMasterTagListWith(Person)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedReadOnlyPerson)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        requireNonNull(editedReadOnlyPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new Person(editedReadOnlyPerson);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(editedPerson);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":116,"author":{"gitID":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":117,"author":{"gitID":"marvinchin"},"content":"        indicatePersonAccessed(editedPerson);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Ensures that every tag in this person:"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(Person person) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":135,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        person.setTags(correctTagReferences);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Ensures that every tag in these persons:"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     *  @see #syncMasterTagListWith(Person)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(UniquePersonList persons) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        persons.forEach(this::syncMasterTagListWith);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public boolean removePerson(ReadOnlyPerson key) throws PersonNotFoundException {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":163,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"KeithSOC"},"content":"     * Sets {@code personToFav} favorite field to true or false according to {@code type}."},{"lineNumber":165,"author":{"gitID":"KeithSOC"},"content":"     * Replaces the given person {@code target} in the list with {@code personToFav}."},{"lineNumber":166,"author":{"gitID":"KeithSOC"},"content":"     *"},{"lineNumber":167,"author":{"gitID":"KeithSOC"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":168,"author":{"gitID":"KeithSOC"},"content":"     *      another existing person in the list."},{"lineNumber":169,"author":{"gitID":"KeithSOC"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":170,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"KeithSOC"},"content":"    public void toggleFavoritePerson(ReadOnlyPerson target, String type)"},{"lineNumber":172,"author":{"gitID":"KeithSOC"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":173,"author":{"gitID":"KeithSOC"},"content":"        if (persons.contains(target)) {"},{"lineNumber":174,"author":{"gitID":"KeithSOC"},"content":"            Person personToFav \u003d new Person(target);"},{"lineNumber":175,"author":{"gitID":"KeithSOC"},"content":"            if (type.equals(FavoriteCommand.COMMAND_WORD)) {"},{"lineNumber":176,"author":{"gitID":"KeithSOC"},"content":"                personToFav.setFavorite(new Favorite(true));  // Favorite"},{"lineNumber":177,"author":{"gitID":"KeithSOC"},"content":"            } else {"},{"lineNumber":178,"author":{"gitID":"KeithSOC"},"content":"                personToFav.setFavorite(new Favorite(false)); // UnFavorite"},{"lineNumber":179,"author":{"gitID":"KeithSOC"},"content":"            }"},{"lineNumber":180,"author":{"gitID":"KeithSOC"},"content":"            persons.setPerson(target, personToFav);"},{"lineNumber":181,"author":{"gitID":"KeithSOC"},"content":"            indicatePersonAccessed(personToFav);"},{"lineNumber":182,"author":{"gitID":"KeithSOC"},"content":"        } else {"},{"lineNumber":183,"author":{"gitID":"KeithSOC"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":184,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":187,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":188,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":189,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"marvinchin"},"content":"     * Indicates that a {@code Person} in the address book has been accessed."},{"lineNumber":191,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"marvinchin"},"content":"    public void indicatePersonAccessed(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":193,"author":{"gitID":"marvinchin"},"content":"        Person updatedPerson \u003d new Person(target);"},{"lineNumber":194,"author":{"gitID":"marvinchin"},"content":"        updatedPerson.setLastAccessDateToNow();"},{"lineNumber":195,"author":{"gitID":"marvinchin"},"content":"        try {"},{"lineNumber":196,"author":{"gitID":"marvinchin"},"content":"            persons.setPerson(target, updatedPerson);"},{"lineNumber":197,"author":{"gitID":"marvinchin"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":198,"author":{"gitID":"marvinchin"},"content":"            assert false : \"Person should be unique\";"},{"lineNumber":199,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":202,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":203,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":232,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":233,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"marvinchin":18,"KeithSOC":28,"-":195}},{"path":"src/main/java/seedu/address/model/person/PersonRecentComparator.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareAddress;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareEmail;"},{"lineNumber":5,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareFavorite;"},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareLastAccessDate;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.compareName;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import static seedu.address.model.person.PersonComparatorUtil.comparePhone;"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"import java.util.Comparator;"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":" * Comparator for {@Person}s when sorting by {@code LastAccessDate}."},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":" * Sorts in the order:"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":" * 1. {@code LastAccessDate} in order of recency"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":" * 2. {@code Name} in lexicographic order"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":" * 3. {@code Favorite} status"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":" * 4. {@code Phone} in numeric order"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":" * 5. {@code Address} in lexicographic order"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":" * 6. {@code Email} in lexicographic order"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"public class PersonRecentComparator implements Comparator\u003cReadOnlyPerson\u003e {"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"    public int compare(ReadOnlyPerson thisPerson, ReadOnlyPerson otherPerson) {"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"        if (!thisPerson.getLastAccessDate().equals(otherPerson.getLastAccessDate())) {"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"            return compareLastAccessDate(thisPerson, otherPerson);"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"        } else if (!thisPerson.getFavorite().equals(otherPerson.getFavorite())) {"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"            return compareFavorite(thisPerson, otherPerson);"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"        } else if (!thisPerson.getName().equals(otherPerson.getName())) {"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"            return compareName(thisPerson, otherPerson);"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"        } else if (!thisPerson.getPhone().equals(otherPerson.getPhone())) {"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"            return comparePhone(thisPerson, otherPerson);"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"        } else if (!thisPerson.getAddress().equals(otherPerson.getAddress())) {"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"            return compareAddress(thisPerson, otherPerson);"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"        } else {"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"            return compareEmail(thisPerson, otherPerson);"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":40}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"alexfoodw"},"content":"    //@@author alexfoodw"},{"lineNumber":19,"author":{"gitID":"alexfoodw"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"alexfoodw"},"content":"     * Constructs a null tag field"},{"lineNumber":21,"author":{"gitID":"alexfoodw"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"alexfoodw"},"content":"    public Tag() {"},{"lineNumber":23,"author":{"gitID":"alexfoodw"},"content":"        this.tagName \u003d null;"},{"lineNumber":24,"author":{"gitID":"alexfoodw"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"alexfoodw"},"content":"    //@@author"},{"lineNumber":26,"author":{"gitID":"alexfoodw"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Validates given tag name."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given tag name string is invalid."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public Tag(String name) throws IllegalValueException {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (!isValidTagName(trimmedName)) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagName \u003d trimmedName;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexfoodw":9,"-":58}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"marvinchin"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitID":"sarahnzx"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"import javafx.collections.transformation.SortedList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":20,"author":{"gitID":"sarahnzx"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.person.PersonDefaultComparator;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"sarahnzx"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"    private final SortedList\u003cReadOnlyPerson\u003e sortedPersons;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cReadOnlyPerson\u003e filteredPersons;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"    private Predicate\u003cReadOnlyPerson\u003e lastFilterPredicate;"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"    private Comparator\u003cReadOnlyPerson\u003e lastSortComparator;"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"     * Initializes a {@code ModelManager} with the given {@code addressBook} and {@code userPrefs}."},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"        super();"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"        sortedPersons \u003d new SortedList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(sortedPersons);"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"        // To avoid having to re-sort upon every change in filter, we first sort the list before applying the filter"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        // This was we only need to re-sort when there is a change in the backing person list"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"        sortPersons(new PersonDefaultComparator());"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":95,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"marvinchin"},"content":"    public synchronized void addPersons(Collection\u003cReadOnlyPerson\u003e persons) {"},{"lineNumber":97,"author":{"gitID":"marvinchin"},"content":"        for (ReadOnlyPerson person : persons) {"},{"lineNumber":98,"author":{"gitID":"marvinchin"},"content":"            try {"},{"lineNumber":99,"author":{"gitID":"marvinchin"},"content":"                addressBook.addPerson(person);"},{"lineNumber":100,"author":{"gitID":"marvinchin"},"content":"                logger.info(\"Added person: \" + person);"},{"lineNumber":101,"author":{"gitID":"marvinchin"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":102,"author":{"gitID":"marvinchin"},"content":"                logger.info(\"Person already in address book: \" + person);"},{"lineNumber":103,"author":{"gitID":"marvinchin"},"content":"                continue;"},{"lineNumber":104,"author":{"gitID":"marvinchin"},"content":"            }"},{"lineNumber":105,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":107,"author":{"gitID":"marvinchin"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":108,"author":{"gitID":"marvinchin"},"content":"        indicateAddressBookChanged();"},{"lineNumber":109,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":111,"author":{"gitID":"sarahnzx"},"content":"    //@@author sarahnzx"},{"lineNumber":112,"author":{"gitID":"sarahnzx"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"sarahnzx"},"content":"    public void removeTag(Tag tag) throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":114,"author":{"gitID":"sarahnzx"},"content":"        for (int i \u003d 0; i \u003c addressBook.getPersonList().size(); i++) {"},{"lineNumber":115,"author":{"gitID":"sarahnzx"},"content":"            ReadOnlyPerson oldPerson \u003d addressBook.getPersonList().get(i);"},{"lineNumber":116,"author":{"gitID":"sarahnzx"},"content":"            Person newPerson \u003d new Person(oldPerson);"},{"lineNumber":117,"author":{"gitID":"sarahnzx"},"content":"            Set\u003cTag\u003e newTags \u003d newPerson.getTags();"},{"lineNumber":118,"author":{"gitID":"sarahnzx"},"content":"            newTags.remove(tag);"},{"lineNumber":119,"author":{"gitID":"sarahnzx"},"content":"            newPerson.setTags(newTags);"},{"lineNumber":120,"author":{"gitID":"sarahnzx"},"content":"            addressBook.updatePerson(oldPerson, newPerson);"},{"lineNumber":121,"author":{"gitID":"sarahnzx"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"sarahnzx"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"sarahnzx"},"content":"    //@@author"},{"lineNumber":124,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":129,"author":{"gitID":"marvinchin"},"content":"        indicatePersonAccessed(target);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":135,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"KeithSOC"},"content":"    public void toggleFavoritePerson(ReadOnlyPerson target, String type)"},{"lineNumber":137,"author":{"gitID":"KeithSOC"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":138,"author":{"gitID":"KeithSOC"},"content":"        requireAllNonNull(target, type);"},{"lineNumber":139,"author":{"gitID":"KeithSOC"},"content":"        addressBook.toggleFavoritePerson(target, type);"},{"lineNumber":140,"author":{"gitID":"KeithSOC"},"content":"        indicateAddressBookChanged();"},{"lineNumber":141,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":143,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":144,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":145,"author":{"gitID":"marvinchin"},"content":"    public Index getPersonIndex(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":146,"author":{"gitID":"marvinchin"},"content":"        int zeroBasedIndex \u003d filteredPersons.indexOf(target);"},{"lineNumber":147,"author":{"gitID":"marvinchin"},"content":"        if (zeroBasedIndex \u003d\u003d -1) {"},{"lineNumber":148,"author":{"gitID":"marvinchin"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":149,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"marvinchin"},"content":"        return Index.fromZeroBased(zeroBasedIndex);"},{"lineNumber":151,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":153,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":154,"author":{"gitID":"marvinchin"},"content":"    public void sortPersons(Comparator\u003cReadOnlyPerson\u003e comparator) {"},{"lineNumber":155,"author":{"gitID":"marvinchin"},"content":"        logger.info(\"Sorting persons based using: \" + comparator.getClass());"},{"lineNumber":156,"author":{"gitID":"marvinchin"},"content":"        sortedPersons.setComparator(comparator);"},{"lineNumber":157,"author":{"gitID":"marvinchin"},"content":"        lastSortComparator \u003d comparator;"},{"lineNumber":158,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":160,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":161,"author":{"gitID":"marvinchin"},"content":"    public void selectPerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":162,"author":{"gitID":"marvinchin"},"content":"        indicatePersonAccessed(target);"},{"lineNumber":163,"author":{"gitID":"marvinchin"},"content":"        // TODO(Marvin): Since IO operations are expensive, consider if we can defer this operation instead of saving"},{"lineNumber":164,"author":{"gitID":"marvinchin"},"content":"        // on every access (which includes select)"},{"lineNumber":165,"author":{"gitID":"marvinchin"},"content":"        indicateAddressBookChanged();"},{"lineNumber":166,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":168,"author":{"gitID":"marvinchin"},"content":"    private void indicatePersonAccessed(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":169,"author":{"gitID":"marvinchin"},"content":"        logger.info(\"Indicated that \" + target + \"has been accessed.\");"},{"lineNumber":170,"author":{"gitID":"marvinchin"},"content":"        addressBook.indicatePersonAccessed(target);"},{"lineNumber":171,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":173,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":174,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code ReadOnlyPerson} backed by the internal list of"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":190,"author":{"gitID":"marvinchin"},"content":"        lastFilterPredicate \u003d predicate;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":194,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":195,"author":{"gitID":"marvinchin"},"content":"    public Model makeCopy() {"},{"lineNumber":196,"author":{"gitID":"marvinchin"},"content":"        // initialize new UserPrefs for now as address book doesn\u0027t make use of it"},{"lineNumber":197,"author":{"gitID":"marvinchin"},"content":"        ModelManager copy \u003d new ModelManager(this.getAddressBook(), new UserPrefs());"},{"lineNumber":198,"author":{"gitID":"marvinchin"},"content":"        copy.sortPersons(lastSortComparator);"},{"lineNumber":199,"author":{"gitID":"marvinchin"},"content":"        copy.updateFilteredPersonList(lastFilterPredicate);"},{"lineNumber":200,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":201,"author":{"gitID":"marvinchin"},"content":"        return copy;"},{"lineNumber":202,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":204,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":205,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":221,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahnzx":18,"marvinchin":91,"KeithSOC":10,"-":105}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import java.util.Collection;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"sarahnzx"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    Predicate\u003cReadOnlyPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"    /** {@code Predicate} that consists of all ReadOnlyPerson who has been favorited */"},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":"    Predicate\u003cReadOnlyPerson\u003e PREDICATE_SHOW_FAV_PERSONS \u003d p -\u003e p.getFavorite().isFavorite();"},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"    //@@author"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    void addPerson(ReadOnlyPerson person) throws DuplicatePersonException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":"    /** Adds all persons in the given collection */"},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"    void addPersons(Collection\u003cReadOnlyPerson\u003e persons);"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":"    /** Sorts the {@code Person}s in the address book based on the input {@code comparator}. */"},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"    void sortPersons(Comparator\u003cReadOnlyPerson\u003e comparator);"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"    //@@author keithsoc"},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"    /** Favorites or unfavorites the given person. Should update the last accessed time of the person. */"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"    void toggleFavoritePerson(ReadOnlyPerson target, String type)"},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"    /** Selects the given {@code Person}. Should update the {@code LastAccessDate} of the person. */"},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"    void selectPerson(ReadOnlyPerson target) throws PersonNotFoundException;"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"     * Returns the {@code Index} of the {@code target} in the filtered person list."},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"    Index getPersonIndex(ReadOnlyPerson target) throws PersonNotFoundException;"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"    //@@author"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"     * Should update the last accessed time of the person."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"sarahnzx"},"content":"    void removeTag(Tag tag) throws PersonNotFoundException, DuplicatePersonException;"},{"lineNumber":74,"author":{"gitID":"sarahnzx"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate);"},{"lineNumber":83,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":84,"author":{"gitID":"marvinchin"},"content":"    //@@author marvinchin"},{"lineNumber":85,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"marvinchin"},"content":"     * Returns a defensive copy of the {@code model}."},{"lineNumber":87,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"marvinchin"},"content":"    Model makeCopy();"},{"lineNumber":89,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"sarahnzx":3,"marvinchin":30,"KeithSOC":10,"-":46}},{"path":"src/main/java/seedu/address/model/social/UniqueSocialInfoList.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.model.social;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"marvinchin"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":" * A list of {@code SocialInfo}s that enforces no nulls and no duplicate social platforms between its elements."},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"public class UniqueSocialInfoList implements Iterable\u003cSocialInfo\u003e {"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"    private final ObservableList\u003cSocialInfo\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"     * Constructs empty SocialInfoList."},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    public UniqueSocialInfoList() {}"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"     * Creates a UniqueSocialInfoList using given {@code socialInfos}."},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"     * Enforces no nulls."},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"    public UniqueSocialInfoList(Set\u003cSocialInfo\u003e socialInfos) throws DuplicateSocialTypeException {"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"        requireAllNonNull(socialInfos);"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"        if (containsDuplicateSocialType(socialInfos)) {"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"            throw new DuplicateSocialTypeException();"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"        internalList.addAll(socialInfos);"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"        assert areInternalListSocialTypesUnique();"},{"lineNumber":40,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":42,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":43,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"marvinchin"},"content":"     * Returns all the social media information in this list as a {@code Set}."},{"lineNumber":45,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"marvinchin"},"content":"    public Set\u003cSocialInfo\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"marvinchin"},"content":"        assert areInternalListSocialTypesUnique();"},{"lineNumber":48,"author":{"gitID":"marvinchin"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":51,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"marvinchin"},"content":"     * Replaces the {@code SocialInfo} in the internal list with those in the argument {@code SocialInfo} set."},{"lineNumber":53,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"marvinchin"},"content":"    public void setSocialInfos(Set\u003cSocialInfo\u003e socialInfos) {"},{"lineNumber":55,"author":{"gitID":"marvinchin"},"content":"        requireAllNonNull(socialInfos);"},{"lineNumber":56,"author":{"gitID":"marvinchin"},"content":"        internalList.setAll(socialInfos);"},{"lineNumber":57,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":58,"author":{"gitID":"marvinchin"},"content":"        assert areInternalListSocialTypesUnique();"},{"lineNumber":59,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":61,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"marvinchin"},"content":"     * Returns true if the internal list contains a {@code SocialInfo} with the same social platform."},{"lineNumber":63,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"marvinchin"},"content":"    public boolean containsSameType(SocialInfo toCheck) {"},{"lineNumber":65,"author":{"gitID":"marvinchin"},"content":"        requireNonNull(toCheck);"},{"lineNumber":66,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":67,"author":{"gitID":"marvinchin"},"content":"        String toCheckType \u003d toCheck.getSocialType();"},{"lineNumber":68,"author":{"gitID":"marvinchin"},"content":"        for (SocialInfo socialInfo : internalList) {"},{"lineNumber":69,"author":{"gitID":"marvinchin"},"content":"            String thisSocialType \u003d socialInfo.getSocialType();"},{"lineNumber":70,"author":{"gitID":"marvinchin"},"content":"            if (toCheckType.equals(thisSocialType)) {"},{"lineNumber":71,"author":{"gitID":"marvinchin"},"content":"                return true;"},{"lineNumber":72,"author":{"gitID":"marvinchin"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":75,"author":{"gitID":"marvinchin"},"content":"        return false;"},{"lineNumber":76,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":78,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"marvinchin"},"content":"     * Adds a {@code SocialInfo} to the internal list."},{"lineNumber":80,"author":{"gitID":"marvinchin"},"content":"     * @throws DuplicateSocialTypeException if the platform represented by the {@code SocialInfo} to add is a duplicate"},{"lineNumber":81,"author":{"gitID":"marvinchin"},"content":"     * of another element in the list."},{"lineNumber":82,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"marvinchin"},"content":"    public void add(SocialInfo toAdd) throws DuplicateSocialTypeException {"},{"lineNumber":84,"author":{"gitID":"marvinchin"},"content":"        requireNonNull(toAdd);"},{"lineNumber":85,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":86,"author":{"gitID":"marvinchin"},"content":"        if (containsSameType(toAdd)) {"},{"lineNumber":87,"author":{"gitID":"marvinchin"},"content":"            throw new DuplicateSocialTypeException();"},{"lineNumber":88,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"marvinchin"},"content":"        internalList.add(toAdd);"},{"lineNumber":90,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":91,"author":{"gitID":"marvinchin"},"content":"        assert areInternalListSocialTypesUnique();"},{"lineNumber":92,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":94,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"marvinchin"},"content":"     * Checks that there are no {@code SocialInfo} of the same platform in the internal list."},{"lineNumber":96,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"marvinchin"},"content":"    private boolean areInternalListSocialTypesUnique() {"},{"lineNumber":98,"author":{"gitID":"marvinchin"},"content":"        return !containsDuplicateSocialType(internalList);"},{"lineNumber":99,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":101,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"marvinchin"},"content":"     * Checks that there are no {@code SocialInfo} of the same platform in the {@code Collection\u003cSocialInfo\u003e}."},{"lineNumber":103,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"marvinchin"},"content":"    private boolean containsDuplicateSocialType(Collection\u003cSocialInfo\u003e socialInfos) {"},{"lineNumber":105,"author":{"gitID":"marvinchin"},"content":"        HashSet\u003cString\u003e socialTypes \u003d new HashSet\u003c\u003e();"},{"lineNumber":106,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":107,"author":{"gitID":"marvinchin"},"content":"        for (SocialInfo socialInfo : socialInfos) {"},{"lineNumber":108,"author":{"gitID":"marvinchin"},"content":"            String socialType \u003d socialInfo.getSocialType();"},{"lineNumber":109,"author":{"gitID":"marvinchin"},"content":"            if (socialTypes.contains(socialType)) {"},{"lineNumber":110,"author":{"gitID":"marvinchin"},"content":"                return true;"},{"lineNumber":111,"author":{"gitID":"marvinchin"},"content":"            } else {"},{"lineNumber":112,"author":{"gitID":"marvinchin"},"content":"                socialTypes.add(socialType);"},{"lineNumber":113,"author":{"gitID":"marvinchin"},"content":"            }"},{"lineNumber":114,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"marvinchin"},"content":"        return false;"},{"lineNumber":116,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":118,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"marvinchin"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":120,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"marvinchin"},"content":"    public ObservableList\u003cSocialInfo\u003e asObservableList() {"},{"lineNumber":122,"author":{"gitID":"marvinchin"},"content":"        assert areInternalListSocialTypesUnique();"},{"lineNumber":123,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":124,"author":{"gitID":"marvinchin"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":125,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":127,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"marvinchin"},"content":"    public Iterator\u003cSocialInfo\u003e iterator() {"},{"lineNumber":129,"author":{"gitID":"marvinchin"},"content":"        assert areInternalListSocialTypesUnique();"},{"lineNumber":130,"author":{"gitID":"marvinchin"},"content":"        return internalList.iterator();"},{"lineNumber":131,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":132,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":134,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"marvinchin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":136,"author":{"gitID":"marvinchin"},"content":"        assert areInternalListSocialTypesUnique();"},{"lineNumber":137,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":138,"author":{"gitID":"marvinchin"},"content":"        return other \u003d\u003d this"},{"lineNumber":139,"author":{"gitID":"marvinchin"},"content":"                || (other instanceof UniqueSocialInfoList"},{"lineNumber":140,"author":{"gitID":"marvinchin"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueSocialInfoList) other).internalList));"},{"lineNumber":141,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":143,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"marvinchin"},"content":"     * Returns true if the elements in this list is equal to the elements in {@code other}."},{"lineNumber":145,"author":{"gitID":"marvinchin"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":146,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"marvinchin"},"content":"    public boolean equalsOrderInsensitive(UniqueSocialInfoList other) {"},{"lineNumber":148,"author":{"gitID":"marvinchin"},"content":"        assert areInternalListSocialTypesUnique();"},{"lineNumber":149,"author":{"gitID":"marvinchin"},"content":"        assert other.areInternalListSocialTypesUnique();"},{"lineNumber":150,"author":{"gitID":"marvinchin"},"content":"        return other \u003d\u003d this"},{"lineNumber":151,"author":{"gitID":"marvinchin"},"content":"                || new HashSet\u003c\u003e(internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":152,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":154,"author":{"gitID":"marvinchin"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"marvinchin"},"content":"     * Signals that an operation would have violated the \u0027no duplicate social platform\u0027 property of the list."},{"lineNumber":156,"author":{"gitID":"marvinchin"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"marvinchin"},"content":"    public static class DuplicateSocialTypeException extends DuplicateDataException {"},{"lineNumber":158,"author":{"gitID":"marvinchin"},"content":"        protected DuplicateSocialTypeException() {"},{"lineNumber":159,"author":{"gitID":"marvinchin"},"content":"            super(\"Person cannot have more than one social media account of the same social type.\");"},{"lineNumber":160,"author":{"gitID":"marvinchin"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":151,"-":11}},{"path":"src/main/java/seedu/address/model/person/TagsContainKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"marvinchin"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":3,"author":{"gitID":"marvinchin"},"content":"import java.util.Collection;"},{"lineNumber":4,"author":{"gitID":"marvinchin"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":10,"author":{"gitID":"marvinchin"},"content":"//@@author marvinchin"},{"lineNumber":11,"author":{"gitID":"marvinchin"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"marvinchin"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Tag} matches any of the keywords given."},{"lineNumber":13,"author":{"gitID":"marvinchin"},"content":" */"},{"lineNumber":14,"author":{"gitID":"marvinchin"},"content":"public class TagsContainKeywordsPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":15,"author":{"gitID":"marvinchin"},"content":"    private final Collection\u003cString\u003e keywords;"},{"lineNumber":16,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":17,"author":{"gitID":"marvinchin"},"content":"    public TagsContainKeywordsPredicate(Collection\u003cString\u003e keywords) {"},{"lineNumber":18,"author":{"gitID":"marvinchin"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":19,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":21,"author":{"gitID":"marvinchin"},"content":"    private boolean doesPersonTagsMatchKeyword(ReadOnlyPerson person, String keyword) {"},{"lineNumber":22,"author":{"gitID":"marvinchin"},"content":"        Set\u003cTag\u003e tags \u003d person.getTags();"},{"lineNumber":23,"author":{"gitID":"marvinchin"},"content":"        return tags.stream().anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(tag.tagName, keyword));"},{"lineNumber":24,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":26,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"marvinchin"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":28,"author":{"gitID":"marvinchin"},"content":"        return keywords.stream()"},{"lineNumber":29,"author":{"gitID":"marvinchin"},"content":"                .anyMatch(keyword -\u003e doesPersonTagsMatchKeyword(person, keyword));"},{"lineNumber":30,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":32,"author":{"gitID":"marvinchin"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"marvinchin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"marvinchin"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"marvinchin"},"content":"                || (other instanceof TagsContainKeywordsPredicate // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"marvinchin"},"content":"                \u0026\u0026 this.keywords.equals(((TagsContainKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":37,"author":{"gitID":"marvinchin"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"marvinchin"},"content":""},{"lineNumber":39,"author":{"gitID":"marvinchin"},"content":"}"}],"authorContributionMap":{"marvinchin":36,"-":3}},{"path":"src/main/java/seedu/address/model/person/DisplayPhoto.java","lines":[{"lineNumber":1,"author":{"gitID":"KeithSOC"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":3,"author":{"gitID":"KeithSOC"},"content":"import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitID":"marvinchin"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitID":"marvinchin"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitID":"KeithSOC"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":12,"author":{"gitID":"KeithSOC"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":15,"author":{"gitID":"KeithSOC"},"content":"//@@author keithsoc"},{"lineNumber":16,"author":{"gitID":"KeithSOC"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"KeithSOC"},"content":" * Represents a Person\u0027s Display Photo in the address book."},{"lineNumber":18,"author":{"gitID":"KeithSOC"},"content":" * Guarantees: immutability and validity."},{"lineNumber":19,"author":{"gitID":"KeithSOC"},"content":" */"},{"lineNumber":20,"author":{"gitID":"KeithSOC"},"content":"public class DisplayPhoto {"},{"lineNumber":21,"author":{"gitID":"KeithSOC"},"content":"    // Display photo for sample persons in SampleDataUtil"},{"lineNumber":22,"author":{"gitID":"KeithSOC"},"content":"    public static final String SAMPLE_PHOTO \u003d \"/images/sample_dp_one.png\";"},{"lineNumber":23,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":24,"author":{"gitID":"KeithSOC"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(DisplayPhoto.class);"},{"lineNumber":25,"author":{"gitID":"KeithSOC"},"content":"    private static final String MESSAGE_PHOTO_CONSTRAINTS \u003d \"Display photo: \""},{"lineNumber":26,"author":{"gitID":"KeithSOC"},"content":"            + \"specified file does not exist or it exceeded maximum size of 1MB.\";"},{"lineNumber":27,"author":{"gitID":"KeithSOC"},"content":"    private static final String MESSAGE_PHOTO_COPY_ERROR \u003d \"Error copying photo to application\u0027s data directory\";"},{"lineNumber":28,"author":{"gitID":"KeithSOC"},"content":"    private static final String DEFAULT_SAVE_DIR \u003d \"data\" + File.separator;"},{"lineNumber":29,"author":{"gitID":"KeithSOC"},"content":"    private static final String ALLOWED_TYPE_JPG \u003d \".jpg\";"},{"lineNumber":30,"author":{"gitID":"KeithSOC"},"content":"    private static final String ALLOWED_TYPE_JPEG \u003d \".jpeg\";"},{"lineNumber":31,"author":{"gitID":"KeithSOC"},"content":"    private static final String ALLOWED_TYPE_PNG \u003d \".png\";"},{"lineNumber":32,"author":{"gitID":"KeithSOC"},"content":"    private static final int MAX_SIZE \u003d 1000000; // Sets allowable maximum display photo size to 1MB"},{"lineNumber":33,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":34,"author":{"gitID":"KeithSOC"},"content":"    public final String value;"},{"lineNumber":35,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":36,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"KeithSOC"},"content":"     * Validates given Display Photo."},{"lineNumber":38,"author":{"gitID":"KeithSOC"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"KeithSOC"},"content":"     * @throws IllegalValueException if given display photo string is invalid."},{"lineNumber":40,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"KeithSOC"},"content":"    public DisplayPhoto(String photoPath) throws IllegalValueException {"},{"lineNumber":42,"author":{"gitID":"KeithSOC"},"content":"        // Allow null values"},{"lineNumber":43,"author":{"gitID":"KeithSOC"},"content":"        if (photoPath \u003d\u003d null || photoPath.isEmpty()) {"},{"lineNumber":44,"author":{"gitID":"KeithSOC"},"content":"            this.value \u003d null;"},{"lineNumber":45,"author":{"gitID":"KeithSOC"},"content":"        } else if (isSamplePhoto(photoPath)) {"},{"lineNumber":46,"author":{"gitID":"KeithSOC"},"content":"            this.value \u003d photoPath;"},{"lineNumber":47,"author":{"gitID":"KeithSOC"},"content":"        } else {"},{"lineNumber":48,"author":{"gitID":"KeithSOC"},"content":"            String trimmedPhotoPath \u003d photoPath.trim();"},{"lineNumber":49,"author":{"gitID":"KeithSOC"},"content":"            if (!isValidPhoto(trimmedPhotoPath)) {"},{"lineNumber":50,"author":{"gitID":"KeithSOC"},"content":"                throw new IllegalValueException(MESSAGE_PHOTO_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitID":"KeithSOC"},"content":"            } else {"},{"lineNumber":52,"author":{"gitID":"KeithSOC"},"content":"                File from \u003d new File(trimmedPhotoPath);"},{"lineNumber":53,"author":{"gitID":"KeithSOC"},"content":"                this.value \u003d DEFAULT_SAVE_DIR + from.getName();"},{"lineNumber":54,"author":{"gitID":"KeithSOC"},"content":"                Path to \u003d Paths.get(this.value);"},{"lineNumber":55,"author":{"gitID":"KeithSOC"},"content":"                copyPhotoToDefaultDir(from.toPath(), to);"},{"lineNumber":56,"author":{"gitID":"KeithSOC"},"content":"            }"},{"lineNumber":57,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":60,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"KeithSOC"},"content":"     * Returns if a given string is a valid person display photo file and of correct size."},{"lineNumber":62,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"KeithSOC"},"content":"    private static boolean isValidPhoto(String test) {"},{"lineNumber":64,"author":{"gitID":"KeithSOC"},"content":"        File file \u003d new File(test);"},{"lineNumber":65,"author":{"gitID":"KeithSOC"},"content":"        return file.exists()"},{"lineNumber":66,"author":{"gitID":"KeithSOC"},"content":"                \u0026\u0026 file.length() \u003c\u003d MAX_SIZE"},{"lineNumber":67,"author":{"gitID":"KeithSOC"},"content":"                \u0026\u0026 (test.endsWith(ALLOWED_TYPE_JPG)"},{"lineNumber":68,"author":{"gitID":"KeithSOC"},"content":"                || test.endsWith(ALLOWED_TYPE_JPEG)"},{"lineNumber":69,"author":{"gitID":"KeithSOC"},"content":"                || test.endsWith(ALLOWED_TYPE_PNG));"},{"lineNumber":70,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":72,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"KeithSOC"},"content":"     * Returns if a given string is a path to one of the sample photos"},{"lineNumber":74,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"KeithSOC"},"content":"    private static boolean isSamplePhoto(String path) {"},{"lineNumber":76,"author":{"gitID":"KeithSOC"},"content":"        return path.equals(SAMPLE_PHOTO);"},{"lineNumber":77,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":79,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"KeithSOC"},"content":"     * Copies the photo from Path {@code from} to Path {@code to}"},{"lineNumber":81,"author":{"gitID":"KeithSOC"},"content":"     * @throws IllegalValueException"},{"lineNumber":82,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"KeithSOC"},"content":"    private static void copyPhotoToDefaultDir(Path from, Path to) throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"KeithSOC"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"KeithSOC"},"content":"            // Create the default data directory to store the display photos if it doesn\u0027t already exist"},{"lineNumber":86,"author":{"gitID":"KeithSOC"},"content":"            Files.createDirectories(Paths.get(DEFAULT_SAVE_DIR));"},{"lineNumber":87,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":88,"author":{"gitID":"KeithSOC"},"content":"            // Copy file to user\u0027s \"data\" directory."},{"lineNumber":89,"author":{"gitID":"KeithSOC"},"content":"            // If the target file exists, then the target file is replaced if it is not a non-empty directory."},{"lineNumber":90,"author":{"gitID":"KeithSOC"},"content":"            Files.copy(from, to, REPLACE_EXISTING);"},{"lineNumber":91,"author":{"gitID":"KeithSOC"},"content":"        } catch (IOException io) {"},{"lineNumber":92,"author":{"gitID":"KeithSOC"},"content":"            logger.info(\"Display photo error: \" + io.toString());"},{"lineNumber":93,"author":{"gitID":"KeithSOC"},"content":"            throw new IllegalValueException(MESSAGE_PHOTO_COPY_ERROR);"},{"lineNumber":94,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":97,"author":{"gitID":"KeithSOC"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"KeithSOC"},"content":"     * Returns the absolute file path for user-specified display photos."},{"lineNumber":99,"author":{"gitID":"KeithSOC"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"KeithSOC"},"content":"    public String getAbsoluteFilePath() {"},{"lineNumber":101,"author":{"gitID":"KeithSOC"},"content":"        if (isSamplePhoto(value)) {"},{"lineNumber":102,"author":{"gitID":"KeithSOC"},"content":"            return value;"},{"lineNumber":103,"author":{"gitID":"KeithSOC"},"content":"        } else {"},{"lineNumber":104,"author":{"gitID":"KeithSOC"},"content":"            return \"file://\" + Paths.get(value).toAbsolutePath().toUri().getPath();"},{"lineNumber":105,"author":{"gitID":"KeithSOC"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":108,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"KeithSOC"},"content":"    public String toString() {"},{"lineNumber":110,"author":{"gitID":"KeithSOC"},"content":"        return value;"},{"lineNumber":111,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":113,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"KeithSOC"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitID":"KeithSOC"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":116,"author":{"gitID":"KeithSOC"},"content":"                || (other instanceof DisplayPhoto // instanceof handles nulls"},{"lineNumber":117,"author":{"gitID":"KeithSOC"},"content":"                \u0026\u0026 this.value.equals(((DisplayPhoto) other).value)); // state check"},{"lineNumber":118,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":120,"author":{"gitID":"KeithSOC"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"KeithSOC"},"content":"    public int hashCode() {"},{"lineNumber":122,"author":{"gitID":"KeithSOC"},"content":"        return value.hashCode();"},{"lineNumber":123,"author":{"gitID":"KeithSOC"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"KeithSOC"},"content":""},{"lineNumber":125,"author":{"gitID":"KeithSOC"},"content":"}"},{"lineNumber":126,"author":{"gitID":"KeithSOC"},"content":"//@@author"}],"authorContributionMap":{"marvinchin":2,"KeithSOC":119,"-":5}}]
