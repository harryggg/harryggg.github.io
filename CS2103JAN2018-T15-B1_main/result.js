var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Sivalavida"},"content":"Retail Analytics was developed by the https://github.com/CS2103JAN2018-T15-B1[T15-B1] team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Siva Subbiah"},{"lineNumber":13,"author":{"gitID":"Sivalavida"},"content":"image::sivalavida.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Sivalavida"},"content":"Role:"},{"lineNumber":16,"author":{"gitID":"Sivalavida"},"content":"Model Developer"},{"lineNumber":17,"author":{"gitID":"Sivalavida"},"content":"Git expert"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Low Jia Jin"},{"lineNumber":22,"author":{"gitID":"Sivalavida"},"content":"image::lowjiajin.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"Role: UI Developer"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Chu Qinghao"},{"lineNumber":29,"author":{"gitID":"Sivalavida"},"content":"image::qinghao1.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"Role: Logic Developer"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d He Yingxu"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"Role: Storage Developer"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"Sivalavida":7,"-":32}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Sivalavida"},"content":"\u003d Retail Analytics"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"Sivalavida"},"content":"* This is a desktop Retail Analytics application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":19,"author":{"gitID":"Sivalavida"},"content":"* It is a Java application intended for retails who carry our hundreds to thousands of item deliveries a month who require customer analytics."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":32,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":33,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":34,"author":{"gitID":"Sivalavida"},"content":"* https://github.com/se-edu/[AddressBook-Level4 project] created by SE-EDU initiative"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"Sivalavida":4,"-":32}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Sivalavida"},"content":"\u003d Retail Analytics - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Sivalavida"},"content":"By: `Team Retailer Analytics`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Sivalavida"},"content":"Retailer Analytics (RA) is for *retailers who handle hundreds to thousands of customers and orders and who are comfortable with using a desktop app to manage their analytics*. More importantly, RA is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, RA can get your customer analytics tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"Sivalavida"},"content":".  Copy the file to the folder you want to use as the home folder for your Retail Analytics."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"Sivalavida"},"content":"* *`list`* : lists all customers"},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 g/M lat/1.2345 lon/5.4321` : adds a customer named `John Doe` to Retail Analytics."},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"* **`delete`**`3` : deletes the 3rd customer shown in the current list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":54,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"Sivalavida"},"content":"Adds a person to Retail Analytics +"},{"lineNumber":66,"author":{"gitID":"Sivalavida"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS g/GENDER lat/LATITUDE lon/LONGTITUDE [t/TAG]...`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":69,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"Sivalavida"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street g/M lat/1.2345 lon/301.1, block 123, #01-01`"},{"lineNumber":74,"author":{"gitID":"Sivalavida"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 g/F lat/1.321 lon/302.5 t/criminal`"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"Sivalavida"},"content":"Shows a list of all persons in Retail Analytics. +"},{"lineNumber":79,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"Sivalavida"},"content":"\u003d\u003d\u003d Visulising locations of all persons in a map: `map`"},{"lineNumber":82,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":83,"author":{"gitID":"Sivalavida"},"content":"Displays spread of all people in Retail Analytics on a map. +"},{"lineNumber":84,"author":{"gitID":"Sivalavida"},"content":"Format: `map`"},{"lineNumber":85,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"Sivalavida"},"content":"Edits an existing person in Retail Analytics. +"},{"lineNumber":89,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"****"},{"lineNumber":92,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":93,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":94,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":95,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":96,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":97,"author":{"gitID":"-"},"content":"****"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":103,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":104,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find`"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":109,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"****"},{"lineNumber":112,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":113,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":114,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":115,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":116,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":117,"author":{"gitID":"-"},"content":"****"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":122,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":123,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":124,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"Sivalavida"},"content":"Deletes the specified person from Retail Analytics. +"},{"lineNumber":129,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"****"},{"lineNumber":132,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":133,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":134,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":135,"author":{"gitID":"-"},"content":"****"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":140,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":141,"author":{"gitID":"Sivalavida"},"content":"Deletes the 2nd person in Retail Analytics."},{"lineNumber":142,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":143,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":144,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":149,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"****"},{"lineNumber":152,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":153,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":154,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":155,"author":{"gitID":"-"},"content":"****"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":160,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":161,"author":{"gitID":"Sivalavida"},"content":"Selects the 2nd person in Retail Analytics."},{"lineNumber":162,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":163,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":164,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":169,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":172,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":173,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":177,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"Sivalavida"},"content":"Restores Retail Analytics to the state before the previous _undoable_ command was executed. +"},{"lineNumber":180,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":183,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":184,"author":{"gitID":"Sivalavida"},"content":"Undoable commands: those commands that modify Retail Analytics\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":185,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":190,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":191,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":194,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":195,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":196,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":199,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":200,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":201,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":206,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":211,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":212,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":215,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":216,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":219,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":220,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":222,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":223,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":224,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"Sivalavida"},"content":"Clears all entries from Retail Analytics. +"},{"lineNumber":229,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":234,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"Sivalavida"},"content":"Retail Analytics data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":239,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":242,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":245,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":250,"author":{"gitID":"Sivalavida"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Retail Analytics folder."},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"Sivalavida"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS g/GENDER lat/LATITUDE lon/LONGTITUDE [t/TAG]...` +"},{"lineNumber":255,"author":{"gitID":"Sivalavida"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 g/M lat/1.2345 lon/301.1 t/friend t/colleague`"},{"lineNumber":256,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":257,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":258,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":259,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":260,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":261,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":262,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":263,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":264,"author":{"gitID":"Sivalavida"},"content":"* *Geographically Visualise Data* : `map`"},{"lineNumber":265,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":266,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":268,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":269,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":270,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"Sivalavida":29,"-":241}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sivalavida"},"content":"import static seedu.address.logic.commands.CommandTestUtil.*;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":40,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":"        Person toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withGender(VALID_GENDER_AMY)"},{"lineNumber":43,"author":{"gitID":"Sivalavida"},"content":"                .withAge(VALID_AGE_AMY).withLatitude(VALID_LATITUDE_AMY).withLongitude(VALID_LONGITUDE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":45,"author":{"gitID":"Sivalavida"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + GENDER_DESC_AMY + \"   \" + AGE_DESC_AMY"},{"lineNumber":46,"author":{"gitID":"Sivalavida"},"content":"                + \"   \" + LATITUDE_DESC_AMY + \"   \" + LONGITUDE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":62,"author":{"gitID":"Sivalavida"},"content":"                .withAddress(VALID_ADDRESS_AMY).withGender(VALID_GENDER_AMY).withAge(VALID_AGE_AMY)"},{"lineNumber":63,"author":{"gitID":"Sivalavida"},"content":"                .withLatitude(VALID_LATITUDE_AMY).withLongitude(VALID_LONGITUDE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":65,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":70,"author":{"gitID":"Sivalavida"},"content":"                .withAddress(VALID_ADDRESS_AMY).withGender(VALID_GENDER_AMY).withAge(VALID_AGE_AMY)"},{"lineNumber":71,"author":{"gitID":"Sivalavida"},"content":"                .withLatitude(VALID_LATITUDE_AMY).withLongitude(VALID_LONGITUDE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":73,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":78,"author":{"gitID":"Sivalavida"},"content":"                .withAddress(VALID_ADDRESS_AMY).withGender(VALID_GENDER_AMY).withAge(VALID_AGE_AMY)"},{"lineNumber":79,"author":{"gitID":"Sivalavida"},"content":"                .withLatitude(VALID_LATITUDE_AMY).withLongitude(VALID_LONGITUDE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":81,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":86,"author":{"gitID":"Sivalavida"},"content":"                .withAddress(VALID_ADDRESS_BOB).withGender(VALID_GENDER_AMY).withAge(VALID_AGE_AMY)"},{"lineNumber":87,"author":{"gitID":"Sivalavida"},"content":"                .withLatitude(VALID_LATITUDE_AMY).withLongitude(VALID_LONGITUDE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"Sivalavida"},"content":"        //@todo: add test where add person with all fields same except gender, lat, age, lon"},{"lineNumber":93,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":99,"author":{"gitID":"Sivalavida"},"content":"        toAdd \u003d  new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":100,"author":{"gitID":"Sivalavida"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withGender(VALID_GENDER_BOB)"},{"lineNumber":101,"author":{"gitID":"Sivalavida"},"content":"                .withAge(VALID_AGE_BOB).withLatitude(VALID_LATITUDE_BOB).withLongitude(VALID_LONGITUDE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":102,"author":{"gitID":"Sivalavida"},"content":"                .build();;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":104,"author":{"gitID":"Sivalavida"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB"},{"lineNumber":105,"author":{"gitID":"Sivalavida"},"content":"                + LONGITUDE_DESC_BOB;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":137,"author":{"gitID":"Sivalavida"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + GENDER_DESC_AMY"},{"lineNumber":138,"author":{"gitID":"Sivalavida"},"content":"                + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":142,"author":{"gitID":"Sivalavida"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + GENDER_DESC_AMY"},{"lineNumber":143,"author":{"gitID":"Sivalavida"},"content":"                + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":147,"author":{"gitID":"Sivalavida"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + GENDER_DESC_AMY"},{"lineNumber":148,"author":{"gitID":"Sivalavida"},"content":"                + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":152,"author":{"gitID":"Sivalavida"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + GENDER_DESC_AMY"},{"lineNumber":153,"author":{"gitID":"Sivalavida"},"content":"                + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"Sivalavida"},"content":"        /* Case: missing gender -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":158,"author":{"gitID":"Sivalavida"},"content":"                + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"Sivalavida"},"content":"        //@todo: add missing age, lat, lon tests"},{"lineNumber":162,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"Sivalavida"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":169,"author":{"gitID":"Sivalavida"},"content":"                    + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"Sivalavida"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":174,"author":{"gitID":"Sivalavida"},"content":"                    + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"Sivalavida"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":179,"author":{"gitID":"Sivalavida"},"content":"                    + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":183,"author":{"gitID":"Sivalavida"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":184,"author":{"gitID":"Sivalavida"},"content":"                    + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"Sivalavida"},"content":"        /* Case: invalid gender -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"Sivalavida"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":189,"author":{"gitID":"Sivalavida"},"content":"                + INVALID_GENDER_DESC + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"Sivalavida"},"content":"        //@todo: add invalid age, lat, lon tests"},{"lineNumber":193,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":196,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":52,"-":219}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Sivalavida"},"content":"\u003d Retail Analytics - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Sivalavida"},"content":"By: `Team Retailer Analytics`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":246,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"----"},{"lineNumber":248,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"----"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":257,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"----"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":296,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":326,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":348,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":359,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":373,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":374,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":379,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":380,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":381,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"Sivalavida"},"content":"\u003d\u003d\u003d Geographical Visualisation (`map` command)"},{"lineNumber":384,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":385,"author":{"gitID":"Sivalavida"},"content":"\u003d\u003d\u003d\u003dHow the feature is implemented"},{"lineNumber":386,"author":{"gitID":"Sivalavida"},"content":"We are using https://developers.google.com/maps/[Google Maps API] to implement this feature. The map command has"},{"lineNumber":387,"author":{"gitID":"Sivalavida"},"content":"parameters which will describe a querry (yet to be implemented), which will render a google map image with"},{"lineNumber":388,"author":{"gitID":"Sivalavida"},"content":"the locations of the filtered customers in the map."},{"lineNumber":389,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":390,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":391,"author":{"gitID":"Sivalavida"},"content":"\u003d\u003d\u003d\u003dAlternatives considered"},{"lineNumber":392,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":393,"author":{"gitID":"Sivalavida"},"content":"Initially we wanted to use a static image of Singapore and create edit the map based on the locations of the customers"},{"lineNumber":394,"author":{"gitID":"Sivalavida"},"content":"on the fly. However, we realised that the user might want a zoomable interface, if he needed the spread of customers"},{"lineNumber":395,"author":{"gitID":"Sivalavida"},"content":" viewed at a certain zoom level. Furthermore, this would restrit the use of our product only to retailer who are"},{"lineNumber":396,"author":{"gitID":"Sivalavida"},"content":" delevering around Singapore. Using the Google Maps API would enable our users to operate at any country and also have"},{"lineNumber":397,"author":{"gitID":"Sivalavida"},"content":" customers around the world."},{"lineNumber":398,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":399,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":400,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":402,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"[[Implementation-Recommender]]"},{"lineNumber":407,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Recommender"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Recommender Training Pipeline"},{"lineNumber":410,"author":{"gitID":"-"},"content":"Obtaining recommendations for products that a given customer is likely to want to buy can actually be thought of as a classification problem. The `Order` records serves as the test dataset, the instance variables of each Order\u0027s `Customer` serve as the features, and the associated `Product` is the class label."},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":"Weka, an open source machine learning library containing filtering, feature selection, and classifier methods, as well as implementations of common data models, such as attributes, instances, etc. was used. The training pipeline is as follows:"},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":". Convert the `Order` records into a `.arff` file, the default format used by Weka, using the `ConvertToArff` class."},{"lineNumber":415,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":416,"author":{"gitID":"-"},"content":"The `.arff` must not only list the orders for every item, but also the \"non-orders\" from customers that have not bought that product. These are labelled as `\"n\" + productId`.  Since the `.arff` only stores the classification features ([v1.2]: age, gender), which may be non-unique, it is not possible to trace which customers have yet to buy a product after we stop referring to the `Order` records. Thus, the \"non-orders\" have to be populated at the same time as the reformatting of the actual orders to the `.arff`."},{"lineNumber":417,"author":{"gitID":"-"},"content":". For each product, use `RemoveWithValues` to create an `isolator` that can filter out the orders involving that specific product in the `.arff`. This turns a multiclass classification to a binary decision (i.e. Will a given customer buy that specific product?)."},{"lineNumber":418,"author":{"gitID":"-"},"content":". Pass the `isolator` into a `ProductTrainer`, which will use `ChiSquaredAttributeEval` to select the features most strongly associated with a purchase decision (i.e. an order exists for a given customer profile), and then build a `NaiveBayes` classifier around those features, for that specific product."},{"lineNumber":419,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":420,"author":{"gitID":"-"},"content":"The `ChiSquaredAttributeEval` only uses the 2 most discriminatory features to build the classifier, even with additional features to be added in future revisions. This combats the Curse of Dimensionality, given the possibly modest number of orders that a small business might have."},{"lineNumber":421,"author":{"gitID":"-"},"content":". Save each successful `NaiveBayes` build to a `HashMap` keyed by the product ID, for later use on the test set (i.e. the customer whom we want to get likely purchase recommendations for)."},{"lineNumber":422,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":423,"author":{"gitID":"-"},"content":"[From v1.3] The classifiers would be saved to the hard disk, so that we do not have to re-initialize a `Recommender` every time the AddressBook is opened, since classifier building is computationally expensive."},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Recommender Testing Pipeline"},{"lineNumber":426,"author":{"gitID":"-"},"content":". Assign `classifierDict` in `Recommender` using one of the following means:"},{"lineNumber":427,"author":{"gitID":"-"},"content":".. Run the training pipeline in 3.5.1."},{"lineNumber":428,"author":{"gitID":"-"},"content":".. [From v1.3] The `Recommender` constructor will be overloaded to support a `classifierDict` attribute. We can use the `ReadClassifierDict` class in `Storage` to read the saved file to a `classifierDict`."},{"lineNumber":429,"author":{"gitID":"-"},"content":". Call `getRecommendations(customerId)`, which will result in getting the appropriate features from said `Customer`, and then running the features as an `Instance` through every classifier in `classifierDict`. The confidence of each purchase decision is returned via `distributionForInstance` as a percentage. These percentages are ranked, and a list of product recommendations in sorted order, with the `Product` predicted to be most attractive to said `Customer` listed first, is assigned to `ProductRecOfAPerson`."},{"lineNumber":430,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":431,"author":{"gitID":"-"},"content":"[From v1.3] A RecommendCommand Class will be added to facilitate the calling of `getRecommendations` through the CLI."},{"lineNumber":432,"author":{"gitID":"-"},"content":". All `Product` objects which a given `Customer` has already bought will be stripped from his `ProductRecOfAPerson`. The remaining list will be sent to `ui` for output."},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":437,"author":{"gitID":"-"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":439,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":444,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":457,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":458,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":459,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":460,"author":{"gitID":"-"},"content":""},{"lineNumber":461,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":462,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":465,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":466,"author":{"gitID":"-"},"content":""},{"lineNumber":467,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":468,"author":{"gitID":"-"},"content":""},{"lineNumber":469,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":472,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":477,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":478,"author":{"gitID":"-"},"content":""},{"lineNumber":479,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":484,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":497,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":498,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":499,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":500,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":501,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":502,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":503,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":504,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":505,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":""},{"lineNumber":508,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":509,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":510,"author":{"gitID":"-"},"content":""},{"lineNumber":511,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":512,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":515,"author":{"gitID":"-"},"content":""},{"lineNumber":516,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":529,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":534,"author":{"gitID":"-"},"content":""},{"lineNumber":535,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":536,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":537,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":538,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":543,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":544,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":547,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":548,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":557,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":562,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":567,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":570,"author":{"gitID":"-"},"content":"+"},{"lineNumber":571,"author":{"gitID":"-"},"content":"****"},{"lineNumber":572,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":573,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":574,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":575,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":576,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":577,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":578,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":579,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":580,"author":{"gitID":"-"},"content":"****"},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":583,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":588,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":591,"author":{"gitID":"-"},"content":"+"},{"lineNumber":592,"author":{"gitID":"-"},"content":"****"},{"lineNumber":593,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":594,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":595,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":596,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":597,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":598,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":599,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":600,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":601,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":602,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":603,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":604,"author":{"gitID":"-"},"content":"****"},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":607,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":608,"author":{"gitID":"-"},"content":""},{"lineNumber":609,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":610,"author":{"gitID":"-"},"content":""},{"lineNumber":611,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":612,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":615,"author":{"gitID":"-"},"content":"+"},{"lineNumber":616,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":617,"author":{"gitID":"-"},"content":"+"},{"lineNumber":618,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":619,"author":{"gitID":"-"},"content":"+"},{"lineNumber":620,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":621,"author":{"gitID":"-"},"content":"+"},{"lineNumber":622,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":623,"author":{"gitID":"-"},"content":"+"},{"lineNumber":624,"author":{"gitID":"-"},"content":"****"},{"lineNumber":625,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":626,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":627,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":628,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":629,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":630,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":631,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":632,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":633,"author":{"gitID":"-"},"content":"****"},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":636,"author":{"gitID":"-"},"content":"+"},{"lineNumber":637,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":638,"author":{"gitID":"-"},"content":"+"},{"lineNumber":639,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":640,"author":{"gitID":"-"},"content":"+"},{"lineNumber":641,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":642,"author":{"gitID":"-"},"content":"+"},{"lineNumber":643,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":644,"author":{"gitID":"-"},"content":"+"},{"lineNumber":645,"author":{"gitID":"-"},"content":"****"},{"lineNumber":646,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":647,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":648,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":649,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":650,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":651,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":652,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":653,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":654,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":655,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":656,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":657,"author":{"gitID":"-"},"content":"****"},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":660,"author":{"gitID":"-"},"content":"+"},{"lineNumber":661,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":662,"author":{"gitID":"-"},"content":"+"},{"lineNumber":663,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":664,"author":{"gitID":"-"},"content":"+"},{"lineNumber":665,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":666,"author":{"gitID":"-"},"content":"+"},{"lineNumber":667,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":668,"author":{"gitID":"-"},"content":"+"},{"lineNumber":669,"author":{"gitID":"-"},"content":"****"},{"lineNumber":670,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":671,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":672,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":673,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":674,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":675,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":676,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":677,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":678,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":679,"author":{"gitID":"-"},"content":"****"},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":682,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":687,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":688,"author":{"gitID":"-"},"content":""},{"lineNumber":689,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":690,"author":{"gitID":"-"},"content":"+"},{"lineNumber":691,"author":{"gitID":"-"},"content":"****"},{"lineNumber":692,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":693,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":694,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":695,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":696,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":697,"author":{"gitID":"-"},"content":"****"},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":700,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":701,"author":{"gitID":"-"},"content":""},{"lineNumber":702,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":703,"author":{"gitID":"-"},"content":""},{"lineNumber":704,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":707,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":708,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":713,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":714,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":715,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":716,"author":{"gitID":"-"},"content":""},{"lineNumber":717,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":718,"author":{"gitID":"-"},"content":""},{"lineNumber":719,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":720,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":725,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":726,"author":{"gitID":"-"},"content":""},{"lineNumber":727,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":730,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":733,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":738,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":739,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":742,"author":{"gitID":"-"},"content":""},{"lineNumber":743,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":744,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":745,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":746,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":749,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":750,"author":{"gitID":"-"},"content":""},{"lineNumber":751,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":754,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":755,"author":{"gitID":"-"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":757,"author":{"gitID":"-"},"content":""},{"lineNumber":758,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":761,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":762,"author":{"gitID":"-"},"content":""},{"lineNumber":763,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":766,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":773,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":774,"author":{"gitID":"-"},"content":""},{"lineNumber":775,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":778,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":779,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":780,"author":{"gitID":"-"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":782,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":785,"author":{"gitID":"-"},"content":""},{"lineNumber":786,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":793,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":794,"author":{"gitID":"-"},"content":""},{"lineNumber":795,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":798,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":799,"author":{"gitID":"-"},"content":""},{"lineNumber":800,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":801,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":802,"author":{"gitID":"-"},"content":""},{"lineNumber":803,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":812,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":815,"author":{"gitID":"-"},"content":""},{"lineNumber":816,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":819,"author":{"gitID":"-"},"content":""},{"lineNumber":820,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":823,"author":{"gitID":"-"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":827,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":828,"author":{"gitID":"-"},"content":""},{"lineNumber":829,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"* small/medium e-retailer handling hundreds to thousands of customers and orders"},{"lineNumber":832,"author":{"gitID":"-"},"content":"* primarily does deliveries of a select inventory to customer addresses"},{"lineNumber":833,"author":{"gitID":"-"},"content":"* desires analytics to aid in business management and marketing"},{"lineNumber":834,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":835,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":836,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":837,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":"*Value proposition*: allows for statistic retrieval, trend analysis, and visualization of customers, products, and orders with an efficient text based input"},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":"*Feature Contribution*"},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Feature Contribution"},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":"*Qinghao*:"},{"lineNumber":846,"author":{"gitID":"-"},"content":""},{"lineNumber":847,"author":{"gitID":"-"},"content":"* *Major*: Add individual customer/product stats, like customer ranking by spending, product ranking by sales etc. This is a key feature of the project that provides retail analytics for the user."},{"lineNumber":848,"author":{"gitID":"-"},"content":"* *Major*: Add order class, to keep track of a customer\u0027s order(s) and the products in the order."},{"lineNumber":849,"author":{"gitID":"-"},"content":""},{"lineNumber":850,"author":{"gitID":"-"},"content":"*Yingxu*:"},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":"* *Major*: Add product class, to keep track of a single product type"},{"lineNumber":853,"author":{"gitID":"-"},"content":"* *Minor*: Money class to keep track of price etc. because it cannot be stored in a Double due to precision issues"},{"lineNumber":854,"author":{"gitID":"-"},"content":""},{"lineNumber":855,"author":{"gitID":"-"},"content":"*Jia Jin*:"},{"lineNumber":856,"author":{"gitID":"-"},"content":""},{"lineNumber":857,"author":{"gitID":"-"},"content":"* *Major*: Recommendations engine for customer, so that the user can provide these personalized recommendations to customers."},{"lineNumber":858,"author":{"gitID":"-"},"content":"* *Minor*: Basic filtered getter utilities for Product, Customer, Order classes"},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":"*Siva*:"},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"Sivalavida"},"content":"* *Major*: Geographic visualization of customer locations, for the user to have a idea of where their customers are located so to better optimize their logistics"},{"lineNumber":863,"author":{"gitID":"-"},"content":"* *Minor*: Add customer-specific variables to existing address book code."},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":866,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":867,"author":{"gitID":"-"},"content":""},{"lineNumber":868,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":869,"author":{"gitID":"-"},"content":""},{"lineNumber":870,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":871,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":872,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":873,"author":{"gitID":"-"},"content":"|`* * *` |user |add a product by specifying its name, price, and category only |track its sales going forward"},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":"|`* * *` |user who is adding a new product |create new product categories on-the-fly |manage pivots in inventory composition"},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"|`* * *` |user |add a customer by specifying their email, name, and address only, with age and gender optional |keep track of each individual’s orders going forward"},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":"|`* * *` |user |add an order by specifying the date, the buyer, and a list of products bought | avoid repetitively creating multiple orders with the same date and buyer"},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"|`* * *` |user with many new customers, products, and orders |import customers, products, and orders via XML files instead of adding them one-by-one |bulk load the database without wasting time"},{"lineNumber":882,"author":{"gitID":"-"},"content":""},{"lineNumber":883,"author":{"gitID":"-"},"content":"|`* *` |user importing the aforementioned XML |a description of the specific entry and the violation to be highlighted if any entry violates the relevant relation |avoid manually hunting through a possibly huge XML to locate the import error"},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"|`* *` |user |search for customers via their names or emails |view the profile of each customer and their purchase history"},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":"|`* *` |user who is searching for customers |have the search gives a ranked list of customers with most similar names/emails via fuzzy string matching |still locate customers without precisely remembering their name/email when I have many customers"},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"|`* *` |user |also search for products in similar fashion as customers by typing their name or category |view the profile of each product and its sales history"},{"lineNumber":890,"author":{"gitID":"-"},"content":""},{"lineNumber":891,"author":{"gitID":"-"},"content":"|`* *` |user currently on a product’s profile |update that product’s price |reproduce discounts or price raises in this application"},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"|`* *` |user |obtain a ranked list of customers by total or recent spending |reach out and reward loyal customers accordingly"},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"|`* *` |user |obtain separate list of active/inactive users |make distinct decisions that focus on maximizing active ones or recapturing inactive ones"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"|`* *` |user |obtain a ranked list of products by total or recent sales |request appropriate inventory"},{"lineNumber":898,"author":{"gitID":"-"},"content":""},{"lineNumber":899,"author":{"gitID":"-"},"content":"|`* *` |user |obtain the aforementioned total and recent sales across entire product categories too |know which categories to pivot my retail business toward"},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"|`* *` |user |search for customers via their names or emails |view the profile of each customer and their purchase history"},{"lineNumber":902,"author":{"gitID":"-"},"content":""},{"lineNumber":903,"author":{"gitID":"-"},"content":"|`* *` |user |graph the aforementioned product and category sales across time |identify changes in product performance to decide on product strategy"},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"|`* *` |user |graph the numbers and proportions of active/inactive users across time |identify changes in user retention"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"|`*` |user |graph the average monthly/yearly sales value of active users across time |use willingness to spend as a proxy of user trust and engagement, and make informed changes to marketing strategy to hit the desired ARPU"},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"-"},"content":"|`* *` |user |graph the total revenue across time |visually grasp if my business as a whole has been growing"},{"lineNumber":910,"author":{"gitID":"-"},"content":""},{"lineNumber":911,"author":{"gitID":"-"},"content":"|`* *` |user viewing the aforementioned graphs |data points and relevant summary statistics can be exported to an XML for download |perform further analysis in another software (e.g. Tableau, MS Excel, etc.)"},{"lineNumber":912,"author":{"gitID":"-"},"content":""},{"lineNumber":913,"author":{"gitID":"-"},"content":"|`* * *` |user |use the recommendations engine identify which users still haven’t bought, but are likely to want to buy a given product |perform targeted marketing (e.g. email blasts with specific products)"},{"lineNumber":914,"author":{"gitID":"-"},"content":""},{"lineNumber":915,"author":{"gitID":"-"},"content":"|`* *` |user |re-train the recommendations engine\u0027s classifier on the latest data whenever desired |ensure its relevance as new products and orders come in"},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":"|`* * *` |user |display customers as an overlay on a map |understand how customers are geographically distributed, which have many possible gains (e.g. determine placement of physical marketing collateral such as flyers and banners)"},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":"|`* * *` |user using the map overlay |filter the users by total and recent expenditure |visually grasp the geographical distribution of my most/least valuable customers to understand market penetration and inform customer personas"},{"lineNumber":920,"author":{"gitID":"-"},"content":""},{"lineNumber":921,"author":{"gitID":"-"},"content":"|`* *` |user using the map overlay |filter the users by products or product categories ordered |the penetration of specific products to personas that might be more prevalent in given locales"},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":924,"author":{"gitID":"-"},"content":""},{"lineNumber":925,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":926,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"Sivalavida"},"content":"(For all use cases below, the *System* is the `RetailAnalytics` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":929,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":930,"author":{"gitID":"Sivalavida"},"content":"[discrete]"},{"lineNumber":931,"author":{"gitID":"Sivalavida"},"content":"\u003d\u003d\u003d Use case: UC1 - Add customer"},{"lineNumber":932,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":933,"author":{"gitID":"Sivalavida"},"content":"*MSS*"},{"lineNumber":934,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":935,"author":{"gitID":"Sivalavida"},"content":"1.  User requests to add customer (with atributes: email, name, age, gender, address)"},{"lineNumber":936,"author":{"gitID":"Sivalavida"},"content":"2.  RetailAnalytics adds customer and shows success message"},{"lineNumber":937,"author":{"gitID":"-"},"content":"+"},{"lineNumber":938,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"Sivalavida"},"content":"* 1a. The formatting of the statement is invalid."},{"lineNumber":943,"author":{"gitID":"Sivalavida"},"content":"+"},{"lineNumber":944,"author":{"gitID":"Sivalavida"},"content":"[none]"},{"lineNumber":945,"author":{"gitID":"Sivalavida"},"content":"** 1a1. RetailAnalytics shows an error message."},{"lineNumber":946,"author":{"gitID":"Sivalavida"},"content":"+"},{"lineNumber":947,"author":{"gitID":"Sivalavida"},"content":"Use case ends."},{"lineNumber":948,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":949,"author":{"gitID":"Sivalavida"},"content":"[discrete]"},{"lineNumber":950,"author":{"gitID":"Sivalavida"},"content":"\u003d\u003d\u003d Use case: UC2 - Add Order"},{"lineNumber":951,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":952,"author":{"gitID":"Sivalavida"},"content":"*MSS*"},{"lineNumber":953,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":954,"author":{"gitID":"Sivalavida"},"content":"1.  User requests to add order (with atributes: date, customer email, product name)"},{"lineNumber":955,"author":{"gitID":"Sivalavida"},"content":"2.  RetailAnalytics adds order and shows success message"},{"lineNumber":956,"author":{"gitID":"-"},"content":"+"},{"lineNumber":957,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":958,"author":{"gitID":"-"},"content":""},{"lineNumber":959,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":960,"author":{"gitID":"-"},"content":""},{"lineNumber":961,"author":{"gitID":"Sivalavida"},"content":"* 1a. The formatting of the statement is invalid."},{"lineNumber":962,"author":{"gitID":"Sivalavida"},"content":"+"},{"lineNumber":963,"author":{"gitID":"Sivalavida"},"content":"[none]"},{"lineNumber":964,"author":{"gitID":"Sivalavida"},"content":"** 1a1. RetailAnalytics shows an error message."},{"lineNumber":965,"author":{"gitID":"Sivalavida"},"content":"+"},{"lineNumber":966,"author":{"gitID":"Sivalavida"},"content":"Use case ends."},{"lineNumber":967,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":968,"author":{"gitID":"Sivalavida"},"content":"[discrete]"},{"lineNumber":969,"author":{"gitID":"Sivalavida"},"content":"\u003d\u003d\u003d Use case: UC3 - Add Product"},{"lineNumber":970,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":971,"author":{"gitID":"Sivalavida"},"content":"*MSS*"},{"lineNumber":972,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":973,"author":{"gitID":"Sivalavida"},"content":"1.  User requests to add product (with atributes: name, price, category)"},{"lineNumber":974,"author":{"gitID":"Sivalavida"},"content":"2.  RetailAnalytics adds product and shows success message"},{"lineNumber":975,"author":{"gitID":"-"},"content":"+"},{"lineNumber":976,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":979,"author":{"gitID":"-"},"content":""},{"lineNumber":980,"author":{"gitID":"Sivalavida"},"content":"* 1a. The formatting of the statement is invalid."},{"lineNumber":981,"author":{"gitID":"Sivalavida"},"content":"+"},{"lineNumber":982,"author":{"gitID":"Sivalavida"},"content":"[none]"},{"lineNumber":983,"author":{"gitID":"Sivalavida"},"content":"** 1a1. RetailAnalytics shows an error message."},{"lineNumber":984,"author":{"gitID":"Sivalavida"},"content":"+"},{"lineNumber":985,"author":{"gitID":"Sivalavida"},"content":"Use case ends."},{"lineNumber":986,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":987,"author":{"gitID":"Sivalavida"},"content":"[discrete]"},{"lineNumber":988,"author":{"gitID":"Sivalavida"},"content":"\u003d\u003d\u003d Use case: UC4 - Delete customer"},{"lineNumber":989,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":990,"author":{"gitID":"Sivalavida"},"content":"*MSS*"},{"lineNumber":991,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":992,"author":{"gitID":"Sivalavida"},"content":"1.  User requests to list customers"},{"lineNumber":993,"author":{"gitID":"Sivalavida"},"content":"2.  RetailAnalytics shows a list of customers"},{"lineNumber":994,"author":{"gitID":"Sivalavida"},"content":"3.  User requests to delete a specific customer in the list"},{"lineNumber":995,"author":{"gitID":"Sivalavida"},"content":"4.  RetailAnalytics deletes the customer and all transactions associated with him"},{"lineNumber":996,"author":{"gitID":"-"},"content":"+"},{"lineNumber":997,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1002,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1003,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1004,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1007,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1008,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1009,"author":{"gitID":"Sivalavida"},"content":"** 3a1. RetailAnalytics shows an error message."},{"lineNumber":1010,"author":{"gitID":"Sivalavida"},"content":"+"},{"lineNumber":1011,"author":{"gitID":"Sivalavida"},"content":"Use case resumes at step 2."},{"lineNumber":1012,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":1013,"author":{"gitID":"Sivalavida"},"content":"[discrete]"},{"lineNumber":1014,"author":{"gitID":"Sivalavida"},"content":"\u003d\u003d\u003d Use case: UC5 - Request Analytics (Customer ranking or Product Ranking)"},{"lineNumber":1015,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":1016,"author":{"gitID":"Sivalavida"},"content":"*MSS*"},{"lineNumber":1017,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":1018,"author":{"gitID":"Sivalavida"},"content":"1.  User requests a specific type of analytics"},{"lineNumber":1019,"author":{"gitID":"Sivalavida"},"content":"2.  RetailAnalytics shows a list of Customers or Products"},{"lineNumber":1020,"author":{"gitID":"Sivalavida"},"content":"+"},{"lineNumber":1021,"author":{"gitID":"Sivalavida"},"content":"Use case ends."},{"lineNumber":1022,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":1023,"author":{"gitID":"Sivalavida"},"content":"[discrete]"},{"lineNumber":1024,"author":{"gitID":"Sivalavida"},"content":"\u003d\u003d\u003d Use case: UC6 - Request Geographic Visualisation of Analytics (Customer ranking or Product Ranking)"},{"lineNumber":1025,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":1026,"author":{"gitID":"Sivalavida"},"content":"*MSS*"},{"lineNumber":1027,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":1028,"author":{"gitID":"Sivalavida"},"content":"1.  User requests to geographic visualisation of analytics"},{"lineNumber":1029,"author":{"gitID":"Sivalavida"},"content":"2.  RetailAnalytics shows list of Customers and a map showing the spread of customers"},{"lineNumber":1030,"author":{"gitID":"Sivalavida"},"content":"+"},{"lineNumber":1031,"author":{"gitID":"Sivalavida"},"content":"Use case ends."},{"lineNumber":1032,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":1033,"author":{"gitID":"Sivalavida"},"content":"[discrete]"},{"lineNumber":1034,"author":{"gitID":"Sivalavida"},"content":"\u003d\u003d\u003d Use case: UC7 -  Search for person"},{"lineNumber":1035,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":1036,"author":{"gitID":"Sivalavida"},"content":"*MSS*"},{"lineNumber":1037,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":1038,"author":{"gitID":"Sivalavida"},"content":"1.  User searches for person based on name or email"},{"lineNumber":1039,"author":{"gitID":"Sivalavida"},"content":"2.  RetailAnalytics shows a list of customers with that name or email ( fuzzy-search)"},{"lineNumber":1040,"author":{"gitID":"Sivalavida"},"content":"+"},{"lineNumber":1041,"author":{"gitID":"Sivalavida"},"content":"Use case ends."},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1044,"author":{"gitID":"Sivalavida"},"content":"\u003d\u003d\u003d Use case: UC8 - Delete person"},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1049,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1050,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1051,"author":{"gitID":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":1052,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1053,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1056,"author":{"gitID":"-"},"content":""},{"lineNumber":1057,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1058,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1059,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1060,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1061,"author":{"gitID":"-"},"content":""},{"lineNumber":1062,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1063,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1064,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1065,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1066,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1067,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1068,"author":{"gitID":"-"},"content":""},{"lineNumber":1069,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1070,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1073,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 entires in the relational tables without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1074,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1075,"author":{"gitID":"-"},"content":".  Should be able to handle invalid input (highlight error and give correct instructions)."},{"lineNumber":1076,"author":{"gitID":"-"},"content":".  should work on both 32-bit and 64-bit environment"},{"lineNumber":1077,"author":{"gitID":"-"},"content":".  Should be able to show the analytical results within two seconds."},{"lineNumber":1078,"author":{"gitID":"-"},"content":".  Should be user-firendly for non-programmers."},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1081,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":"[[relational-database]] Relational Database::"},{"lineNumber":1084,"author":{"gitID":"-"},"content":"A database that organizes data into tables where rows representing instances  "},{"lineNumber":1085,"author":{"gitID":"-"},"content":"and columns representing values attributed to that instance. "},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"-"},"content":"[[hot-keys]] Hot Keys::"},{"lineNumber":1088,"author":{"gitID":"-"},"content":"A combination of keys which provides a shortcut to perform certain tasks."},{"lineNumber":1089,"author":{"gitID":"-"},"content":""},{"lineNumber":1090,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1091,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1094,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1097,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1098,"author":{"gitID":"-"},"content":""},{"lineNumber":1099,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1100,"author":{"gitID":"-"},"content":""},{"lineNumber":1101,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1106,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1107,"author":{"gitID":"-"},"content":""},{"lineNumber":1108,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1109,"author":{"gitID":"-"},"content":""},{"lineNumber":1110,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1111,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1112,"author":{"gitID":"-"},"content":""},{"lineNumber":1113,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1114,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1117,"author":{"gitID":"-"},"content":""},{"lineNumber":1118,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1119,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1124,"author":{"gitID":"-"},"content":""},{"lineNumber":1125,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1126,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1127,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1128,"author":{"gitID":"-"},"content":""},{"lineNumber":1129,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1130,"author":{"gitID":"-"},"content":""},{"lineNumber":1131,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1132,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1133,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1134,"author":{"gitID":"-"},"content":""},{"lineNumber":1135,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1138,"author":{"gitID":"-"},"content":""},{"lineNumber":1139,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1142,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1143,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1144,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1146,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1147,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1150,"author":{"gitID":"-"},"content":""},{"lineNumber":1151,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1156,"author":{"gitID":"-"},"content":""},{"lineNumber":1157,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"Sivalavida":108,"-":1049}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":27,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(expectedCard.getGender(), actualCard.getGender());"},{"lineNumber":28,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(expectedCard.getAge(), actualCard.getAge());"},{"lineNumber":29,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(expectedCard.getLatitude(), actualCard.getLatitude());"},{"lineNumber":30,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(expectedCard.getLongitude(), actualCard.getLongitude());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(expectedPerson.getGender().value, actualCard.getGender());"},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(expectedPerson.getAge().value, actualCard.getAge());"},{"lineNumber":43,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(expectedPerson.getLatitude().value, actualCard.getLatitude());"},{"lineNumber":44,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(expectedPerson.getLongitude().value, actualCard.getLongitude());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":8,"-":73}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"    private static final String VALID_GENDER \u003d \"M\";"},{"lineNumber":43,"author":{"gitID":"Sivalavida"},"content":"    private static final String VALID_AGE \u003d \"23\";"},{"lineNumber":44,"author":{"gitID":"Sivalavida"},"content":"    private static final String VALID_LATITUDE \u003d \"1.352222\";"},{"lineNumber":45,"author":{"gitID":"Sivalavida"},"content":"    private static final String VALID_LONGITUDE \u003d \"103.981970\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":85,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":87,"author":{"gitID":"Sivalavida"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"},{"lineNumber":88,"author":{"gitID":"Sivalavida"},"content":"                , VALID_LONGITUDE, VALID_TAGS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":95,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":97,"author":{"gitID":"Sivalavida"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,VALID_AGE, VALID_LATITUDE"},{"lineNumber":98,"author":{"gitID":"Sivalavida"},"content":"                , VALID_LONGITUDE, VALID_TAGS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":105,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":107,"author":{"gitID":"Sivalavida"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,VALID_AGE, VALID_LATITUDE"},{"lineNumber":108,"author":{"gitID":"Sivalavida"},"content":"                , VALID_LONGITUDE, VALID_TAGS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":10,"-":143}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Sivalavida"},"content":"import static seedu.address.logic.commands.CommandTestUtil.*;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"Sivalavida"},"content":"import seedu.address.model.person.*;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":37,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB"},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"                + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":45,"author":{"gitID":"Sivalavida"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":57,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":90,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":91,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":192,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":196,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":200,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":5,"-":255}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":60,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":69,"author":{"gitID":"Sivalavida"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditablePersonDetails(person));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":83,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":115,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":1,"-":143}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sivalavida"},"content":"import static seedu.address.logic.commands.CommandTestUtil.*;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"Sivalavida"},"content":"import seedu.address.model.person.*;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":22,"author":{"gitID":"Sivalavida"},"content":"                .withGender(VALID_GENDER_BOB).withAge(VALID_AGE_BOB).withLatitude(VALID_LATITUDE_BOB)"},{"lineNumber":23,"author":{"gitID":"Sivalavida"},"content":"                .withLongitude(VALID_LONGITUDE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":27,"author":{"gitID":"Sivalavida"},"content":"                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB"},{"lineNumber":28,"author":{"gitID":"Sivalavida"},"content":"                + LONGITUDE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":32,"author":{"gitID":"Sivalavida"},"content":"                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB"},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":"                + LONGITUDE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":37,"author":{"gitID":"Sivalavida"},"content":"                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB"},{"lineNumber":38,"author":{"gitID":"Sivalavida"},"content":"                + LONGITUDE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB"},{"lineNumber":43,"author":{"gitID":"Sivalavida"},"content":"                + LONGITUDE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":47,"author":{"gitID":"Sivalavida"},"content":"                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB"},{"lineNumber":48,"author":{"gitID":"Sivalavida"},"content":"                + LONGITUDE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":49,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":50,"author":{"gitID":"Sivalavida"},"content":"        // multiple genders - last gender accepted"},{"lineNumber":51,"author":{"gitID":"Sivalavida"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":52,"author":{"gitID":"Sivalavida"},"content":"                + ADDRESS_DESC_BOB + GENDER_DESC_AMY + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB"},{"lineNumber":53,"author":{"gitID":"Sivalavida"},"content":"                + LONGITUDE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":54,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":55,"author":{"gitID":"Sivalavida"},"content":"        //@todo: add test for multiple age,lat,lon"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":59,"author":{"gitID":"Sivalavida"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withGender(VALID_GENDER_BOB)"},{"lineNumber":60,"author":{"gitID":"Sivalavida"},"content":"                .withAge(VALID_AGE_BOB).withLatitude(VALID_LATITUDE_BOB).withLongitude(VALID_LONGITUDE_BOB)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":63,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":70,"author":{"gitID":"Sivalavida"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":71,"author":{"gitID":"Sivalavida"},"content":"                .withGender(VALID_GENDER_AMY).withAge(VALID_AGE_AMY).withLatitude(VALID_LATITUDE_AMY)"},{"lineNumber":72,"author":{"gitID":"Sivalavida"},"content":"                .withLongitude(VALID_LONGITUDE_AMY).withTags().build();"},{"lineNumber":73,"author":{"gitID":"Sivalavida"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":74,"author":{"gitID":"Sivalavida"},"content":"                        + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY,"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":83,"author":{"gitID":"Sivalavida"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":88,"author":{"gitID":"Sivalavida"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":93,"author":{"gitID":"Sivalavida"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":94,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB,"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":98,"author":{"gitID":"Sivalavida"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":99,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"Sivalavida"},"content":"        //@todo: add gender, age, lat, lon missing prefix test"},{"lineNumber":103,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":105,"author":{"gitID":"Sivalavida"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"},{"lineNumber":106,"author":{"gitID":"Sivalavida"},"content":"                + VALID_GENDER_BOB + VALID_AGE_BOB + VALID_LATITUDE_BOB + VALID_LONGITUDE_BOB,"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":114,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB"},{"lineNumber":115,"author":{"gitID":"Sivalavida"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":119,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB"},{"lineNumber":120,"author":{"gitID":"Sivalavida"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":124,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB"},{"lineNumber":125,"author":{"gitID":"Sivalavida"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":129,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB"},{"lineNumber":130,"author":{"gitID":"Sivalavida"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":132,"author":{"gitID":"Sivalavida"},"content":"        // invalid gender"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":134,"author":{"gitID":"Sivalavida"},"content":"                + INVALID_GENDER_DESC + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"Sivalavida"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Gender.MESSAGE_GENDER_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":137,"author":{"gitID":"Sivalavida"},"content":"        //@todo: add invalid age, lat, lon test"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":141,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB"},{"lineNumber":142,"author":{"gitID":"Sivalavida"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":145,"author":{"gitID":"Sivalavida"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":146,"author":{"gitID":"Sivalavida"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB ,"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":151,"author":{"gitID":"Sivalavida"},"content":"                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB"},{"lineNumber":152,"author":{"gitID":"Sivalavida"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":61,"-":94}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"Sivalavida"},"content":"import static seedu.address.testutil.TypicalIndexes.*;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"Sivalavida"},"content":"        Person eighthPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"Sivalavida"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(eighthPerson).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":3,"-":257}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"Sivalavida"},"content":"import static seedu.address.logic.parser.CliSyntax.*;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":36,"author":{"gitID":"Sivalavida"},"content":"    public static final String VALID_GENDER_AMY \u003d \"F\";"},{"lineNumber":37,"author":{"gitID":"Sivalavida"},"content":"    public static final String VALID_GENDER_BOB \u003d \"M\";"},{"lineNumber":38,"author":{"gitID":"Sivalavida"},"content":"    public static final String VALID_AGE_AMY \u003d \"23\";"},{"lineNumber":39,"author":{"gitID":"Sivalavida"},"content":"    public static final String VALID_AGE_BOB \u003d \"34\";"},{"lineNumber":40,"author":{"gitID":"Sivalavida"},"content":"    public static final String VALID_LATITUDE_AMY \u003d \"1.339160\";"},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":"    public static final String VALID_LATITUDE_BOB \u003d \"1.406916\";"},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"    public static final String VALID_LONGITUDE_AMY \u003d \"103.745166\";"},{"lineNumber":43,"author":{"gitID":"Sivalavida"},"content":"    public static final String VALID_LONGITUDE_BOB \u003d \"103.769663\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":55,"author":{"gitID":"Sivalavida"},"content":"    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"},{"lineNumber":56,"author":{"gitID":"Sivalavida"},"content":"    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"},{"lineNumber":57,"author":{"gitID":"Sivalavida"},"content":"    public static final String AGE_DESC_AMY \u003d \" \" + PREFIX_AGE + VALID_AGE_AMY;"},{"lineNumber":58,"author":{"gitID":"Sivalavida"},"content":"    public static final String AGE_DESC_BOB \u003d \" \" + PREFIX_AGE + VALID_AGE_BOB;"},{"lineNumber":59,"author":{"gitID":"Sivalavida"},"content":"    public static final String LATITUDE_DESC_AMY \u003d \" \" + PREFIX_LATITUDE + VALID_LATITUDE_AMY;"},{"lineNumber":60,"author":{"gitID":"Sivalavida"},"content":"    public static final String LATITUDE_DESC_BOB \u003d \" \" + PREFIX_LATITUDE + VALID_LATITUDE_BOB;"},{"lineNumber":61,"author":{"gitID":"Sivalavida"},"content":"    public static final String LONGITUDE_DESC_AMY \u003d \" \" + PREFIX_LONGITUDE + VALID_LONGITUDE_AMY;"},{"lineNumber":62,"author":{"gitID":"Sivalavida"},"content":"    public static final String LONGITUDE_DESC_BOB \u003d \" \" + PREFIX_LONGITUDE + VALID_LONGITUDE_BOB;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":70,"author":{"gitID":"Sivalavida"},"content":"    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"A\"; // alphebets other than m and f not allowed"},{"lineNumber":71,"author":{"gitID":"Sivalavida"},"content":"    public static final String INVALID_AGE_DESC \u003d \" \" + PREFIX_AGE + \"131\"; // more than 120 years old"},{"lineNumber":72,"author":{"gitID":"Sivalavida"},"content":"    public static final String INVALID_LATITUDE_DESC \u003d \" \" + PREFIX_LATITUDE + \"12345\"; // out of range"},{"lineNumber":73,"author":{"gitID":"Sivalavida"},"content":"    public static final String INVALID_LONGITUDE_DESC \u003d \" \" + PREFIX_LONGITUDE + \"12345\"; // out of range"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":116,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":21,"-":151}},{"path":"src/test/java/seedu/address/model/person/LongitudeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sivalavida"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":3,"author":{"gitID":"Sivalavida"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"Sivalavida"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":5,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":6,"author":{"gitID":"Sivalavida"},"content":"import static org.junit.Assert.*;"},{"lineNumber":7,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":8,"author":{"gitID":"Sivalavida"},"content":"public class LongitudeTest {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitID":"Sivalavida"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Longitude(null));"},{"lineNumber":13,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":15,"author":{"gitID":"Sivalavida"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"Sivalavida"},"content":"    public void constructor_invalidLongitude_throwsIllegalArgumentException() {"},{"lineNumber":17,"author":{"gitID":"Sivalavida"},"content":"        String invalidLongitude \u003d \"181\";"},{"lineNumber":18,"author":{"gitID":"Sivalavida"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Longitude(invalidLongitude));"},{"lineNumber":19,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":21,"author":{"gitID":"Sivalavida"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Sivalavida"},"content":"    public void isValidLongitude() {"},{"lineNumber":23,"author":{"gitID":"Sivalavida"},"content":"        // null gender"},{"lineNumber":24,"author":{"gitID":"Sivalavida"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Longitude.isValidLongitude(null));"},{"lineNumber":25,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":26,"author":{"gitID":"Sivalavida"},"content":"        // invalid gender"},{"lineNumber":27,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Longitude.isValidLongitude(\"\")); // empty string"},{"lineNumber":28,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Longitude.isValidLongitude(\" \")); // spaces only"},{"lineNumber":29,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Longitude.isValidLongitude(\"^\")); // only non-alphanumeric characters"},{"lineNumber":30,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Longitude.isValidLongitude(\"M*\")); // contains non-alphanumeric characters"},{"lineNumber":31,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Longitude.isValidLongitude(\"180.1234\")); // greater than 180"},{"lineNumber":32,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Longitude.isValidLongitude(\"-180.1234\")); // less than 180"},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Longitude.isValidLongitude(\"--180.9\")); // double negative sign"},{"lineNumber":34,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Longitude.isValidLongitude(\"- 180.1234\")); // space between sign and number"},{"lineNumber":35,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":36,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":37,"author":{"gitID":"Sivalavida"},"content":"        // valid gender"},{"lineNumber":38,"author":{"gitID":"Sivalavida"},"content":"        assertTrue(Longitude.isValidLongitude(\"20.1234\")); // positive float"},{"lineNumber":39,"author":{"gitID":"Sivalavida"},"content":"        assertTrue(Longitude.isValidLongitude(\"-20.1234\")); // negative float"},{"lineNumber":40,"author":{"gitID":"Sivalavida"},"content":"        assertTrue(Longitude.isValidLongitude(\"180\")); // integers"},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":"        assertTrue(Longitude.isValidLongitude(\"-180\")); // negative integer"},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":44,"author":{"gitID":"Sivalavida"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"Sivalavida"},"content":"    public void getValue() {"},{"lineNumber":46,"author":{"gitID":"Sivalavida"},"content":"        Latitude latitude\u003d new Latitude(\"1.234\");"},{"lineNumber":47,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(\"01.234000\", latitude.getValue());"},{"lineNumber":48,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":49,"author":{"gitID":"Sivalavida"},"content":"        latitude\u003d new Latitude(\"-1.234\");"},{"lineNumber":50,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(\"-01.234000\", latitude.getValue());"},{"lineNumber":51,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":52,"author":{"gitID":"Sivalavida"},"content":"        latitude\u003d new Latitude(\"0\");"},{"lineNumber":53,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(\"00.000000\", latitude.getValue());"},{"lineNumber":54,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":55,"author":{"gitID":"Sivalavida"},"content":"        latitude\u003d new Latitude(\"2\");"},{"lineNumber":56,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(\"02.000000\", latitude.getValue());"},{"lineNumber":57,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Sivalavida"},"content":"}"}],"authorContributionMap":{"Sivalavida":55,"-":3}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"Sivalavida"},"content":"import seedu.address.model.person.*;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":22,"author":{"gitID":"Sivalavida"},"content":"    private static final String INVALID_GENDER \u003d \"a\";"},{"lineNumber":23,"author":{"gitID":"Sivalavida"},"content":"    private static final String INVALID_AGE \u003d \"123\";"},{"lineNumber":24,"author":{"gitID":"Sivalavida"},"content":"    private static final String INVALID_LATITUDE \u003d \"1234.352222\";"},{"lineNumber":25,"author":{"gitID":"Sivalavida"},"content":"    private static final String INVALID_LONGITUDE \u003d \"1034.981970\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":32,"author":{"gitID":"Sivalavida"},"content":"    private static final String VALID_GENDER \u003d BENSON.getGender().value;"},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":"    private static final String VALID_AGE \u003d BENSON.getGender().value;"},{"lineNumber":34,"author":{"gitID":"Sivalavida"},"content":"    private static final String VALID_LATITUDE \u003d BENSON.getLatitude().value;"},{"lineNumber":35,"author":{"gitID":"Sivalavida"},"content":"    private static final String VALID_LONGITUDE \u003d BENSON.getLongitude().value;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":49,"author":{"gitID":"Sivalavida"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"},{"lineNumber":50,"author":{"gitID":"Sivalavida"},"content":"                        , VALID_LONGITUDE, VALID_TAGS);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":57,"author":{"gitID":"Sivalavida"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"},{"lineNumber":58,"author":{"gitID":"Sivalavida"},"content":"                , VALID_LONGITUDE, VALID_TAGS);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":66,"author":{"gitID":"Sivalavida"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"},{"lineNumber":67,"author":{"gitID":"Sivalavida"},"content":"                        , VALID_LONGITUDE, VALID_TAGS);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":74,"author":{"gitID":"Sivalavida"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"},{"lineNumber":75,"author":{"gitID":"Sivalavida"},"content":"                , VALID_LONGITUDE, VALID_TAGS);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":83,"author":{"gitID":"Sivalavida"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"},{"lineNumber":84,"author":{"gitID":"Sivalavida"},"content":"                        , VALID_LONGITUDE, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":91,"author":{"gitID":"Sivalavida"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"},{"lineNumber":92,"author":{"gitID":"Sivalavida"},"content":"                , VALID_LONGITUDE, VALID_TAGS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":100,"author":{"gitID":"Sivalavida"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"},{"lineNumber":101,"author":{"gitID":"Sivalavida"},"content":"                        , VALID_LONGITUDE, VALID_TAGS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":108,"author":{"gitID":"Sivalavida"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_GENDER, VALID_AGE, VALID_LATITUDE"},{"lineNumber":109,"author":{"gitID":"Sivalavida"},"content":"                , VALID_LONGITUDE, VALID_TAGS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"Sivalavida"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"Sivalavida"},"content":"    public void toModelType_invalidGender_throwsIllegalValueException() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":117,"author":{"gitID":"Sivalavida"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_GENDER, VALID_AGE, VALID_LATITUDE"},{"lineNumber":118,"author":{"gitID":"Sivalavida"},"content":"                        , VALID_LONGITUDE, VALID_TAGS);"},{"lineNumber":119,"author":{"gitID":"Sivalavida"},"content":"        String expectedMessage \u003d Gender.MESSAGE_GENDER_CONSTRAINTS;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"Sivalavida"},"content":"    public void toModelType_nullGender_throwsIllegalValueException() {"},{"lineNumber":125,"author":{"gitID":"Sivalavida"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null, VALID_AGE, VALID_LATITUDE"},{"lineNumber":126,"author":{"gitID":"Sivalavida"},"content":"                , VALID_LONGITUDE, VALID_TAGS);"},{"lineNumber":127,"author":{"gitID":"Sivalavida"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"Sivalavida"},"content":"    //@todo: add invalid and null tests for age,lat and long"},{"lineNumber":132,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":138,"author":{"gitID":"Sivalavida"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"},{"lineNumber":139,"author":{"gitID":"Sivalavida"},"content":"                        , VALID_LONGITUDE, invalidTags);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":38,"-":105}},{"path":"src/test/java/seedu/address/model/person/LatitudeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sivalavida"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":3,"author":{"gitID":"Sivalavida"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"Sivalavida"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":5,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":6,"author":{"gitID":"Sivalavida"},"content":"import static org.junit.Assert.*;"},{"lineNumber":7,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":8,"author":{"gitID":"Sivalavida"},"content":"public class LatitudeTest {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitID":"Sivalavida"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Latitude(null));"},{"lineNumber":13,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":15,"author":{"gitID":"Sivalavida"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"Sivalavida"},"content":"    public void constructor_invalidLatitude_throwsIllegalArgumentException() {"},{"lineNumber":17,"author":{"gitID":"Sivalavida"},"content":"        String invalidLatitude \u003d \"91\";"},{"lineNumber":18,"author":{"gitID":"Sivalavida"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Latitude(invalidLatitude));"},{"lineNumber":19,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":21,"author":{"gitID":"Sivalavida"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Sivalavida"},"content":"    public void isValidLatitude() {"},{"lineNumber":23,"author":{"gitID":"Sivalavida"},"content":"        // null gender"},{"lineNumber":24,"author":{"gitID":"Sivalavida"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Latitude.isValidLatitude(null));"},{"lineNumber":25,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":26,"author":{"gitID":"Sivalavida"},"content":"        // invalid gender"},{"lineNumber":27,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Latitude.isValidLatitude(\"\")); // empty string"},{"lineNumber":28,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Latitude.isValidLatitude(\" \")); // spaces only"},{"lineNumber":29,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Latitude.isValidLatitude(\"^\")); // only non-alphanumeric characters"},{"lineNumber":30,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Latitude.isValidLatitude(\"M*\")); // contains non-alphanumeric characters"},{"lineNumber":31,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Latitude.isValidLatitude(\"90.1234\")); // greater than 90"},{"lineNumber":32,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Latitude.isValidLatitude(\"-90.1234\")); // less than 90"},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Latitude.isValidLatitude(\"--90.9\")); // double negative sign"},{"lineNumber":34,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Latitude.isValidLatitude(\"- 90.1234\")); // space between sign and number"},{"lineNumber":35,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":36,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":37,"author":{"gitID":"Sivalavida"},"content":"        // valid gender"},{"lineNumber":38,"author":{"gitID":"Sivalavida"},"content":"        assertTrue(Latitude.isValidLatitude(\"20.1234\")); // positive float"},{"lineNumber":39,"author":{"gitID":"Sivalavida"},"content":"        assertTrue(Latitude.isValidLatitude(\"-20.1234\")); // negative float"},{"lineNumber":40,"author":{"gitID":"Sivalavida"},"content":"        assertTrue(Latitude.isValidLatitude(\"90\")); // integers"},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":"        assertTrue(Latitude.isValidLatitude(\"-90\")); // negative integer"},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":44,"author":{"gitID":"Sivalavida"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"Sivalavida"},"content":"    public void getValue() {"},{"lineNumber":46,"author":{"gitID":"Sivalavida"},"content":"        Latitude latitude\u003d new Latitude(\"1.234\");"},{"lineNumber":47,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(\"01.234000\", latitude.getValue());"},{"lineNumber":48,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":49,"author":{"gitID":"Sivalavida"},"content":"        latitude\u003d new Latitude(\"-1.234\");"},{"lineNumber":50,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(\"-01.234000\", latitude.getValue());"},{"lineNumber":51,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":52,"author":{"gitID":"Sivalavida"},"content":"        latitude\u003d new Latitude(\"0\");"},{"lineNumber":53,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(\"00.000000\", latitude.getValue());"},{"lineNumber":54,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":55,"author":{"gitID":"Sivalavida"},"content":"        latitude\u003d new Latitude(\"2\");"},{"lineNumber":56,"author":{"gitID":"Sivalavida"},"content":"        assertEquals(\"02.000000\", latitude.getValue());"},{"lineNumber":57,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Sivalavida"},"content":"}"}],"authorContributionMap":{"Sivalavida":55,"-":3}},{"path":"src/test/java/seedu/address/model/person/AgeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sivalavida"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":3,"author":{"gitID":"Sivalavida"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"Sivalavida"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":5,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":6,"author":{"gitID":"Sivalavida"},"content":"import static org.junit.Assert.*;"},{"lineNumber":7,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":8,"author":{"gitID":"Sivalavida"},"content":"public class AgeTest {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitID":"Sivalavida"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Age(null));"},{"lineNumber":13,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":15,"author":{"gitID":"Sivalavida"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"Sivalavida"},"content":"    public void constructor_invalidAge_throwsIllegalArgumentException() {"},{"lineNumber":17,"author":{"gitID":"Sivalavida"},"content":"        String invalidAge \u003d \"121\";"},{"lineNumber":18,"author":{"gitID":"Sivalavida"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Age(invalidAge));"},{"lineNumber":19,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":21,"author":{"gitID":"Sivalavida"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Sivalavida"},"content":"    public void isValidAge() {"},{"lineNumber":23,"author":{"gitID":"Sivalavida"},"content":"        // null gender"},{"lineNumber":24,"author":{"gitID":"Sivalavida"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Age.isValidAge(null));"},{"lineNumber":25,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":26,"author":{"gitID":"Sivalavida"},"content":"        // invalid gender"},{"lineNumber":27,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Age.isValidAge(\"\")); // empty string"},{"lineNumber":28,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Age.isValidAge(\" \")); // spaces only"},{"lineNumber":29,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Age.isValidAge(\"^\")); // only non-alphanumeric characters"},{"lineNumber":30,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Age.isValidAge(\"M*\")); // contains non-alphanumeric characters"},{"lineNumber":31,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Age.isValidAge(\"90.1234\")); // decimal values"},{"lineNumber":32,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Age.isValidAge(\"-90\")); // negative values"},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":34,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":35,"author":{"gitID":"Sivalavida"},"content":"        // valid gender"},{"lineNumber":36,"author":{"gitID":"Sivalavida"},"content":"        assertTrue(Age.isValidAge(\"2\")); //integer with one digit"},{"lineNumber":37,"author":{"gitID":"Sivalavida"},"content":"        assertTrue(Age.isValidAge(\"20\")); //integer with two digit"},{"lineNumber":38,"author":{"gitID":"Sivalavida"},"content":"        assertTrue(Age.isValidAge(\"110\")); //integer with three digit"},{"lineNumber":39,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Sivalavida"},"content":"}"}],"authorContributionMap":{"Sivalavida":37,"-":3}},{"path":"src/test/java/seedu/address/model/person/GenderTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sivalavida"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":3,"author":{"gitID":"Sivalavida"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"Sivalavida"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":5,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":6,"author":{"gitID":"Sivalavida"},"content":"import static org.junit.Assert.*;"},{"lineNumber":7,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":8,"author":{"gitID":"Sivalavida"},"content":"public class GenderTest {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitID":"Sivalavida"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Gender(null));"},{"lineNumber":13,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":15,"author":{"gitID":"Sivalavida"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"Sivalavida"},"content":"    public void constructor_invalidGender_throwsIllegalArgumentException() {"},{"lineNumber":17,"author":{"gitID":"Sivalavida"},"content":"        String invalidGender \u003d \"q\";"},{"lineNumber":18,"author":{"gitID":"Sivalavida"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Gender(invalidGender));"},{"lineNumber":19,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":21,"author":{"gitID":"Sivalavida"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Sivalavida"},"content":"    public void isValidGender() {"},{"lineNumber":23,"author":{"gitID":"Sivalavida"},"content":"        // null gender"},{"lineNumber":24,"author":{"gitID":"Sivalavida"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Gender.isValidGender(null));"},{"lineNumber":25,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":26,"author":{"gitID":"Sivalavida"},"content":"        // invalid gender"},{"lineNumber":27,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Gender.isValidGender(\"\")); // empty string"},{"lineNumber":28,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Gender.isValidGender(\" \")); // spaces only"},{"lineNumber":29,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Gender.isValidGender(\"^\")); // only non-alphanumeric characters"},{"lineNumber":30,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Gender.isValidGender(\"M*\")); // contains non-alphanumeric characters"},{"lineNumber":31,"author":{"gitID":"Sivalavida"},"content":"        assertFalse(Gender.isValidGender(\"M \")); // male with space"},{"lineNumber":32,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":"        // valid gender"},{"lineNumber":34,"author":{"gitID":"Sivalavida"},"content":"        assertTrue(Gender.isValidGender(\"M\")); // male in uppercase"},{"lineNumber":35,"author":{"gitID":"Sivalavida"},"content":"        assertTrue(Gender.isValidGender(\"m\")); // male in lowercase"},{"lineNumber":36,"author":{"gitID":"Sivalavida"},"content":"        assertTrue(Gender.isValidGender(\"F\")); // female in uppercase"},{"lineNumber":37,"author":{"gitID":"Sivalavida"},"content":"        assertTrue(Gender.isValidGender(\"f\")); // female in lowercase"},{"lineNumber":38,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Sivalavida"},"content":"}"}],"authorContributionMap":{"Sivalavida":36,"-":3}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"Sivalavida"},"content":"import seedu.address.model.person.*;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":1,"-":82}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Sivalavida"},"content":"import static seedu.address.logic.parser.CliSyntax.*;"},{"lineNumber":7,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":29,"author":{"gitID":"Sivalavida"},"content":"        sb.append(PREFIX_GENDER + person.getGender().value + \" \");"},{"lineNumber":30,"author":{"gitID":"Sivalavida"},"content":"        sb.append(PREFIX_AGE + person.getAge().value + \" \");"},{"lineNumber":31,"author":{"gitID":"Sivalavida"},"content":"        sb.append(PREFIX_LATITUDE + person.getLatitude().value + \" \");"},{"lineNumber":32,"author":{"gitID":"Sivalavida"},"content":"        sb.append(PREFIX_LONGITUDE + person.getLongitude().value + \" \");"},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":35,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":40,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details which can be edited."},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Sivalavida"},"content":"    public static String getEditablePersonDetails(Person person) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":50,"author":{"gitID":"-"},"content":"                s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":12,"-":42}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Sivalavida"},"content":"import seedu.address.model.person.*;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":19,"author":{"gitID":"Sivalavida"},"content":"    public static final String DEFAULT_GENDER \u003d \"F\";"},{"lineNumber":20,"author":{"gitID":"Sivalavida"},"content":"    public static final String DEFAULT_AGE \u003d \"23\";"},{"lineNumber":21,"author":{"gitID":"Sivalavida"},"content":"    public static final String DEFAULT_LATITUDE \u003d \"1.406916\";"},{"lineNumber":22,"author":{"gitID":"Sivalavida"},"content":"    public static final String DEFAULT_LONGITUDE \u003d \"103.769663\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":29,"author":{"gitID":"Sivalavida"},"content":"    private Gender gender;"},{"lineNumber":30,"author":{"gitID":"Sivalavida"},"content":"    private Age age;"},{"lineNumber":31,"author":{"gitID":"Sivalavida"},"content":"    private Latitude latitude;"},{"lineNumber":32,"author":{"gitID":"Sivalavida"},"content":"    private Longitude longitude;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":40,"author":{"gitID":"Sivalavida"},"content":"        gender \u003d new Gender(DEFAULT_GENDER);"},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":"        age \u003d new Age(DEFAULT_AGE);"},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"        latitude \u003d new Latitude(DEFAULT_LATITUDE);"},{"lineNumber":43,"author":{"gitID":"Sivalavida"},"content":"        longitude \u003d new Longitude(DEFAULT_LONGITUDE);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":55,"author":{"gitID":"Sivalavida"},"content":"        gender \u003d personToCopy.getGender();"},{"lineNumber":56,"author":{"gitID":"Sivalavida"},"content":"        age \u003d personToCopy.getAge();"},{"lineNumber":57,"author":{"gitID":"Sivalavida"},"content":"        latitude \u003d personToCopy.getLatitude();"},{"lineNumber":58,"author":{"gitID":"Sivalavida"},"content":"        longitude \u003d personToCopy.getLongitude();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"Sivalavida"},"content":"     * Sets the {@code Gender} of the {@code Person} that we are building."},{"lineNumber":72,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"Sivalavida"},"content":"    public PersonBuilder withGender(String gender) {"},{"lineNumber":74,"author":{"gitID":"Sivalavida"},"content":"        this.gender \u003d new Gender(gender);"},{"lineNumber":75,"author":{"gitID":"Sivalavida"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":78,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"Sivalavida"},"content":"     * Sets the {@code Age} of the {@code Person} that we are building."},{"lineNumber":80,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"Sivalavida"},"content":"    public PersonBuilder withAge(String age) {"},{"lineNumber":82,"author":{"gitID":"Sivalavida"},"content":"        this.age \u003d new Age(age);"},{"lineNumber":83,"author":{"gitID":"Sivalavida"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":86,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"Sivalavida"},"content":"     * Sets the {@code Latitude} of the {@code Person} that we are building."},{"lineNumber":88,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"Sivalavida"},"content":"    public PersonBuilder withLatitude(String latitude) {"},{"lineNumber":90,"author":{"gitID":"Sivalavida"},"content":"        this.latitude \u003d new Latitude(latitude);"},{"lineNumber":91,"author":{"gitID":"Sivalavida"},"content":"        return this;"},{"lineNumber":92,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":94,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"Sivalavida"},"content":"     * Sets the {@code Longitude} of the {@code Person} that we are building."},{"lineNumber":96,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"Sivalavida"},"content":"    public PersonBuilder withLongitude(String longitude) {"},{"lineNumber":98,"author":{"gitID":"Sivalavida"},"content":"        this.longitude \u003d new Longitude(longitude);"},{"lineNumber":99,"author":{"gitID":"Sivalavida"},"content":"        return this;"},{"lineNumber":100,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":135,"author":{"gitID":"Sivalavida"},"content":"        return new Person(name, phone, email, address, gender, age, latitude, longitude, tags);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":50,"-":88}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Sivalavida"},"content":"import static seedu.address.logic.commands.CommandTestUtil.*;"},{"lineNumber":12,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":20,"author":{"gitID":"Sivalavida"},"content":"            .withPhone(\"85355255\").withGender(\"F\").withAge(\"23\").withLatitude(\"1.406916\")"},{"lineNumber":21,"author":{"gitID":"Sivalavida"},"content":"            .withLongitude(\"103.769663\").withTags(\"friends\").build();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":24,"author":{"gitID":"Sivalavida"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withGender(\"F\").withAge(\"23\").withLatitude(\"1.406916\")"},{"lineNumber":25,"author":{"gitID":"Sivalavida"},"content":"            .withLongitude(\"103.769663\").withTags(\"friends\").build();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":27,"author":{"gitID":"Sivalavida"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"},{"lineNumber":28,"author":{"gitID":"Sivalavida"},"content":"            .withLongitude(\"103.769663\").build();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":30,"author":{"gitID":"Sivalavida"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"},{"lineNumber":31,"author":{"gitID":"Sivalavida"},"content":"            .withLongitude(\"103.769663\").build();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"},{"lineNumber":34,"author":{"gitID":"Sivalavida"},"content":"            .withLongitude(\"103.769663\").build();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":36,"author":{"gitID":"Sivalavida"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withGender(\"F\").withAge(\"23\").withLatitude(\"1.406916\")"},{"lineNumber":37,"author":{"gitID":"Sivalavida"},"content":"            .withLongitude(\"103.769663\").build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":39,"author":{"gitID":"Sivalavida"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"},{"lineNumber":40,"author":{"gitID":"Sivalavida"},"content":"            .withLongitude(\"103.769663\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":44,"author":{"gitID":"Sivalavida"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"},{"lineNumber":45,"author":{"gitID":"Sivalavida"},"content":"            .withLongitude(\"103.769663\").build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":47,"author":{"gitID":"Sivalavida"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withGender(\"F\").withAge(\"23\").withLatitude(\"1.406916\")"},{"lineNumber":48,"author":{"gitID":"Sivalavida"},"content":"            .withLongitude(\"103.769663\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"Sivalavida"},"content":"    //Persons with same uneditable attributes ie Gender, Age, Latitude and Longitude"},{"lineNumber":51,"author":{"gitID":"Sivalavida"},"content":"    public static final Person JACOB \u003d new PersonBuilder().withName(\"Jacob Becky\").withPhone(\"9482224\")"},{"lineNumber":52,"author":{"gitID":"Sivalavida"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"},{"lineNumber":53,"author":{"gitID":"Sivalavida"},"content":"            .withLongitude(\"103.769663\").build();"},{"lineNumber":54,"author":{"gitID":"Sivalavida"},"content":"    public static final Person KALE \u003d new PersonBuilder().withName(\"Kale Cook\").withPhone(\"9482427\")"},{"lineNumber":55,"author":{"gitID":"Sivalavida"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"},{"lineNumber":56,"author":{"gitID":"Sivalavida"},"content":"            .withLongitude(\"103.769663\").build();"},{"lineNumber":57,"author":{"gitID":"Sivalavida"},"content":"    public static final Person LEE \u003d new PersonBuilder().withName(\"Lee Sim\").withPhone(\"9482442\")"},{"lineNumber":58,"author":{"gitID":"Sivalavida"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"},{"lineNumber":59,"author":{"gitID":"Sivalavida"},"content":"            .withLongitude(\"103.769663\").build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":64,"author":{"gitID":"Sivalavida"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":66,"author":{"gitID":"Sivalavida"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":89,"author":{"gitID":"Sivalavida"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE, JACOB, KALE, LEE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":34,"-":57}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"Sivalavida"},"content":"    private static final String GENDER_FIELD_ID \u003d \"#gender\";"},{"lineNumber":20,"author":{"gitID":"Sivalavida"},"content":"    private static final String AGE_FIELD_ID \u003d \"#age\";"},{"lineNumber":21,"author":{"gitID":"Sivalavida"},"content":"    private static final String LATITUDE_FIELD_ID \u003d \"#latitude\";"},{"lineNumber":22,"author":{"gitID":"Sivalavida"},"content":"    private static final String LONGITUDE_FIELD_ID \u003d \"#longitude\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":30,"author":{"gitID":"Sivalavida"},"content":"    private final Label genderLabel;"},{"lineNumber":31,"author":{"gitID":"Sivalavida"},"content":"    private final Label ageLabel;"},{"lineNumber":32,"author":{"gitID":"Sivalavida"},"content":"    private final Label latitudeLabel;"},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":"    private final Label longitudeLabel;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":44,"author":{"gitID":"Sivalavida"},"content":"        this.genderLabel \u003d getChildNode(GENDER_FIELD_ID);"},{"lineNumber":45,"author":{"gitID":"Sivalavida"},"content":"        this.ageLabel \u003d getChildNode(AGE_FIELD_ID);"},{"lineNumber":46,"author":{"gitID":"Sivalavida"},"content":"        this.latitudeLabel \u003d getChildNode(LATITUDE_FIELD_ID);"},{"lineNumber":47,"author":{"gitID":"Sivalavida"},"content":"        this.longitudeLabel \u003d getChildNode(LONGITUDE_FIELD_ID);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"Sivalavida"},"content":"    public String getGender() {"},{"lineNumber":78,"author":{"gitID":"Sivalavida"},"content":"        return genderLabel.getText();"},{"lineNumber":79,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":81,"author":{"gitID":"Sivalavida"},"content":"    public String getAge() {"},{"lineNumber":82,"author":{"gitID":"Sivalavida"},"content":"        return ageLabel.getText();"},{"lineNumber":83,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":85,"author":{"gitID":"Sivalavida"},"content":"    public String getLatitude() {"},{"lineNumber":86,"author":{"gitID":"Sivalavida"},"content":"        return latitudeLabel.getText();"},{"lineNumber":87,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":89,"author":{"gitID":"Sivalavida"},"content":"    public String getLongitude() {"},{"lineNumber":90,"author":{"gitID":"Sivalavida"},"content":"        return longitudeLabel.getText();"},{"lineNumber":91,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":28,"-":71}},{"path":"src/test/java/seedu/address/testutil/TypicalProducts.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.math.BigDecimal;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.money.Money;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.product.Category;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.product.Product;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.product.ProductName;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.product.exceptions.DuplicateProductException;"},{"lineNumber":14,"author":{"gitID":"Sivalavida"},"content":"import static seedu.address.logic.commands.CommandTestUtil.*;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class TypicalProducts {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    //TODO: add typical products class"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static Product EGG \u003d new Product(new ProductName(\"Egg\"),"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            new Money(new BigDecimal(1.0)), new Category(\"Food\"));"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":1,"-":20}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"Sivalavida"},"content":"    private Label gender;"},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"    private Label age;"},{"lineNumber":43,"author":{"gitID":"Sivalavida"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"Sivalavida"},"content":"    private Label latitude;"},{"lineNumber":45,"author":{"gitID":"Sivalavida"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"Sivalavida"},"content":"    private Label longitude;"},{"lineNumber":47,"author":{"gitID":"Sivalavida"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":58,"author":{"gitID":"Sivalavida"},"content":"        gender.setText(person.getGender().value);"},{"lineNumber":59,"author":{"gitID":"Sivalavida"},"content":"        age.setText(person.getAge().value);"},{"lineNumber":60,"author":{"gitID":"Sivalavida"},"content":"        latitude.setText(person.getLatitude().value);"},{"lineNumber":61,"author":{"gitID":"Sivalavida"},"content":"        longitude.setText(person.getLongitude().value);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":12,"-":70}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sivalavida"},"content":"import static seedu.address.logic.parser.CliSyntax.*;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"Sivalavida"},"content":"import seedu.address.model.person.*;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":27,"author":{"gitID":"Sivalavida"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_GENDER,"},{"lineNumber":28,"author":{"gitID":"Sivalavida"},"content":"                        PREFIX_AGE, PREFIX_LATITUDE, PREFIX_LONGITUDE, PREFIX_TAG);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"Sivalavida"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER,"},{"lineNumber":31,"author":{"gitID":"Sivalavida"},"content":"                PREFIX_AGE, PREFIX_LATITUDE, PREFIX_LONGITUDE)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":"            Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER)).get();"},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"            Age age \u003d ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE)).get();"},{"lineNumber":43,"author":{"gitID":"Sivalavida"},"content":"            Latitude latitude \u003d ParserUtil.parseLatitude(argMultimap.getValue(PREFIX_LATITUDE)).get();"},{"lineNumber":44,"author":{"gitID":"Sivalavida"},"content":"            Longitude longitude \u003d ParserUtil.parseLongitude(argMultimap.getValue(PREFIX_LONGITUDE)).get();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Sivalavida"},"content":"            Person person \u003d new Person(name, phone, email, address, gender, age, latitude, longitude, tagList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":11,"-":52}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"Sivalavida"},"content":"    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"},{"lineNumber":14,"author":{"gitID":"Sivalavida"},"content":"    public static final Prefix PREFIX_AGE \u003d new Prefix(\"age/\");"},{"lineNumber":15,"author":{"gitID":"Sivalavida"},"content":"    public static final Prefix PREFIX_LATITUDE \u003d new Prefix(\"lat/\");"},{"lineNumber":16,"author":{"gitID":"Sivalavida"},"content":"    public static final Prefix PREFIX_LONGITUDE \u003d new Prefix(\"lon/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"pr/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":4,"-":17}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.math.BigDecimal;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.text.NumberFormat;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Currency;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Locale;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.money.Money;"},{"lineNumber":18,"author":{"gitID":"Sivalavida"},"content":"import seedu.address.model.person.*;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.product.Category;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.product.Product;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.product.ProductName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"Sivalavida"},"content":"     * Parses a {@code String gender} into a {@code Gender}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"Sivalavida"},"content":"     * @throws IllegalValueException if the given {@code gender} is invalid."},{"lineNumber":80,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"Sivalavida"},"content":"    public static Gender parseGender(String gender) throws IllegalValueException {"},{"lineNumber":82,"author":{"gitID":"Sivalavida"},"content":"        requireNonNull(gender);"},{"lineNumber":83,"author":{"gitID":"Sivalavida"},"content":"        String trimmedGender \u003d gender.trim();"},{"lineNumber":84,"author":{"gitID":"Sivalavida"},"content":"        if (!Gender.isValidGender(trimmedGender)) {"},{"lineNumber":85,"author":{"gitID":"Sivalavida"},"content":"            throw new IllegalValueException(Gender.MESSAGE_GENDER_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"Sivalavida"},"content":"        return new Gender(trimmedGender);"},{"lineNumber":88,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":90,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"Sivalavida"},"content":"     * Parses a {@code Optional\u003cString\u003e gender} into an {@code Optional\u003cGender\u003e} if {@code gender} is present."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"Sivalavida"},"content":"    public static Optional\u003cGender\u003e parseGender(Optional\u003cString\u003e gender) throws IllegalValueException {"},{"lineNumber":95,"author":{"gitID":"Sivalavida"},"content":"        requireNonNull(gender);"},{"lineNumber":96,"author":{"gitID":"Sivalavida"},"content":"        return gender.isPresent() ? Optional.of(parseGender(gender.get())) : Optional.empty();"},{"lineNumber":97,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":99,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"Sivalavida"},"content":"     * Parses a {@code String age} into a {@code Age}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"Sivalavida"},"content":"     * @throws IllegalValueException if the given {@code age} is invalid."},{"lineNumber":104,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"Sivalavida"},"content":"    public static Age parseAge(String age) throws IllegalValueException {"},{"lineNumber":106,"author":{"gitID":"Sivalavida"},"content":"        requireNonNull(age);"},{"lineNumber":107,"author":{"gitID":"Sivalavida"},"content":"        String trimmedAge \u003d age.trim();"},{"lineNumber":108,"author":{"gitID":"Sivalavida"},"content":"        if (!Age.isValidAge(trimmedAge)) {"},{"lineNumber":109,"author":{"gitID":"Sivalavida"},"content":"            throw new IllegalValueException(Age.MESSAGE_AGE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"Sivalavida"},"content":"        return new Age(trimmedAge);"},{"lineNumber":112,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":114,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"Sivalavida"},"content":"     * Parses a {@code Optional\u003cString\u003e age} into an {@code Optional\u003cAge\u003e} if {@code age} is present."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"Sivalavida"},"content":"    public static Optional\u003cAge\u003e parseAge(Optional\u003cString\u003e age) throws IllegalValueException {"},{"lineNumber":119,"author":{"gitID":"Sivalavida"},"content":"        requireNonNull(age);"},{"lineNumber":120,"author":{"gitID":"Sivalavida"},"content":"        return age.isPresent() ? Optional.of(parseAge(age.get())) : Optional.empty();"},{"lineNumber":121,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":123,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"Sivalavida"},"content":"     * Parses a {@code String latitude} into a {@code Latitude}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":127,"author":{"gitID":"Sivalavida"},"content":"     * @throws IllegalValueException if the given {@code latitude} is invalid."},{"lineNumber":128,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"Sivalavida"},"content":"    public static Latitude parseLatitude(String latitude) throws IllegalValueException {"},{"lineNumber":130,"author":{"gitID":"Sivalavida"},"content":"        requireNonNull(latitude);"},{"lineNumber":131,"author":{"gitID":"Sivalavida"},"content":"        String trimmedLatitude \u003d latitude.trim();"},{"lineNumber":132,"author":{"gitID":"Sivalavida"},"content":"        if (!Latitude.isValidLatitude(trimmedLatitude)) {"},{"lineNumber":133,"author":{"gitID":"Sivalavida"},"content":"            throw new IllegalValueException(Latitude.MESSAGE_LATITUDE_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"Sivalavida"},"content":"        return new Latitude(trimmedLatitude);"},{"lineNumber":136,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":138,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"Sivalavida"},"content":"     * Parses a {@code Optional\u003cString\u003e latitude} into an {@code Optional\u003cLatitude\u003e} if {@code latitude} is present."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"Sivalavida"},"content":"    public static Optional\u003cLatitude\u003e parseLatitude(Optional\u003cString\u003e latitude) throws IllegalValueException {"},{"lineNumber":143,"author":{"gitID":"Sivalavida"},"content":"        requireNonNull(latitude);"},{"lineNumber":144,"author":{"gitID":"Sivalavida"},"content":"        return latitude.isPresent() ? Optional.of(parseLatitude(latitude.get())) : Optional.empty();"},{"lineNumber":145,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":147,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"Sivalavida"},"content":"     * Parses a {@code String longitude} into a {@code Longitude}."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":151,"author":{"gitID":"Sivalavida"},"content":"     * @throws IllegalValueException if the given {@code longitude} is invalid."},{"lineNumber":152,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"Sivalavida"},"content":"    public static Longitude parseLongitude(String longitude) throws IllegalValueException {"},{"lineNumber":154,"author":{"gitID":"Sivalavida"},"content":"        requireNonNull(longitude);"},{"lineNumber":155,"author":{"gitID":"Sivalavida"},"content":"        String trimmedLongitude \u003d longitude.trim();"},{"lineNumber":156,"author":{"gitID":"Sivalavida"},"content":"        if (!Longitude.isValidLongitude(trimmedLongitude)) {"},{"lineNumber":157,"author":{"gitID":"Sivalavida"},"content":"            throw new IllegalValueException(Longitude.MESSAGE_LONGITUDE_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"Sivalavida"},"content":"        return new Longitude(trimmedLongitude);"},{"lineNumber":160,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":162,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"Sivalavida"},"content":"     * Parses a {@code Optional\u003cString\u003e longitude} into an {@code Optional\u003cLongitude\u003e} if {@code longitude} is present."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"Sivalavida"},"content":"    public static Optional\u003cLongitude\u003e parseLongitude(Optional\u003cString\u003e longitude) throws IllegalValueException {"},{"lineNumber":167,"author":{"gitID":"Sivalavida"},"content":"        requireNonNull(longitude);"},{"lineNumber":168,"author":{"gitID":"Sivalavida"},"content":"        return longitude.isPresent() ? Optional.of(parseLongitude(longitude.get())) : Optional.empty();"},{"lineNumber":169,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /// product-level"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public static ProductName parseProductName(String name) throws IllegalValueException {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        if (!ProductName.isValidProductName(trimmedName)) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(ProductName.MESSAGE_PRODUCT_NAME_CONSTRAINTS);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        return new ProductName(trimmedName);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    public static Optional\u003cProductName\u003e parseProductName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseProductName(name.get())) : Optional.empty();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Parses a {@code String price} into a {@code price}."},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":271,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code price} is invalid."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    public static Money parsePrice(String price) throws IllegalValueException {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        requireNonNull(price);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        String trimmedPrice \u003d price.trim();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        Currency currency \u003d Money.DEFAULT_CURRENCY;"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        if (!Money.isValidMoney(trimmedPrice)) {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Money.MESSAGE_MONEY_CONSTRAINTS);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        } else if (Money.isValidMoneyWithCurrency(trimmedPrice)) {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            String currencySymbol \u003d trimmedPrice.substring(0,1);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"            currency \u003d parseCurrency(currencySymbol);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            trimmedPrice \u003d trimmedPrice.substring(1).trim();"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        return new Money(new BigDecimal(trimmedPrice), currency);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"    private static Currency parseCurrency(String price) {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        for (Locale locale : NumberFormat.getAvailableLocales()) {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"            String code \u003d NumberFormat.getCurrencyInstance(locale).getCurrency().getSymbol();"},{"lineNumber":291,"author":{"gitID":"-"},"content":"            if (price.equals(code)) {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"                return Currency.getInstance(locale);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        return Money.DEFAULT_CURRENCY;"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e price} into an {@code Optional\u003cprice\u003e} if {@code price} is present."},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":301,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    public static Optional\u003cMoney\u003e parsePrice(Optional\u003cString\u003e price) throws IllegalValueException {"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        requireNonNull(price);"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        return price.isPresent() ? Optional.of(parsePrice(price.get())) : Optional.empty();"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":308,"author":{"gitID":"-"},"content":"     * Parses a {@code String category} into a {@code category}."},{"lineNumber":309,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":310,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":311,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code category} is invalid."},{"lineNumber":312,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    public static Category parseCategory(String category) throws IllegalValueException {"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        requireNonNull(category);"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        String trimmedCategory \u003d category.trim();"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        if (!Category.isValidCategory(trimmedCategory)) {"},{"lineNumber":317,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Category.MESSAGE_CATEGORY_CONSTRAINTS);"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        return new Category(trimmedCategory);"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":323,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e category} into an {@code Optional\u003ccategory\u003e} if {@code category} is present."},{"lineNumber":324,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":325,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":326,"author":{"gitID":"-"},"content":"    public static Optional\u003cCategory\u003e parseCategory(Optional\u003cString\u003e category) throws IllegalValueException {"},{"lineNumber":327,"author":{"gitID":"-"},"content":"        requireNonNull(category);"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        return category.isPresent() ? Optional.of(parseCategory(category.get())) : Optional.empty();"},{"lineNumber":329,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"    /// tag-level"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":337,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":338,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":339,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":340,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":341,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":342,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":343,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":345,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":346,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":347,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":348,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":349,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":352,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":353,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":354,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":355,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":356,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":357,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":358,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":359,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":360,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":361,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":81,"-":281}},{"path":"src/main/java/seedu/address/logic/recommender/Recommender.java","lines":[{"lineNumber":1,"author":{"gitID":"lowjiajin"},"content":"package seedu.address.logic.recommender;"},{"lineNumber":2,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":4,"author":{"gitID":"lowjiajin"},"content":"import weka.classifiers.Classifier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import weka.core.Attribute;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import weka.core.DenseInstance;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import weka.core.Instance;"},{"lineNumber":8,"author":{"gitID":"lowjiajin"},"content":"import weka.core.Instances;"},{"lineNumber":9,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":10,"author":{"gitID":"lowjiajin"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"lowjiajin"},"content":"import java.util.HashMap;"},{"lineNumber":14,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static java.lang.Double.compare;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"lowjiajin"},"content":"public class Recommender {"},{"lineNumber":18,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_CANNOT_CLASSIFY_INSTANCE \u003d \"Cannot classify instance.\";"},{"lineNumber":20,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Determines the likelihood of a person wanting to buy any product, assuming the product has a classifier."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @return A string in the following format: [\u003cproduct id, probability of buying\u003e, \u003c...\u003e, ...]."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public String getRecommendations(ArrayList\u003cString\u003e productsWithClassifiers, Person person, HashMap\u003cString, Classifier\u003e classifierDict) {"},{"lineNumber":26,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        Instance personInstance \u003d parsePerson(person);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        ArrayList\u003cRecommender.RecommenderProductDecision\u003e ProductRecOfAPerson \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c productsWithClassifiers.size(); i++) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            String currentProductPredicted \u003d productsWithClassifiers.get(i);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            Classifier classifier \u003d classifierDict.get(currentProductPredicted);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                Recommender.RecommenderProductDecision decision \u003d new Recommender.RecommenderProductDecision("},{"lineNumber":35,"author":{"gitID":"-"},"content":"                        currentProductPredicted, classifier.distributionForInstance(personInstance)[0]);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                ProductRecOfAPerson.add(decision);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            } catch (Exception e) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                System.out.println(MESSAGE_CANNOT_CLASSIFY_INSTANCE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Collections.sort(ProductRecOfAPerson);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return Arrays.toString(ProductRecOfAPerson.toArray());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Extracts the feature data from a {@code person} and turns them into a {@code DenseInstance} for classification."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Instance parsePerson(Person person) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        ArrayList\u003cString\u003e genderNominals \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"m\", \"f\"));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Attribute ageAttribute \u003d new Attribute(\"age\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Attribute genderAttribute \u003d new Attribute(\"gender\", genderNominals);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Attribute classAttribute \u003d new Attribute(\"class\", new ArrayList\u003c\u003e());"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ArrayList\u003cAttribute\u003e attributes \u003d new ArrayList\u003cAttribute\u003e("},{"lineNumber":57,"author":{"gitID":"-"},"content":"                Arrays.asList(ageAttribute, genderAttribute, classAttribute));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Instances persons \u003d new Instances(\"persons\", attributes, 1);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Instance personInstance \u003d new DenseInstance(3);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        personInstance.setDataset(persons);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        personInstance.setValue(0, Double.parseDouble(person.getAge().value));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        personInstance.setValue(1, person.getGender().value.toLowerCase());"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return personInstance;"},{"lineNumber":67,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Represents the confidence in the decision of whether to buy a given product, referenced by its {@code productId}."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private final class RecommenderProductDecision implements Comparable\u003cRecommenderProductDecision\u003e {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        private String productId;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        private double buyProb;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        private RecommenderProductDecision(String productId, double buyProb) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            this.productId \u003d productId;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            this.buyProb \u003d buyProb;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        private String getProductId() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return productId;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        private double getBuyProb() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return buyProb;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"         * Used in sorting the recommendations so only the most confident recommendations are presented."},{"lineNumber":91,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        public int compareTo(RecommenderProductDecision other) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return compare(other.getBuyProb(), buyProb);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        public String toString() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return String.format(\"%1$s: %2$f\", productId, buyProb);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"lowjiajin"},"content":"}"}],"authorContributionMap":{"lowjiajin":15,"-":87}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"Sivalavida"},"content":"import static seedu.address.logic.parser.CliSyntax.*;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":1,"-":74}},{"path":"src/main/java/seedu/address/logic/recommender/ProductTrainer.java","lines":[{"lineNumber":1,"author":{"gitID":"lowjiajin"},"content":"package seedu.address.logic.recommender;"},{"lineNumber":2,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":3,"author":{"gitID":"lowjiajin"},"content":"import weka.attributeSelection.ChiSquaredAttributeEval;"},{"lineNumber":4,"author":{"gitID":"lowjiajin"},"content":"import weka.attributeSelection.Ranker;"},{"lineNumber":5,"author":{"gitID":"lowjiajin"},"content":"import weka.classifiers.Evaluation;"},{"lineNumber":6,"author":{"gitID":"lowjiajin"},"content":"import weka.classifiers.bayes.NaiveBayes;"},{"lineNumber":7,"author":{"gitID":"lowjiajin"},"content":"import weka.classifiers.meta.AttributeSelectedClassifier;"},{"lineNumber":8,"author":{"gitID":"lowjiajin"},"content":"import weka.core.Instances;"},{"lineNumber":9,"author":{"gitID":"lowjiajin"},"content":"import weka.filters.Filter;"},{"lineNumber":10,"author":{"gitID":"lowjiajin"},"content":"import weka.filters.unsupervised.instance.RemoveWithValues;"},{"lineNumber":11,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":12,"author":{"gitID":"lowjiajin"},"content":"import java.util.Random;"},{"lineNumber":13,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":14,"author":{"gitID":"lowjiajin"},"content":"public class ProductTrainer {"},{"lineNumber":15,"author":{"gitID":"lowjiajin"},"content":"    private static final String MESSAGE_CANNOT_ISOLATE_PRODUCT \u003d \"Error when isolating orders of a given product. \" +"},{"lineNumber":16,"author":{"gitID":"lowjiajin"},"content":"            \"Check that {@code isolator} has valid settings for orders\";"},{"lineNumber":17,"author":{"gitID":"lowjiajin"},"content":"    private static final String MESSAGE_CANNOT_BUILD_CLASSIFIER \u003d \"Error when building classifier. \" +"},{"lineNumber":18,"author":{"gitID":"lowjiajin"},"content":"            \"Check {@code orders} format.\";"},{"lineNumber":19,"author":{"gitID":"lowjiajin"},"content":"    private static final String MESSAGE_CANNOT_EVALUATE_CLASSIFIER \u003d \"Error when evaluating classifier. \" +"},{"lineNumber":20,"author":{"gitID":"lowjiajin"},"content":"            \"Invalid parameters for {@code crossValidateModel()} method, or orders modified after classifier built.\";"},{"lineNumber":21,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":22,"author":{"gitID":"lowjiajin"},"content":"    private static final int WEKA_NUM_FEATURES_USED \u003d 2;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final int WEKA_MIN_ORDERS \u003d 5;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final boolean WEKA_EVALUATE_CLASSIFIER \u003d false;"},{"lineNumber":25,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":26,"author":{"gitID":"lowjiajin"},"content":"    private Instances orders;"},{"lineNumber":27,"author":{"gitID":"lowjiajin"},"content":"    private AttributeSelectedClassifier attrSelClassifier;"},{"lineNumber":28,"author":{"gitID":"lowjiajin"},"content":"    private Evaluation evaluation;"},{"lineNumber":29,"author":{"gitID":"lowjiajin"},"content":"    private boolean canBuild;"},{"lineNumber":30,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":31,"author":{"gitID":"lowjiajin"},"content":"    public ProductTrainer (Instances trainingOrders, RemoveWithValues isolator) {"},{"lineNumber":32,"author":{"gitID":"lowjiajin"},"content":"        orders \u003d trainingOrders;"},{"lineNumber":33,"author":{"gitID":"lowjiajin"},"content":"        isolateOrdersOfAProduct(isolator);"},{"lineNumber":34,"author":{"gitID":"lowjiajin"},"content":"        trainClassifier();"},{"lineNumber":35,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":37,"author":{"gitID":"lowjiajin"},"content":"    public boolean hasTrained() {"},{"lineNumber":38,"author":{"gitID":"lowjiajin"},"content":"        return canBuild;"},{"lineNumber":39,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":41,"author":{"gitID":"lowjiajin"},"content":"    public AttributeSelectedClassifier getClassifier() {"},{"lineNumber":42,"author":{"gitID":"lowjiajin"},"content":"        // Should not ever get the classifier before training it."},{"lineNumber":43,"author":{"gitID":"lowjiajin"},"content":"        assert attrSelClassifier !\u003d null;"},{"lineNumber":44,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":45,"author":{"gitID":"lowjiajin"},"content":"        return attrSelClassifier;"},{"lineNumber":46,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":48,"author":{"gitID":"lowjiajin"},"content":"    private void isolateOrdersOfAProduct(RemoveWithValues isolator) {"},{"lineNumber":49,"author":{"gitID":"lowjiajin"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"lowjiajin"},"content":"            isolator.setInputFormat(orders);"},{"lineNumber":51,"author":{"gitID":"lowjiajin"},"content":"            orders \u003d Filter.useFilter(orders, isolator);"},{"lineNumber":52,"author":{"gitID":"lowjiajin"},"content":"        } catch (Exception e) {"},{"lineNumber":53,"author":{"gitID":"lowjiajin"},"content":"            System.out.println(MESSAGE_CANNOT_ISOLATE_PRODUCT);"},{"lineNumber":54,"author":{"gitID":"lowjiajin"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":57,"author":{"gitID":"lowjiajin"},"content":"    private void trainClassifier() {"},{"lineNumber":58,"author":{"gitID":"lowjiajin"},"content":"        if (hasEnoughOrdersToTrain()) {"},{"lineNumber":59,"author":{"gitID":"lowjiajin"},"content":"            initClassifier();"},{"lineNumber":60,"author":{"gitID":"lowjiajin"},"content":"            buildClassifier();"},{"lineNumber":61,"author":{"gitID":"lowjiajin"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"lowjiajin"},"content":"        if (WEKA_EVALUATE_CLASSIFIER) {"},{"lineNumber":63,"author":{"gitID":"lowjiajin"},"content":"            evaluateClassifier();"},{"lineNumber":64,"author":{"gitID":"lowjiajin"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":67,"author":{"gitID":"lowjiajin"},"content":"    private boolean hasEnoughOrdersToTrain() {"},{"lineNumber":68,"author":{"gitID":"lowjiajin"},"content":"        return orders.numInstances() \u003e\u003d WEKA_MIN_ORDERS;"},{"lineNumber":69,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":71,"author":{"gitID":"lowjiajin"},"content":"    private void initClassifier() {"},{"lineNumber":72,"author":{"gitID":"lowjiajin"},"content":"        attrSelClassifier \u003d new AttributeSelectedClassifier();"},{"lineNumber":73,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":74,"author":{"gitID":"lowjiajin"},"content":"        // Set classifier type"},{"lineNumber":75,"author":{"gitID":"lowjiajin"},"content":"        NaiveBayes bayes \u003d new NaiveBayes();"},{"lineNumber":76,"author":{"gitID":"lowjiajin"},"content":"        attrSelClassifier.setClassifier(bayes);"},{"lineNumber":77,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":78,"author":{"gitID":"lowjiajin"},"content":"        // Set feature evaluation criteria for classifier"},{"lineNumber":79,"author":{"gitID":"lowjiajin"},"content":"        ChiSquaredAttributeEval chiEval \u003d new ChiSquaredAttributeEval();"},{"lineNumber":80,"author":{"gitID":"lowjiajin"},"content":"        attrSelClassifier.setEvaluator(chiEval);"},{"lineNumber":81,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":82,"author":{"gitID":"lowjiajin"},"content":"        // Set feature search criteria for classifier"},{"lineNumber":83,"author":{"gitID":"lowjiajin"},"content":"        Ranker ranker \u003d new Ranker();"},{"lineNumber":84,"author":{"gitID":"lowjiajin"},"content":"        ranker.setNumToSelect(WEKA_NUM_FEATURES_USED);"},{"lineNumber":85,"author":{"gitID":"lowjiajin"},"content":"        attrSelClassifier.setSearch(ranker);"},{"lineNumber":86,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":88,"author":{"gitID":"lowjiajin"},"content":"    private void buildClassifier() {"},{"lineNumber":89,"author":{"gitID":"lowjiajin"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"lowjiajin"},"content":"            attrSelClassifier.buildClassifier(orders);"},{"lineNumber":91,"author":{"gitID":"lowjiajin"},"content":"            canBuild \u003d true;"},{"lineNumber":92,"author":{"gitID":"lowjiajin"},"content":"        } catch (Exception e) {"},{"lineNumber":93,"author":{"gitID":"lowjiajin"},"content":"            System.out.println(MESSAGE_CANNOT_BUILD_CLASSIFIER);"},{"lineNumber":94,"author":{"gitID":"lowjiajin"},"content":"            canBuild \u003d false;"},{"lineNumber":95,"author":{"gitID":"lowjiajin"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":98,"author":{"gitID":"lowjiajin"},"content":"    private void evaluateClassifier() {"},{"lineNumber":99,"author":{"gitID":"lowjiajin"},"content":"        // Should not ever evaluate classifier if it has failed to build, because there is no classifier to evaluate."},{"lineNumber":100,"author":{"gitID":"lowjiajin"},"content":"        assert canBuild;"},{"lineNumber":101,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":102,"author":{"gitID":"lowjiajin"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"lowjiajin"},"content":"            // Evaluates the classifier with a n-fold cross validation, where n \u003d {@code WEKA_MIN_ORDERS}"},{"lineNumber":104,"author":{"gitID":"lowjiajin"},"content":"            evaluation \u003d new Evaluation(orders);"},{"lineNumber":105,"author":{"gitID":"lowjiajin"},"content":"            evaluation.crossValidateModel(attrSelClassifier, orders, WEKA_MIN_ORDERS, new Random(1));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            System.out.println(orders.classAttribute());"},{"lineNumber":107,"author":{"gitID":"lowjiajin"},"content":"            System.out.println(evaluation.toSummaryString());"},{"lineNumber":108,"author":{"gitID":"lowjiajin"},"content":"        } catch (Exception e) {"},{"lineNumber":109,"author":{"gitID":"lowjiajin"},"content":"            System.out.println(MESSAGE_CANNOT_EVALUATE_CLASSIFIER);"},{"lineNumber":110,"author":{"gitID":"lowjiajin"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"lowjiajin"},"content":"}"}],"authorContributionMap":{"lowjiajin":109,"-":3}},{"path":"src/main/java/seedu/address/logic/parser/AddProductCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sivalavida"},"content":"import static seedu.address.logic.parser.CliSyntax.*;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddProductCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.money.Money;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.product.*;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddProductCommand object"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddProductCommandParser implements Parser\u003cAddProductCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddProductCommand"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * and returns an AddProductCommand object for execution."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public AddProductCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PRICE, PREFIX_CATEGORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PRICE, PREFIX_CATEGORY)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProductCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            ProductName name \u003d ParserUtil.parseProductName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            Money price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE)).get();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY)).get();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Product product \u003d new Product(name, price, category);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            return new AddProductCommand(product);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"},{"lineNumber":56,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"Sivalavida":1,"-":55}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sivalavida"},"content":"import static seedu.address.logic.parser.CliSyntax.*;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Sivalavida"},"content":" * Adds a person to the retail analytics."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Sivalavida"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a customer to retail analytics. \""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":23,"author":{"gitID":"Sivalavida"},"content":"            + PREFIX_GENDER + \"GENDER \""},{"lineNumber":24,"author":{"gitID":"Sivalavida"},"content":"            + PREFIX_AGE + \"AGE \""},{"lineNumber":25,"author":{"gitID":"Sivalavida"},"content":"            + PREFIX_LATITUDE + \"LAT \""},{"lineNumber":26,"author":{"gitID":"Sivalavida"},"content":"            + PREFIX_LONGITUDE + \"LON \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":"            + PREFIX_GENDER + \"M \""},{"lineNumber":34,"author":{"gitID":"Sivalavida"},"content":"            + PREFIX_AGE + \"23 \""},{"lineNumber":35,"author":{"gitID":"Sivalavida"},"content":"            + PREFIX_LATITUDE + \"1.339160 \""},{"lineNumber":36,"author":{"gitID":"Sivalavida"},"content":"            + PREFIX_LONGITUDE + \"103.745166 \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the retail analytics\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":12,"-":59}},{"path":"src/main/java/seedu/address/logic/commands/AddProductCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sivalavida"},"content":"import static seedu.address.logic.parser.CliSyntax.*;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.product.Product;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.product.exceptions.DuplicateProductException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Adds a product to the retail analytics."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class AddProductCommand extends UndoableCommand {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"addp\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a product to retail analytics. \""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + PREFIX_PRICE + \"PRICE \""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + PREFIX_CATEGORY + \"CATEGORY \\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"Egg \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_PRICE + \"$ 2.5 \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_CATEGORY + \"Food \";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New product: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PRODUCT \u003d \"This product already exists in the retail analytics\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Product toAdd;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Product}"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public AddProductCommand(Product product) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(product);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        toAdd \u003d product;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            model.addProduct(toAdd);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (DuplicateProductException e) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PRODUCT);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddProductCommand) other).toAdd));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"},{"lineNumber":59,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"Sivalavida":1,"-":58}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sivalavida"},"content":"import static seedu.address.logic.parser.CliSyntax.*;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"Sivalavida"},"content":"import seedu.address.model.person.*;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Person  personToEdit;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":101,"author":{"gitID":"Sivalavida"},"content":"        Gender updatedGender \u003d personToEdit.getGender();// edit command does not allow editing gender"},{"lineNumber":102,"author":{"gitID":"Sivalavida"},"content":"        Age updatedAge \u003d personToEdit.getAge();// edit command does not allow editing age"},{"lineNumber":103,"author":{"gitID":"Sivalavida"},"content":"        Latitude updatedLatitude \u003d personToEdit.getLatitude();// edit command does not allow editing latitude"},{"lineNumber":104,"author":{"gitID":"Sivalavida"},"content":"        Longitude updatedLongitude \u003d personToEdit.getLongitude();// edit command does not allow editing longitude"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"Sivalavida"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedGender,"},{"lineNumber":108,"author":{"gitID":"Sivalavida"},"content":"                updatedAge, updatedLatitude, updatedLongitude, updatedTags);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":145,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":146,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":157,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":196,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":197,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":204,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":205,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":206,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":227,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":228,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":229,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":230,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":8,"-":225}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"Sivalavida"},"content":"import seedu.address.model.person.*;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"Sivalavida"},"content":"    private String gender;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":"    private String age;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"Sivalavida"},"content":"    private String latitude;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"Sivalavida"},"content":"    private String longitude;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Sivalavida"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, String gender,"},{"lineNumber":52,"author":{"gitID":"Sivalavida"},"content":"                            String age, String latitude, String longitude, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":57,"author":{"gitID":"Sivalavida"},"content":"        this.gender \u003d gender;"},{"lineNumber":58,"author":{"gitID":"Sivalavida"},"content":"        this.age \u003d age;"},{"lineNumber":59,"author":{"gitID":"Sivalavida"},"content":"        this.latitude \u003d latitude;"},{"lineNumber":60,"author":{"gitID":"Sivalavida"},"content":"        this.longitude \u003d longitude;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":76,"author":{"gitID":"Sivalavida"},"content":"        gender \u003d source.getGender().value;"},{"lineNumber":77,"author":{"gitID":"Sivalavida"},"content":"        age \u003dsource.getAge().value;"},{"lineNumber":78,"author":{"gitID":"Sivalavida"},"content":"        latitude \u003d source.getLatitude().value;"},{"lineNumber":79,"author":{"gitID":"Sivalavida"},"content":"        longitude \u003d source.getLongitude().value;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"Sivalavida"},"content":"        if (this.gender \u003d\u003d null) {"},{"lineNumber":130,"author":{"gitID":"Sivalavida"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"},{"lineNumber":131,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"Sivalavida"},"content":"        if (!Gender.isValidGender(this.gender)) {"},{"lineNumber":133,"author":{"gitID":"Sivalavida"},"content":"            throw new IllegalValueException(Gender.MESSAGE_GENDER_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"Sivalavida"},"content":"        final Gender gender \u003d new Gender(this.gender);"},{"lineNumber":136,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":137,"author":{"gitID":"Sivalavida"},"content":"        if (this.age \u003d\u003d null) {"},{"lineNumber":138,"author":{"gitID":"Sivalavida"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName()));"},{"lineNumber":139,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"Sivalavida"},"content":"        if (!Age.isValidAge(this.age)) {"},{"lineNumber":141,"author":{"gitID":"Sivalavida"},"content":"            throw new IllegalValueException(Age.MESSAGE_AGE_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"Sivalavida"},"content":"        final Age age \u003d new Age(this.age);"},{"lineNumber":144,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":145,"author":{"gitID":"Sivalavida"},"content":"        if (this.latitude \u003d\u003d null) {"},{"lineNumber":146,"author":{"gitID":"Sivalavida"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Latitude.class.getSimpleName()));"},{"lineNumber":147,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"Sivalavida"},"content":"        if (!Latitude.isValidLatitude(this.latitude)) {"},{"lineNumber":149,"author":{"gitID":"Sivalavida"},"content":"            throw new IllegalValueException(Latitude.MESSAGE_LATITUDE_CONSTRAINTS);"},{"lineNumber":150,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"Sivalavida"},"content":"        final Latitude latitude \u003d new Latitude(this.latitude);"},{"lineNumber":152,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":153,"author":{"gitID":"Sivalavida"},"content":"        if (this.longitude \u003d\u003d null) {"},{"lineNumber":154,"author":{"gitID":"Sivalavida"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Longitude.class.getSimpleName()));"},{"lineNumber":155,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"Sivalavida"},"content":"        if (!Longitude.isValidLongitude(this.longitude)) {"},{"lineNumber":157,"author":{"gitID":"Sivalavida"},"content":"            throw new IllegalValueException(Longitude.MESSAGE_LONGITUDE_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"Sivalavida"},"content":"        final Longitude longitude \u003d new Longitude(this.longitude);"},{"lineNumber":160,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":162,"author":{"gitID":"Sivalavida"},"content":"        return new Person(name, phone, email, address,gender, age, latitude, longitude, tags);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":180,"author":{"gitID":"Sivalavida"},"content":"                \u0026\u0026 Objects.equals(gender, otherPerson.gender)"},{"lineNumber":181,"author":{"gitID":"Sivalavida"},"content":"                \u0026\u0026 Objects.equals(age, otherPerson.age)"},{"lineNumber":182,"author":{"gitID":"Sivalavida"},"content":"                \u0026\u0026 Objects.equals(latitude, otherPerson.latitude)"},{"lineNumber":183,"author":{"gitID":"Sivalavida"},"content":"                \u0026\u0026 Objects.equals(longitude, otherPerson.longitude)"},{"lineNumber":184,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":52,"-":134}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"Sivalavida"},"content":"import seedu.address.model.person.*;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":16,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":20,"author":{"gitID":"Sivalavida"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Gender(\"M\"), new Age(\"30\"),"},{"lineNumber":21,"author":{"gitID":"Sivalavida"},"content":"                new Latitude(\"1.339160\"), new Longitude(\"103.745133\"),getTagSet(\"friends\")),"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":23,"author":{"gitID":"Sivalavida"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Gender(\"F\"), new Age(\"40\"),"},{"lineNumber":24,"author":{"gitID":"Sivalavida"},"content":"                new Latitude(\"1.339456\"), new Longitude(\"103.745111\"), getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":26,"author":{"gitID":"Sivalavida"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Gender(\"F\"),new Age(\"45\"),"},{"lineNumber":27,"author":{"gitID":"Sivalavida"},"content":"                new Latitude(\"1.339123\"), new Longitude(\"103.745233\"), getTagSet(\"neighbours\")),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":29,"author":{"gitID":"Sivalavida"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Gender(\"M\"), new Age(\"99\"),"},{"lineNumber":30,"author":{"gitID":"Sivalavida"},"content":"                new Latitude(\"1.339678\"), new Longitude(\"103.745166\"), getTagSet(\"family\")),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":32,"author":{"gitID":"Sivalavida"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Gender(\"M\"), new Age(\"12\"),"},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":"                new Latitude(\"1.339957\"), new Longitude(\"103.745234\"), getTagSet(\"classmates\")),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":35,"author":{"gitID":"Sivalavida"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Gender(\"M\"), new Age(\"34\"),"},{"lineNumber":36,"author":{"gitID":"Sivalavida"},"content":"                new Latitude(\"1.339454\"), new Longitude(\"103.745166\"), getTagSet(\"colleagues\"))"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":14,"-":50}},{"path":"src/main/java/seedu/address/model/person/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Sivalavida"},"content":" * Represents a Person\u0027s phone number in the Retail Analytics."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.value \u003d phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":1,"-":52}},{"path":"src/main/java/seedu/address/model/person/Age.java","lines":[{"lineNumber":1,"author":{"gitID":"Sivalavida"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Sivalavida"},"content":" * Represents a Person\u0027s age number in Retail Analytics."},{"lineNumber":8,"author":{"gitID":"Sivalavida"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAge(String)}"},{"lineNumber":9,"author":{"gitID":"Sivalavida"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Sivalavida"},"content":"public class Age {"},{"lineNumber":11,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":12,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"Sivalavida"},"content":"     * The minimum allowed age"},{"lineNumber":14,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"Sivalavida"},"content":"    public static int MIN_AGE \u003d 1;"},{"lineNumber":16,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":17,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Sivalavida"},"content":"     * The maximum allowed age"},{"lineNumber":19,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Sivalavida"},"content":"    public static int MAX_AGE \u003d 120;"},{"lineNumber":21,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":22,"author":{"gitID":"Sivalavida"},"content":"    public static final String MESSAGE_AGE_CONSTRAINTS \u003d"},{"lineNumber":23,"author":{"gitID":"Sivalavida"},"content":"            String.format(\"Age must be an integer between %d and %d\", MIN_AGE, MAX_AGE);"},{"lineNumber":24,"author":{"gitID":"Sivalavida"},"content":"    public static final String AGE_VALIDATION_REGEX \u003d \"\\\\d{1,3}\";"},{"lineNumber":25,"author":{"gitID":"Sivalavida"},"content":"    public final String value;"},{"lineNumber":26,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":27,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Sivalavida"},"content":"     * Constructs a {@code Age}."},{"lineNumber":29,"author":{"gitID":"Sivalavida"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"Sivalavida"},"content":"     * @param age A valid age of a person."},{"lineNumber":31,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"Sivalavida"},"content":"    public Age(String age) {"},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":"        requireNonNull(age);"},{"lineNumber":34,"author":{"gitID":"Sivalavida"},"content":"        checkArgument(isValidAge(age), MESSAGE_AGE_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitID":"Sivalavida"},"content":"        this.value \u003d age;"},{"lineNumber":36,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":38,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Sivalavida"},"content":"     * Returns true if a given string is a valid age of a person"},{"lineNumber":40,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":"    public static boolean isValidAge(String test) {"},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"        if (test.matches(AGE_VALIDATION_REGEX)){"},{"lineNumber":43,"author":{"gitID":"Sivalavida"},"content":"            int age \u003d Integer.parseInt(test);"},{"lineNumber":44,"author":{"gitID":"Sivalavida"},"content":"            if(age\u003e\u003dMIN_AGE \u0026\u0026 age\u003c\u003dMAX_AGE){"},{"lineNumber":45,"author":{"gitID":"Sivalavida"},"content":"                return true;"},{"lineNumber":46,"author":{"gitID":"Sivalavida"},"content":"            }"},{"lineNumber":47,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"Sivalavida"},"content":"        return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"Sivalavida"},"content":"                || (other instanceof Age // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"Sivalavida"},"content":"                \u0026\u0026 this.value.equals(((Age) other).value)); // state check"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"Sivalavida"},"content":"}"}],"authorContributionMap":{"Sivalavida":47,"-":21}},{"path":"src/main/java/seedu/address/model/person/Longitude.java","lines":[{"lineNumber":1,"author":{"gitID":"Sivalavida"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":3,"author":{"gitID":"Sivalavida"},"content":"import java.text.DecimalFormat;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Sivalavida"},"content":" * Represents a Person\u0027s Latitude in the Retail Analytics."},{"lineNumber":10,"author":{"gitID":"Sivalavida"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLongitude(String)}"},{"lineNumber":11,"author":{"gitID":"Sivalavida"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Sivalavida"},"content":"public class Longitude {"},{"lineNumber":13,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":14,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"Sivalavida"},"content":"     * The minimum allowed longitude"},{"lineNumber":16,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"Sivalavida"},"content":"    public static float MIN_LONGITUDE \u003d Float.valueOf(\"-180.0000\");"},{"lineNumber":18,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":19,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"Sivalavida"},"content":"     * The maximum allowed longitude"},{"lineNumber":21,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Sivalavida"},"content":"    public static float MAX_LONGITUDE \u003d Float.valueOf(\"180.0000\");"},{"lineNumber":23,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":24,"author":{"gitID":"Sivalavida"},"content":"    public static final String MESSAGE_LONGITUDE_CONSTRAINTS \u003d"},{"lineNumber":25,"author":{"gitID":"Sivalavida"},"content":"            String.format(\"Latitude numbers must be a decimal value between %f and %f\", MIN_LONGITUDE, MAX_LONGITUDE);"},{"lineNumber":26,"author":{"gitID":"Sivalavida"},"content":"    public static final String LONGITUDE_VALIDATION_REGEX \u003d \"-?\\\\d+\\\\.?\\\\d*\";"},{"lineNumber":27,"author":{"gitID":"Sivalavida"},"content":"    private static final DecimalFormat format \u003d new DecimalFormat(\"000.000000\");"},{"lineNumber":28,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":29,"author":{"gitID":"Sivalavida"},"content":"    public final String value;"},{"lineNumber":30,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":31,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"Sivalavida"},"content":"     * Constructs a {@code Longitude}."},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"Sivalavida"},"content":"     * @param longitude A valid longitude number."},{"lineNumber":35,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"Sivalavida"},"content":"    public Longitude(String longitude) {"},{"lineNumber":37,"author":{"gitID":"Sivalavida"},"content":"        requireNonNull(longitude);"},{"lineNumber":38,"author":{"gitID":"Sivalavida"},"content":"        checkArgument(isValidLongitude(longitude), MESSAGE_LONGITUDE_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"Sivalavida"},"content":"        this.value \u003d format.format(Double.parseDouble(longitude));"},{"lineNumber":40,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"Sivalavida"},"content":"     * A method to validate a longitude value"},{"lineNumber":44,"author":{"gitID":"Sivalavida"},"content":"     * @param test the longitude to check is valid"},{"lineNumber":45,"author":{"gitID":"Sivalavida"},"content":"     * @return true if test is a decimal value and within the MIN and MAX longitude"},{"lineNumber":46,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"Sivalavida"},"content":"    public static boolean isValidLongitude(String test) {"},{"lineNumber":48,"author":{"gitID":"Sivalavida"},"content":"        if (test.matches(LONGITUDE_VALIDATION_REGEX)) {"},{"lineNumber":49,"author":{"gitID":"Sivalavida"},"content":"            Float longitude \u003d Float.parseFloat(test);"},{"lineNumber":50,"author":{"gitID":"Sivalavida"},"content":"            if (longitude \u003e\u003d MIN_LONGITUDE \u0026\u0026 longitude \u003c\u003d MAX_LONGITUDE) {"},{"lineNumber":51,"author":{"gitID":"Sivalavida"},"content":"                return true;"},{"lineNumber":52,"author":{"gitID":"Sivalavida"},"content":"            }"},{"lineNumber":53,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Sivalavida"},"content":"        return false;"},{"lineNumber":55,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":57,"author":{"gitID":"Sivalavida"},"content":"    public String getValue() {"},{"lineNumber":58,"author":{"gitID":"Sivalavida"},"content":"        return value;"},{"lineNumber":59,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"Sivalavida"},"content":"                || (other instanceof Longitude // instanceof handles nulls"},{"lineNumber":70,"author":{"gitID":"Sivalavida"},"content":"                \u0026\u0026 this.value.equals(((Longitude) other).value)); // state check"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"Sivalavida"},"content":"}"}],"authorContributionMap":{"Sivalavida":58,"-":20}},{"path":"src/main/java/seedu/address/logic/recommender/RecommenderManager.java","lines":[{"lineNumber":1,"author":{"gitID":"lowjiajin"},"content":"package seedu.address.logic.recommender;"},{"lineNumber":2,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":4,"author":{"gitID":"lowjiajin"},"content":"import weka.classifiers.Classifier;"},{"lineNumber":5,"author":{"gitID":"lowjiajin"},"content":"import weka.core.Instances;"},{"lineNumber":6,"author":{"gitID":"lowjiajin"},"content":"import weka.filters.unsupervised.instance.RemoveWithValues;"},{"lineNumber":7,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":8,"author":{"gitID":"lowjiajin"},"content":"import java.io.BufferedReader;"},{"lineNumber":9,"author":{"gitID":"lowjiajin"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitID":"lowjiajin"},"content":"import java.io.FileReader;"},{"lineNumber":11,"author":{"gitID":"lowjiajin"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"lowjiajin"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class RecommenderManager {"},{"lineNumber":16,"author":{"gitID":"lowjiajin"},"content":"    private static final String MESSAGE_INVALID_ARFF_PATH \u003d \"%1$s does not refer to a valid ARFF file.\";"},{"lineNumber":17,"author":{"gitID":"lowjiajin"},"content":"    private static final String MESSAGE_ERROR_READING_ARFF \u003d \"Error reading ARFF, check file name and format.\";"},{"lineNumber":18,"author":{"gitID":"lowjiajin"},"content":"    private static final String MESSAGE_CANNOT_CLOSE_READER \u003d \"Cannot close ARFF reader, reader still in use.\";"},{"lineNumber":19,"author":{"gitID":"lowjiajin"},"content":"    private static final String MESSAGE_BAD_REMOVER_SETTINGS \u003d \"{@code WEKA_REMOVER_SETTINGS} has invalid value.\";"},{"lineNumber":20,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String WEKA_REMOVER_SETTINGS \u003d \"-S 0.0 -C last -L %1$d-%2$d -V -H\";"},{"lineNumber":22,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":23,"author":{"gitID":"lowjiajin"},"content":"    private String arffPath;"},{"lineNumber":24,"author":{"gitID":"lowjiajin"},"content":"    private BufferedReader reader;"},{"lineNumber":25,"author":{"gitID":"lowjiajin"},"content":"    private Instances orders;"},{"lineNumber":26,"author":{"gitID":"lowjiajin"},"content":"    private RemoveWithValues isolator;"},{"lineNumber":27,"author":{"gitID":"lowjiajin"},"content":"    private HashMap\u003cString, Classifier\u003e classifierDict;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e productsWithClassifiers;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Manages the training of the recommendations classifier, and its subsequent use on a new {@code person} ."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param arffPath the data folder where the .arff orders file is stored."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public RecommenderManager(String arffPath) {"},{"lineNumber":35,"author":{"gitID":"lowjiajin"},"content":"        setFilePath(arffPath);"},{"lineNumber":36,"author":{"gitID":"lowjiajin"},"content":"        parseOrdersFromFile();"},{"lineNumber":37,"author":{"gitID":"lowjiajin"},"content":"        trainRecommenderOnOrders();"},{"lineNumber":38,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":40,"author":{"gitID":"lowjiajin"},"content":"    public void setFilePath(String path) {"},{"lineNumber":41,"author":{"gitID":"lowjiajin"},"content":"        arffPath \u003d path;"},{"lineNumber":42,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Sends previously computed {@code classifierDict} to the Recommender logic to obtain a list of recommended buys"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * for the given {@code person}, for all the products with sufficient {@code orders} to make a recommendation."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public String getRecommendations(Person person) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Recommender recommender \u003d new Recommender();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return recommender.getRecommendations(productsWithClassifiers, person, classifierDict);"},{"lineNumber":51,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":53,"author":{"gitID":"lowjiajin"},"content":"    private void parseOrdersFromFile() {"},{"lineNumber":54,"author":{"gitID":"lowjiajin"},"content":"        getReaderFromArff();"},{"lineNumber":55,"author":{"gitID":"lowjiajin"},"content":"        getOrdersFromReader();"},{"lineNumber":56,"author":{"gitID":"lowjiajin"},"content":"        closeReader();"},{"lineNumber":57,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Adds a binary classifier (i.e. a yes/no recommender) for every product to {@code classifierDict}"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * iff a given {@code trainer} can successfully perform the classifier training."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"lowjiajin"},"content":"    private void trainRecommenderOnOrders() {"},{"lineNumber":64,"author":{"gitID":"lowjiajin"},"content":"        classifierDict \u003d new HashMap\u003c\u003e();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        productsWithClassifiers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":67,"author":{"gitID":"lowjiajin"},"content":"        // Obtain distinct classifiers for each product to determine if a customer would buy that specific product"},{"lineNumber":68,"author":{"gitID":"lowjiajin"},"content":"        int numOfProducts \u003d orders.classAttribute().numValues();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        for (int productNum \u003d 0; productNum \u003c numOfProducts; productNum +\u003d 2) {"},{"lineNumber":70,"author":{"gitID":"lowjiajin"},"content":"            initOrderIsolator(productNum);"},{"lineNumber":71,"author":{"gitID":"lowjiajin"},"content":"            ProductTrainer trainer \u003d new ProductTrainer(orders, isolator);"},{"lineNumber":72,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":73,"author":{"gitID":"lowjiajin"},"content":"            if (trainer.hasTrained()) {"},{"lineNumber":74,"author":{"gitID":"lowjiajin"},"content":"                addClassifier(productNum, trainer);"},{"lineNumber":75,"author":{"gitID":"lowjiajin"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"lowjiajin"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":79,"author":{"gitID":"lowjiajin"},"content":"    private void getReaderFromArff() {"},{"lineNumber":80,"author":{"gitID":"lowjiajin"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"lowjiajin"},"content":"            reader \u003d new BufferedReader(new FileReader(arffPath));"},{"lineNumber":82,"author":{"gitID":"lowjiajin"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":83,"author":{"gitID":"lowjiajin"},"content":"            System.out.println(String.format(MESSAGE_INVALID_ARFF_PATH, arffPath));"},{"lineNumber":84,"author":{"gitID":"lowjiajin"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":87,"author":{"gitID":"lowjiajin"},"content":"    private void getOrdersFromReader() {"},{"lineNumber":88,"author":{"gitID":"lowjiajin"},"content":"        try {"},{"lineNumber":89,"author":{"gitID":"lowjiajin"},"content":"            orders \u003d new Instances(reader);"},{"lineNumber":90,"author":{"gitID":"lowjiajin"},"content":"            orders.setClassIndex(orders.numAttributes() - 1);"},{"lineNumber":91,"author":{"gitID":"lowjiajin"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitID":"lowjiajin"},"content":"            System.out.println(MESSAGE_ERROR_READING_ARFF);"},{"lineNumber":93,"author":{"gitID":"lowjiajin"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":96,"author":{"gitID":"lowjiajin"},"content":"    private void closeReader() {"},{"lineNumber":97,"author":{"gitID":"lowjiajin"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"lowjiajin"},"content":"            reader.close();"},{"lineNumber":99,"author":{"gitID":"lowjiajin"},"content":"        } catch (IOException e) {"},{"lineNumber":100,"author":{"gitID":"lowjiajin"},"content":"            System.out.println(MESSAGE_CANNOT_CLOSE_READER);"},{"lineNumber":101,"author":{"gitID":"lowjiajin"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Subsamples from our {@code orders}, only including orders from a given product, for binary classification use."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @param productNum index referring to a specific product in Weka\u0027s Instances."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"lowjiajin"},"content":"    private void initOrderIsolator(int productNum) {"},{"lineNumber":109,"author":{"gitID":"lowjiajin"},"content":"        assert productNum \u003c orders.classAttribute().numValues();"},{"lineNumber":110,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":111,"author":{"gitID":"lowjiajin"},"content":"        isolator \u003d new RemoveWithValues();"},{"lineNumber":112,"author":{"gitID":"lowjiajin"},"content":"        try {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            isolator.setOptions(weka.core.Utils.splitOptions(String.format("},{"lineNumber":114,"author":{"gitID":"-"},"content":"                    WEKA_REMOVER_SETTINGS, productNum + 1, productNum + 2)));"},{"lineNumber":115,"author":{"gitID":"lowjiajin"},"content":"        } catch (Exception e) {"},{"lineNumber":116,"author":{"gitID":"lowjiajin"},"content":"            System.out.println(MESSAGE_BAD_REMOVER_SETTINGS);"},{"lineNumber":117,"author":{"gitID":"lowjiajin"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"lowjiajin"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Adds the new classifier in {@code trainer} to {@code classifierDict} and"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * records this addition in {@code productsWithClassifiers}"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"lowjiajin"},"content":"    private void addClassifier(int productNum, ProductTrainer trainer) {"},{"lineNumber":125,"author":{"gitID":"lowjiajin"},"content":"        String productId \u003d orders.classAttribute().value(productNum);"},{"lineNumber":126,"author":{"gitID":"lowjiajin"},"content":"        Classifier classifier \u003d trainer.getClassifier();"},{"lineNumber":127,"author":{"gitID":"lowjiajin"},"content":""},{"lineNumber":128,"author":{"gitID":"lowjiajin"},"content":"        // Every classifier should never overwrite an existing one in each training cycle, as productID is primary key."},{"lineNumber":129,"author":{"gitID":"lowjiajin"},"content":"        assert classifierDict.get(productId) \u003d\u003d null;"},{"lineNumber":130,"author":{"gitID":"lowjiajin"},"content":"        classifierDict.put(productId, classifier);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        productsWithClassifiers.add(productId);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lowjiajin":95,"-":38}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.order.exceptions.InvalidOrderException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":26,"author":{"gitID":"Sivalavida"},"content":"    private final Gender gender;"},{"lineNumber":27,"author":{"gitID":"Sivalavida"},"content":"    private final Age age;"},{"lineNumber":28,"author":{"gitID":"Sivalavida"},"content":"    private final Latitude latitude;"},{"lineNumber":29,"author":{"gitID":"Sivalavida"},"content":"    private final Longitude longitude;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final ArrayList\u003cOrder\u003e orders \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Sivalavida"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Gender gender,"},{"lineNumber":39,"author":{"gitID":"Sivalavida"},"content":"                  Age age, Latitude latitude, Longitude longitude, Set\u003cTag\u003e tags) {"},{"lineNumber":40,"author":{"gitID":"Sivalavida"},"content":"        requireAllNonNull(name, phone, email, address, gender, tags);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":45,"author":{"gitID":"Sivalavida"},"content":"        this.gender \u003d gender;"},{"lineNumber":46,"author":{"gitID":"Sivalavida"},"content":"        this.age \u003d age;"},{"lineNumber":47,"author":{"gitID":"Sivalavida"},"content":"        this.latitude \u003d latitude;"},{"lineNumber":48,"author":{"gitID":"Sivalavida"},"content":"        this.longitude \u003d longitude;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"Sivalavida"},"content":"    public Gender getGender() {"},{"lineNumber":70,"author":{"gitID":"Sivalavida"},"content":"        return gender;"},{"lineNumber":71,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":73,"author":{"gitID":"Sivalavida"},"content":"    public Latitude getLatitude() {"},{"lineNumber":74,"author":{"gitID":"Sivalavida"},"content":"        return latitude;"},{"lineNumber":75,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":77,"author":{"gitID":"Sivalavida"},"content":"    public Longitude getLongitude() {"},{"lineNumber":78,"author":{"gitID":"Sivalavida"},"content":"        return longitude;"},{"lineNumber":79,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":81,"author":{"gitID":"Sivalavida"},"content":"    public Age getAge() {"},{"lineNumber":82,"author":{"gitID":"Sivalavida"},"content":"        return age;"},{"lineNumber":83,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Adds order to list of orders"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @param order"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws InvalidOrderException throws exception if order is invalid"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void addOrder(Order order) throws InvalidOrderException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if(!order.isValid()) throw new InvalidOrderException();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        orders.add(order);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public ArrayList\u003cOrder\u003e getOrders() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return orders;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Get orders made equals or after to a certain time"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @param time"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @return orders after certain time"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public ArrayList\u003cOrder\u003e getOrdersSinceTime(LocalDateTime time) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ArrayList\u003cOrder\u003e ordersSinceTime \u003d new ArrayList\u003c\u003e();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        for(Order order : orders) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            if (order.getTime().compareTo(time) \u003e\u003d 0)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                ordersSinceTime.add(order);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return ordersSinceTime;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":135,"author":{"gitID":"Sivalavida"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":136,"author":{"gitID":"Sivalavida"},"content":"                \u0026\u0026 otherPerson.getGender().equals(this.getGender())"},{"lineNumber":137,"author":{"gitID":"Sivalavida"},"content":"                \u0026\u0026 otherPerson.getAge().equals(this.getAge())"},{"lineNumber":138,"author":{"gitID":"Sivalavida"},"content":"                \u0026\u0026 otherPerson.getLatitude().equals(this.getLatitude())"},{"lineNumber":139,"author":{"gitID":"Sivalavida"},"content":"                \u0026\u0026 otherPerson.getLongitude().equals(this.getLongitude())"},{"lineNumber":140,"author":{"gitID":"Sivalavida"},"content":"                ;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":146,"author":{"gitID":"Sivalavida"},"content":"        return Objects.hash(name, phone, email, address, gender, tags);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":159,"author":{"gitID":"Sivalavida"},"content":"                .append(\" Gender: \")"},{"lineNumber":160,"author":{"gitID":"Sivalavida"},"content":"                .append(getGender())"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":37,"-":130}},{"path":"src/main/java/seedu/address/model/person/Latitude.java","lines":[{"lineNumber":1,"author":{"gitID":"Sivalavida"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":3,"author":{"gitID":"Sivalavida"},"content":"import java.text.DecimalFormat;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Sivalavida"},"content":" * Represents a Person\u0027s Latitude in the Retail Analytics."},{"lineNumber":10,"author":{"gitID":"Sivalavida"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLatitude(String)}"},{"lineNumber":11,"author":{"gitID":"Sivalavida"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Sivalavida"},"content":"public class Latitude {"},{"lineNumber":13,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":14,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"Sivalavida"},"content":"     * The minimum allowed latitude"},{"lineNumber":16,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"Sivalavida"},"content":"    public static float MIN_LATITUDE \u003d Float.valueOf(\"-90.0000\");"},{"lineNumber":18,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":19,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"Sivalavida"},"content":"     * The maximum allowed latitude"},{"lineNumber":21,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Sivalavida"},"content":"    public static float MAX_LATITUDE \u003d Float.valueOf(\"90.0000\");"},{"lineNumber":23,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":24,"author":{"gitID":"Sivalavida"},"content":"    public static final String MESSAGE_LATITUDE_CONSTRAINTS \u003d"},{"lineNumber":25,"author":{"gitID":"Sivalavida"},"content":"            String.format(\"Latitude numbers must be a decimal value between %f and %f\", MIN_LATITUDE, MAX_LATITUDE);"},{"lineNumber":26,"author":{"gitID":"Sivalavida"},"content":"    public static final String LATITUDE_VALIDATION_REGEX \u003d \"-?\\\\d+\\\\.?\\\\d*\";"},{"lineNumber":27,"author":{"gitID":"Sivalavida"},"content":"    private static final DecimalFormat format \u003d new DecimalFormat(\"00.000000\");"},{"lineNumber":28,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":29,"author":{"gitID":"Sivalavida"},"content":"    public final String value;"},{"lineNumber":30,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":31,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"Sivalavida"},"content":"     * Constructs a {@code Latitude}."},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"Sivalavida"},"content":"     * @param latitude A valid latitude number."},{"lineNumber":35,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"Sivalavida"},"content":"    public Latitude(String latitude) {"},{"lineNumber":37,"author":{"gitID":"Sivalavida"},"content":"        requireNonNull(latitude);"},{"lineNumber":38,"author":{"gitID":"Sivalavida"},"content":"        checkArgument(isValidLatitude(latitude), MESSAGE_LATITUDE_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"Sivalavida"},"content":"        this.value \u003d format.format(Double.parseDouble(latitude));"},{"lineNumber":40,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"Sivalavida"},"content":"     * A method to validate a latitude value"},{"lineNumber":44,"author":{"gitID":"Sivalavida"},"content":"     * @param test the latitude to check is valid"},{"lineNumber":45,"author":{"gitID":"Sivalavida"},"content":"     * @return true if test is a decimal value and within the MIN and MAX latitude"},{"lineNumber":46,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"Sivalavida"},"content":"    public static boolean isValidLatitude(String test) {"},{"lineNumber":48,"author":{"gitID":"Sivalavida"},"content":"        if (test.matches(LATITUDE_VALIDATION_REGEX)) {"},{"lineNumber":49,"author":{"gitID":"Sivalavida"},"content":"            Float latitude \u003d Float.parseFloat(test);"},{"lineNumber":50,"author":{"gitID":"Sivalavida"},"content":"            if (latitude \u003e\u003d MIN_LATITUDE \u0026\u0026 latitude \u003c\u003d MAX_LATITUDE) {"},{"lineNumber":51,"author":{"gitID":"Sivalavida"},"content":"                return true;"},{"lineNumber":52,"author":{"gitID":"Sivalavida"},"content":"            }"},{"lineNumber":53,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Sivalavida"},"content":"        return false;"},{"lineNumber":55,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":57,"author":{"gitID":"Sivalavida"},"content":"    public String getValue() {"},{"lineNumber":58,"author":{"gitID":"Sivalavida"},"content":"        return value;"},{"lineNumber":59,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"Sivalavida"},"content":"                || (other instanceof Latitude // instanceof handles nulls"},{"lineNumber":70,"author":{"gitID":"Sivalavida"},"content":"                \u0026\u0026 this.value.equals(((Latitude) other).value)); // state check"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"Sivalavida"},"content":"}"}],"authorContributionMap":{"Sivalavida":58,"-":20}},{"path":"src/main/java/seedu/address/model/person/Gender.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Sivalavida"},"content":" * Represents a Person\u0027s gender in the retail analytics."},{"lineNumber":8,"author":{"gitID":"Sivalavida"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"},{"lineNumber":9,"author":{"gitID":"Sivalavida"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Sivalavida"},"content":"public class Gender {"},{"lineNumber":11,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":12,"author":{"gitID":"Sivalavida"},"content":"    public static final String MESSAGE_GENDER_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"Sivalavida"},"content":"            \"Gender should only be \u0027M\u0027 or \u0027F\u0027, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":15,"author":{"gitID":"Sivalavida"},"content":"    public static final String MALE_SHORTFORM \u003d \"M\";"},{"lineNumber":16,"author":{"gitID":"Sivalavida"},"content":"    public static final String FEMALE_SHORTFORM \u003d \"F\";"},{"lineNumber":17,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":18,"author":{"gitID":"Sivalavida"},"content":"    public String value;"},{"lineNumber":19,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":20,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"Sivalavida"},"content":"     * Constructs a {@code Gender}."},{"lineNumber":22,"author":{"gitID":"Sivalavida"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"Sivalavida"},"content":"     * @param gender A valid gender (ie \"M\" or \"F\") (case insensitive)."},{"lineNumber":24,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"Sivalavida"},"content":"    public Gender(String gender) {"},{"lineNumber":26,"author":{"gitID":"Sivalavida"},"content":"        requireNonNull(gender);"},{"lineNumber":27,"author":{"gitID":"Sivalavida"},"content":"        checkArgument(isValidGender(gender), MESSAGE_GENDER_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"Sivalavida"},"content":"        setGender(gender);"},{"lineNumber":29,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":31,"author":{"gitID":"Sivalavida"},"content":"    private void setGender(String gender) {"},{"lineNumber":32,"author":{"gitID":"Sivalavida"},"content":"        assert isValidGender(gender);"},{"lineNumber":33,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":34,"author":{"gitID":"Sivalavida"},"content":"        String genderUpperCase \u003d gender.toUpperCase();"},{"lineNumber":35,"author":{"gitID":"Sivalavida"},"content":"        if(genderUpperCase.equals(MALE_SHORTFORM)){"},{"lineNumber":36,"author":{"gitID":"Sivalavida"},"content":"            value \u003d MALE_SHORTFORM;"},{"lineNumber":37,"author":{"gitID":"Sivalavida"},"content":"        } else if(genderUpperCase.equals(FEMALE_SHORTFORM)){"},{"lineNumber":38,"author":{"gitID":"Sivalavida"},"content":"            value \u003d FEMALE_SHORTFORM;"},{"lineNumber":39,"author":{"gitID":"Sivalavida"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":42,"author":{"gitID":"Sivalavida"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"Sivalavida"},"content":"     * Returns true if a given string is a valid person gender."},{"lineNumber":44,"author":{"gitID":"Sivalavida"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"Sivalavida"},"content":"    public static boolean isValidGender(String test) {"},{"lineNumber":46,"author":{"gitID":"Sivalavida"},"content":"        String testUpperCase \u003d test.toUpperCase();"},{"lineNumber":47,"author":{"gitID":"Sivalavida"},"content":"        return testUpperCase.equals(MALE_SHORTFORM) || testUpperCase.equals(FEMALE_SHORTFORM);"},{"lineNumber":48,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":50,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":51,"author":{"gitID":"Sivalavida"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"Sivalavida"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitID":"Sivalavida"},"content":"        return value;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"Sivalavida"},"content":"                || (other instanceof Gender // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"Sivalavida"},"content":"                \u0026\u0026 this.value.equals(((Gender) other).value)); // state check"},{"lineNumber":61,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":63,"author":{"gitID":"Sivalavida"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"Sivalavida"},"content":"    public int hashCode() {"},{"lineNumber":65,"author":{"gitID":"Sivalavida"},"content":"        return value.hashCode();"},{"lineNumber":66,"author":{"gitID":"Sivalavida"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Sivalavida"},"content":""},{"lineNumber":68,"author":{"gitID":"Sivalavida"},"content":"}"}],"authorContributionMap":{"Sivalavida":57,"-":11}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.product.Product;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.product.UniqueProductList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.product.exceptions.DuplicateProductException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.product.exceptions.ProductNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final UniqueProductList products;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        products \u003d new UniqueProductList();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setProducts(List\u003cProduct\u003e products) throws DuplicateProductException{"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.products.setProducts(products);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        List\u003cProduct\u003e syncedProductList \u003d newData.getProductList().stream()"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            setProducts(syncedProductList);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        } catch (DuplicateProductException ep) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate products\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":108,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":129,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":147,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":150,"author":{"gitID":"Sivalavida"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), person.getGender(),"},{"lineNumber":151,"author":{"gitID":"Sivalavida"},"content":"                person.getAge(), person.getLatitude(), person.getLongitude(), correctTagReferences);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    //// product-level operations"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Adds a product to the address book."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void addProduct(Product p) throws DuplicateProductException {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        //Product product \u003d syncWithMasterTagList(p);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        //Maybe need to synchronize with CategoryList in the future."},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":177,"author":{"gitID":"-"},"content":"        products.add(p);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * @throws ProductNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public boolean removeProduct(Product key) throws ProductNotFoundException {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        if (products.remove(key)) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            throw new ProductNotFoundException();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public ObservableList\u003cProduct\u003e getProductList() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        return products.asObservableList();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":225,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sivalavida":2,"-":232}}]
