var resultJson = [{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"AdityaA1998"},"content":"\u003d ProgressChecker"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-T09-B3/main[image:https://travis-ci.org/CS2103JAN2018-T09-B3/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-T09-B3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-T09-B3/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"Missed a learning outcome because it was so deeply nested in the pool of information? Can\u0027t find the information you need from just a simple click? We know how that feels. With our Progress Checker, you\u0027ll never experience these issues in CS2103/T again."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"* This is a desktop Progress Checker application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":18,"author":{"gitID":"-"},"content":"* It is a Java sample application intended for students taking module CS2103/T as a means of tracking both their learning outcomes and practice exercises."},{"lineNumber":19,"author":{"gitID":"-"},"content":"* It is meant to be a helper software used together with the https://nus-cs2103-ay1718s2.github.io/website/index.html[official CS2103/T module website]."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":31,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4], https://developers.google.com/google-apps/tasks[Tasks]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"* This project was built off from AddressBook-Level4 project created by https://github.com/se-edu/[SE-EDU] initiative."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"AdityaA1998":1,"-":34}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"AdityaA1998"},"content":"\u003d ProgressChecker - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-T09-B3/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team T09-B3`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"ProgressChecker is for *CS2103/T students* who *prefer to use a desktop app* to keep track of their learning progress throughout the module. More importantly, ProgressChecker is *optimized for students who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ProgressChecker can get your learning outcome tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"Getting started with ProgressChecker is as easy as downloading and launching the software in a couple of clicks! Listed below are the important steps that you will need to follow to get started:"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":27,"author":{"gitID":"-"},"content":"+"},{"lineNumber":28,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":29,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":30,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Download the latest `progresschecker.jar` link:{repoURL}/releases[here]."},{"lineNumber":33,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your ProgressChecker."},{"lineNumber":34,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":37,"author":{"gitID":"-"},"content":"+"},{"lineNumber":38,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"The viewing of learning outcomes and exercises are not ready yet! Currently, only some of week 11\u0027s exercises are reflected."},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":42,"author":{"gitID":"-"},"content":"+"},{"lineNumber":43,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":44,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"You can type a command and press `Tab` to auto bring out all the command parameters."},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com m/Computer Science y/2` : adds a contact named `John Doe` to the Address Book. He is in his 2nd year majoring in computer engineering."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"* **`+issue`**`ti/TestIssue` : creates an issue on github in the team repo"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"* *`nl`* : adds the default TODO list"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"* *`vt`* : views the TODO list"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"* **`ct`**`3` : mark task No.3 as completed"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"* **`rt`**`3` : reset task No.3 as incompleted"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* **`ans`**`11.1.1 sample answer` : answer exercise 11.1.1 with `sample answer`"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":71,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"You may find having to learn a large new number of commands rather intimidating. The section below specifies all the commands in details with examples to help you overcome that learning curve and let you make the best out of ProgressChecker."},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":76,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"* The commands are case-insensitive. However, for simplicity all the examples have the commands in lower case."},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"* You can auto-complete any command by pressing tab key."},{"lineNumber":80,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":81,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":82,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":83,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":84,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a teammate: `add OR a`"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"Adds a teammate to the ProgressChecker +"},{"lineNumber":89,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL m/MAJOR y/YEAR [t/TAG]...` +"},{"lineNumber":90,"author":{"gitID":"-"},"content":"`OR` +"},{"lineNumber":91,"author":{"gitID":"-"},"content":"`a n/NAME p/PHONE_NUMBER e/EMAIL m/MAJOR y/YEAR [t/TAG]...`"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":94,"author":{"gitID":"-"},"content":"A teammate can have any number of tags (including 0)"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com m/Computer Science y/2`"},{"lineNumber":99,"author":{"gitID":"-"},"content":"* `a n/John Doe p/98765432 e/johnd@example.com m/Computer Science y/2`"},{"lineNumber":100,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com m/Computer Engineering p/1234567 y/3 t/criminal`"},{"lineNumber":101,"author":{"gitID":"-"},"content":"* `a n/Betsy Crowe t/friend e/betsycrowe@example.com m/Information Security y/2 p/1234567 t/criminal`"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Answering and saving an exercise : `answer` `[since v1.4rc]`"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"Answer an exercise based off the given question number. +"},{"lineNumber":106,"author":{"gitID":"-"},"content":"Format: `answer INDEX ANSWER`"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"****"},{"lineNumber":109,"author":{"gitID":"-"},"content":"* Answer an exercise at the specified `INDEX`."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* The index refers to the question number."},{"lineNumber":111,"author":{"gitID":"-"},"content":"* The index must be of format `section number`.`question number`, 2.1.1, 3.2.5, 6.1.7"},{"lineNumber":112,"author":{"gitID":"-"},"content":"****"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"* `answer 2.1.1 Procedural languages work at simple data structures and functions level`"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Logging into Github: `gitlogin OR gl`"},{"lineNumber":119,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":120,"author":{"gitID":"AdityaA1998"},"content":"Creates an issue on github in the team repo +"},{"lineNumber":121,"author":{"gitID":"AdityaA1998"},"content":"Format: `gitlogin gu/USERNAME pc/PASSWORD r/REPO` +"},{"lineNumber":122,"author":{"gitID":"AdityaA1998"},"content":"OR +"},{"lineNumber":123,"author":{"gitID":"AdityaA1998"},"content":"`gl gu/USERNAME pc/PASSWORD r/REPOSITORY`"},{"lineNumber":124,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":125,"author":{"gitID":"AdityaA1998"},"content":"[TIP]"},{"lineNumber":126,"author":{"gitID":"AdityaA1998"},"content":"Your git details are not saved in our app for sercurity reasons. Hence, you will need to login everytime you start the software. +"},{"lineNumber":127,"author":{"gitID":"AdityaA1998"},"content":"You need to login and mention the repo where you need to create/edit issues."},{"lineNumber":128,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":129,"author":{"gitID":"AdityaA1998"},"content":"Examples:"},{"lineNumber":130,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":131,"author":{"gitID":"AdityaA1998"},"content":"* `gitlogin gu/johndoe pc/dummy123 r/CS2103T/main`"},{"lineNumber":132,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":133,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Creating an issue on Github: `+issue OR ci`"},{"lineNumber":134,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":135,"author":{"gitID":"AdityaA1998"},"content":"Creates an issue on github in the team repo +"},{"lineNumber":136,"author":{"gitID":"AdityaA1998"},"content":"Format: `+issue ti/TITLE [a/ASSIGNEES]... [ms/MILESTONE] [b/BODY] [l/LABELS]...` +"},{"lineNumber":137,"author":{"gitID":"AdityaA1998"},"content":"OR +"},{"lineNumber":138,"author":{"gitID":"AdityaA1998"},"content":"`ci ti/TITLE [a/ASSIGNEES]... [ms/MILESTONE] [b/BODY] [l/LABELS]...`"},{"lineNumber":139,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":140,"author":{"gitID":"AdityaA1998"},"content":"[TIP]"},{"lineNumber":141,"author":{"gitID":"AdityaA1998"},"content":"An issue has only \u0027title\u0027 field as compulsory. Rest are all optional. +"},{"lineNumber":142,"author":{"gitID":"AdityaA1998"},"content":"An issue can have more than one assignees and labels."},{"lineNumber":143,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":144,"author":{"gitID":"AdityaA1998"},"content":"Examples:"},{"lineNumber":145,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":146,"author":{"gitID":"AdityaA1998"},"content":"* `+issue ti/complete issue a/johndoe ms/v1.1 b/CS2103T is a software engineering module l/type.task l/CS2103T`"},{"lineNumber":147,"author":{"gitID":"AdityaA1998"},"content":"* `+issue ti/TestIssue`"},{"lineNumber":148,"author":{"gitID":"AdityaA1998"},"content":"* `ci ti/Issue with only body b/test body l/type.test`"},{"lineNumber":149,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":150,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Closing an issue on Github: `-issue OR cli`"},{"lineNumber":151,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":152,"author":{"gitID":"AdityaA1998"},"content":"Closes an issue on github +"},{"lineNumber":153,"author":{"gitID":"AdityaA1998"},"content":"Format: `-issue INDEX` +"},{"lineNumber":154,"author":{"gitID":"AdityaA1998"},"content":"`OR` +"},{"lineNumber":155,"author":{"gitID":"AdityaA1998"},"content":"`cli INDEX`"},{"lineNumber":156,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":157,"author":{"gitID":"AdityaA1998"},"content":"[TIP]"},{"lineNumber":158,"author":{"gitID":"AdityaA1998"},"content":"`INDEX` refers to the #INDEX of an issue on github"},{"lineNumber":159,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":160,"author":{"gitID":"AdityaA1998"},"content":"Examples:"},{"lineNumber":161,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":162,"author":{"gitID":"AdityaA1998"},"content":"* `-issue 1`"},{"lineNumber":163,"author":{"gitID":"AdityaA1998"},"content":"* `cli 3`"},{"lineNumber":164,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":165,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Reopening an issue on Github: `reopenissue OR ri`"},{"lineNumber":166,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":167,"author":{"gitID":"AdityaA1998"},"content":"Reopens an issue on github +"},{"lineNumber":168,"author":{"gitID":"AdityaA1998"},"content":"Format: `reopenissue INDEX` +"},{"lineNumber":169,"author":{"gitID":"AdityaA1998"},"content":"`OR` +"},{"lineNumber":170,"author":{"gitID":"AdityaA1998"},"content":"`ri INDEX`"},{"lineNumber":171,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":172,"author":{"gitID":"AdityaA1998"},"content":"[TIP]"},{"lineNumber":173,"author":{"gitID":"AdityaA1998"},"content":"`INDEX` refers to the #INDEX of an issue on github"},{"lineNumber":174,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":175,"author":{"gitID":"AdityaA1998"},"content":"Examples:"},{"lineNumber":176,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":177,"author":{"gitID":"AdityaA1998"},"content":"* `reopenissue 1`"},{"lineNumber":178,"author":{"gitID":"AdityaA1998"},"content":"* `reopenissue 3`"},{"lineNumber":179,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear OR c`"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"Clear all information inside the ProgressChecker. +"},{"lineNumber":183,"author":{"gitID":"-"},"content":"Format: `clear OR c`"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"* `clear`"},{"lineNumber":188,"author":{"gitID":"-"},"content":"* `c`"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding the default TODO list: `newtasklist OR nl`"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"Adds the default TODO list to the ProgressChecker and your Google Tasks+"},{"lineNumber":193,"author":{"gitID":"-"},"content":"Format: `newtasklist` +"},{"lineNumber":194,"author":{"gitID":"-"},"content":"`OR` +"},{"lineNumber":195,"author":{"gitID":"-"},"content":"`nl`"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":198,"author":{"gitID":"-"},"content":"The command requires Internet connection. You may be brought to a login page in your browser. Please do not close the tab without accepting/declining request,"},{"lineNumber":199,"author":{"gitID":"-"},"content":"otherwise the application will hang."},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"* `newtasklist`"},{"lineNumber":204,"author":{"gitID":"-"},"content":"* `nl`"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing the default TODO list: `viewtask OR vt`"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"Dispays the current default TODO list to the browser panel in ProgressChecker+"},{"lineNumber":209,"author":{"gitID":"-"},"content":"Format: `viewtask` +"},{"lineNumber":210,"author":{"gitID":"-"},"content":"`OR` +"},{"lineNumber":211,"author":{"gitID":"-"},"content":"`vt`"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":214,"author":{"gitID":"-"},"content":"The command requires Internet connection. You may be brought to a login page in your browser. Please do not close the tab without accepting/declining request,"},{"lineNumber":215,"author":{"gitID":"-"},"content":"otherwise the application will hang."},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"* `viewtask`"},{"lineNumber":220,"author":{"gitID":"-"},"content":"* `vt`"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Marking a task as completed: `complete OR ct`"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"Mark a task as completed+"},{"lineNumber":225,"author":{"gitID":"-"},"content":"Format: `complete INDEX` +"},{"lineNumber":226,"author":{"gitID":"-"},"content":"`OR` +"},{"lineNumber":227,"author":{"gitID":"-"},"content":"`ct INDEX`"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"****"},{"lineNumber":230,"author":{"gitID":"-"},"content":"* Mark the task with index number `INDEX` as completed."},{"lineNumber":231,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":232,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":233,"author":{"gitID":"-"},"content":"****"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":236,"author":{"gitID":"-"},"content":"The command requires Internet connection. You may be brought to a login page in your browser. Please do not close the tab without accepting/declining request,"},{"lineNumber":237,"author":{"gitID":"-"},"content":"otherwise the application will hang."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"* `complete 3`"},{"lineNumber":242,"author":{"gitID":"-"},"content":"* `ct 3`"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Resetting a task as incompleted: `reset OR rt`"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"Reset a task as incompleted+"},{"lineNumber":247,"author":{"gitID":"-"},"content":"Format: `reset INDEX` +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"`OR` +"},{"lineNumber":249,"author":{"gitID":"-"},"content":"`rt INDEX`"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"****"},{"lineNumber":252,"author":{"gitID":"-"},"content":"* Reset the task with index number `INDEX` as incompleted."},{"lineNumber":253,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":254,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":255,"author":{"gitID":"-"},"content":"****"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"The command requires Internet connection. You may be brought to a login page in your browser. Please do not close the tab without accepting/declining request,"},{"lineNumber":259,"author":{"gitID":"-"},"content":"otherwise the application will hang."},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"* `reset 3`"},{"lineNumber":264,"author":{"gitID":"-"},"content":"* `rt 3`"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a teammate : `delete or d`"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"Deletes the specified teammate from the ProgressChecker. +"},{"lineNumber":269,"author":{"gitID":"-"},"content":"Format: `delete INDEX OR d INDEX`"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"****"},{"lineNumber":272,"author":{"gitID":"-"},"content":"* Deletes the teammate at the specified `INDEX`."},{"lineNumber":273,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":274,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":275,"author":{"gitID":"-"},"content":"****"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":280,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":281,"author":{"gitID":"-"},"content":"Deletes the 2nd teammate in the ProgressChecker."},{"lineNumber":282,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":283,"author":{"gitID":"-"},"content":"`d 1` +"},{"lineNumber":284,"author":{"gitID":"-"},"content":"Deletes the 1st teammate in the results of the `find` command."},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a teammate : `edit OR ed`"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"Edits an existing teammate in the ProgressChecker. +"},{"lineNumber":289,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":290,"author":{"gitID":"-"},"content":"`OR` +"},{"lineNumber":291,"author":{"gitID":"-"},"content":"`ed INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"****"},{"lineNumber":294,"author":{"gitID":"-"},"content":"* Edits the teammate at the specified `INDEX`. The index refers to the index number shown in the last teammate listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":295,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":296,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":297,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the teammate will be removed i.e adding of tags is not cumulative."},{"lineNumber":298,"author":{"gitID":"-"},"content":"* You can remove all the teammate\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":299,"author":{"gitID":"-"},"content":"****"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":304,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st teammate to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":305,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":306,"author":{"gitID":"-"},"content":"Edits the name of the 2nd teammate to be `Betsy Crower` and clears all existing tags."},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit OR e`"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":311,"author":{"gitID":"-"},"content":"Format: `exit OR e`"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"* `exit`"},{"lineNumber":316,"author":{"gitID":"-"},"content":"* `e`"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Finding/Searching teammates by the keywords of name: `find OR search`"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"Finds teammates whose names contain any of the given keywords. +"},{"lineNumber":321,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS] OR search KEYWORD {MORE_KEYWORDS]`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"****"},{"lineNumber":324,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":325,"author":{"gitID":"AdityaA1998"},"content":"* The search is dynamic. As the user types alphabets, the results will be shown without the need to press enter key"},{"lineNumber":326,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":328,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":329,"author":{"gitID":"-"},"content":"* Teammates matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":330,"author":{"gitID":"-"},"content":"****"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":335,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":336,"author":{"gitID":"-"},"content":"* `search Betsy Tim John` +"},{"lineNumber":337,"author":{"gitID":"-"},"content":"Returns any teammate having names `Betsy`, `Tim`, or `John`"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Helping user with User Guide : `help OR h`"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"Format: `help OR h`"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"* `help`"},{"lineNumber":346,"author":{"gitID":"-"},"content":"* `h`"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d History viewing the list of entered commands : `history`"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":351,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":354,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":355,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":356,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":"* `history`"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all teammates : `list OR l`"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"Shows a list of all teammates in the ProgressChecker. +"},{"lineNumber":365,"author":{"gitID":"-"},"content":"Format: `list OR l`"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"* `list`"},{"lineNumber":370,"author":{"gitID":"-"},"content":"* `l`"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":373,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo OR r`"},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":376,"author":{"gitID":"-"},"content":"Format: `redo OR r`"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":381,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":382,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command)"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":385,"author":{"gitID":"-"},"content":"`r` +"},{"lineNumber":386,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":389,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":390,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":391,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":392,"author":{"gitID":"-"},"content":"`r` (reapplies the `delete 1` command) +"},{"lineNumber":393,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command)"},{"lineNumber":394,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Refreshing the content : `refresh OR rf` `[coming in v2.0]`"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"Refreshes the program to update its content. +"},{"lineNumber":399,"author":{"gitID":"-"},"content":"Format: `refresh`"},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"* `refresh`"},{"lineNumber":404,"author":{"gitID":"-"},"content":"* `rf`"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a teammate : `select OR s`"},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"-"},"content":"Selects the teammate identified by the index number used in the last teammate listing. +"},{"lineNumber":409,"author":{"gitID":"-"},"content":"Format: `select INDEX OR s INDEX`"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"****"},{"lineNumber":412,"author":{"gitID":"-"},"content":"* Selects the teammate and loads the Google search page the teammate at the specified `INDEX`."},{"lineNumber":413,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":414,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":415,"author":{"gitID":"-"},"content":"****"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":420,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":421,"author":{"gitID":"-"},"content":"Selects the 2nd teammate in the ProgressChecker."},{"lineNumber":422,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":423,"author":{"gitID":"-"},"content":"`s 1` +"},{"lineNumber":424,"author":{"gitID":"-"},"content":"Selects the 1st teammate in the results of the `find` command."},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sorting all teammates : `sort`"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"Sorts all teammates in the ProgressChecker with their names in alphabetical order. +"},{"lineNumber":429,"author":{"gitID":"-"},"content":"Format: `sort`"},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"Example："},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"* `sort`"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Toggling theme : `theme OR t` `[coming in v2.0]`"},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":"Toggle between a light and dark theme. +"},{"lineNumber":438,"author":{"gitID":"-"},"content":"Format: `theme OR t`"},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"* `theme`"},{"lineNumber":443,"author":{"gitID":"-"},"content":"* `t`"},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":446,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo OR u`"},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"Restores the ProgressChecker to the state before the previous _undoable_ command was executed. +"},{"lineNumber":449,"author":{"gitID":"-"},"content":"Format: `undo OR u`"},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":452,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":453,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the ProgressChecker\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":454,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":459,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":460,"author":{"gitID":"-"},"content":"`u` (reverses the `delete 1` command)"},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":463,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":464,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":465,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":466,"author":{"gitID":"-"},"content":""},{"lineNumber":467,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":468,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":469,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":470,"author":{"gitID":"-"},"content":"`u` (reverses the `delete 1` command)"},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"Progress Checker data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":475,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":476,"author":{"gitID":"-"},"content":""},{"lineNumber":477,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":478,"author":{"gitID":"-"},"content":""},{"lineNumber":479,"author":{"gitID":"-"},"content":"You may encounter some questions related to other aspects of ProgressChecker other than the commands. This section list some frequently asked questions that you may find useful."},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":482,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Progress Checker folder. +"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"*Q*: Will the command work if I type in capital letters? +"},{"lineNumber":485,"author":{"gitID":"-"},"content":"*A*: Yes. The commands are case-insenstive. +"},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"*Q*: Will the app keep all information the same with the time I close it when I open the app the other time? +"},{"lineNumber":488,"author":{"gitID":"-"},"content":"*A*: All data are saved in the hard disk automatically after any command that changes the data. As long as the user doesn\u0027t change the data file, the content will be the same when user open the app next time. +"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"*Q*: How to close the app? +"},{"lineNumber":491,"author":{"gitID":"-"},"content":"*A*: Either click the \u0027x\u0027 button on the screen or type command `exit`."},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":"If you\u0027re looking for a quick reference list of commands without all the details, the section below summarises all the available commands."},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"-"},"content":"* *Add* : `add n/NAME p/PHONE_NUMBER e/EMAIL m/MAJOR y/YEAR [t/TAG]...` +"},{"lineNumber":498,"author":{"gitID":"-"},"content":"OR `a n/NAME p/PHONE_NUMBER e/EMAIL m/MAJOR y/YEAR [t/TAG]...` +"},{"lineNumber":499,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com m/Computer Science y/2 t/friend t/colleague`"},{"lineNumber":500,"author":{"gitID":"-"},"content":"* *Answer* : `answer INDEX ANSWER` +"},{"lineNumber":501,"author":{"gitID":"-"},"content":"e.g. `answer 2.1.1`"},{"lineNumber":502,"author":{"gitID":"AdityaA1998"},"content":"* *Create issue* : `+issue ti/TITLE [a/ASSIGNEES]... [ms/MILESTONE] [b/BODY] [l/LABELS]...` +"},{"lineNumber":503,"author":{"gitID":"AdityaA1998"},"content":"                   OR +"},{"lineNumber":504,"author":{"gitID":"AdityaA1998"},"content":"                   `ci ti/TITLE [a/ASSIGNEES]... [ms/MILESTONE] [b/BODY] [l/LABELS]...` +"},{"lineNumber":505,"author":{"gitID":"AdityaA1998"},"content":"e.g. `+issue ti/complete issue a/johndoe ms/v1.1 b/CS2103T is a software engineering module l/type.task l/CS2103T`"},{"lineNumber":506,"author":{"gitID":"AdityaA1998"},"content":"* *Close issue* : `-issue INDEX` OR `cli INDEX` +"},{"lineNumber":507,"author":{"gitID":"AdityaA1998"},"content":"e.g. `-issue 3` +"},{"lineNumber":508,"author":{"gitID":"AdityaA1998"},"content":"OR `cli 1`"},{"lineNumber":509,"author":{"gitID":"AdityaA1998"},"content":"* *Reopen issue* : `reopenissue INDEX` OR `ri INDEX` +"},{"lineNumber":510,"author":{"gitID":"AdityaA1998"},"content":"e.g. `reopenissue 3` +"},{"lineNumber":511,"author":{"gitID":"AdityaA1998"},"content":"OR `ri 1`"},{"lineNumber":512,"author":{"gitID":"-"},"content":"* *Clear* : `clear` OR `c`"},{"lineNumber":513,"author":{"gitID":"-"},"content":"* *Complete* : `complete INDEX` +"},{"lineNumber":514,"author":{"gitID":"-"},"content":"e.g. `complete 2.1`"},{"lineNumber":515,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` OR `d INDEX` +"},{"lineNumber":516,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":517,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [m/MAJOR] [y/YEAR] [t/TAG]...` +"},{"lineNumber":518,"author":{"gitID":"-"},"content":"OR `ed INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [m/MAJOR] [y/YEAR] [t/TAG]...` +"},{"lineNumber":519,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":520,"author":{"gitID":"-"},"content":"* *Exit* : `exit` OR `e`"},{"lineNumber":521,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":522,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":523,"author":{"gitID":"-"},"content":"* *Help* : `help` OR `h`"},{"lineNumber":524,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":525,"author":{"gitID":"-"},"content":"* *List* : `list` Or `l`"},{"lineNumber":526,"author":{"gitID":"-"},"content":"* *Newtasklist* : `newtasklist` OR `nl`"},{"lineNumber":527,"author":{"gitID":"-"},"content":"* *Redo* : `redo` OR `r`"},{"lineNumber":528,"author":{"gitID":"-"},"content":"* *Refresh* : `refresh` OR `rf`"},{"lineNumber":529,"author":{"gitID":"-"},"content":"* *Search* : `search KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":530,"author":{"gitID":"-"},"content":"e.g. `search James Jake`"},{"lineNumber":531,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` OR `s INDEX` +"},{"lineNumber":532,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":533,"author":{"gitID":"-"},"content":"* *Sort* : `sort`"},{"lineNumber":534,"author":{"gitID":"-"},"content":"* *Theme* : `theme` OR `t`"},{"lineNumber":535,"author":{"gitID":"-"},"content":"* *Undo* : `undo` OR `u`"},{"lineNumber":536,"author":{"gitID":"-"},"content":"* *View* : `view INDEX` OR `v INDEX` +"},{"lineNumber":537,"author":{"gitID":"-"},"content":"e.g. `view 5` +"},{"lineNumber":538,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"Back to \u003c\u003cIntroduction\u003e\u003e"}],"authorContributionMap":{"AdityaA1998":76,"-":464}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"ProgressChecker was developed by the https://github.com/CS2103JAN2018-T09-B3/main[T09-B3] team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"ProgressChecker helps to remind students learning outcomes every week. +"},{"lineNumber":8,"author":{"gitID":"-"},"content":"With a simple click, students will never miss their weekly LOs again. +"},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":"It also keeps track of the progress of each team member. +"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"Thus it is convenient for teammates to compare help each other. +"},{"lineNumber":11,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":12,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Aditya Agarwal"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"image::adityaa1998.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"{empty}[http://github.com/adityaa1998[github]] [\u003c\u003caditya#, portfolio\u003e\u003e]"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"Role: Team Lead +"},{"lineNumber":23,"author":{"gitID":"-"},"content":"Responsibilities: Integration, code quality"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Lai Liwen"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"image::livian1107.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"{empty}[https://github.com/Livian1107[github]] [\u003c\u003cliwen#, portfolio\u003e\u003e]"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Responsibilities: UI + Documentation + Testing(helper)"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Koh Yee Ru"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"image::inekox3.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"{empty}[http://github.com/inekox3[github]] [\u003c\u003cyeeru#, portfolio\u003e\u003e]"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":41,"author":{"gitID":"-"},"content":"Responsibilities: Logic + Scheduling \u0026 Tracking + Deliverables \u0026 Deadlines"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"\u003d\u003d\u003d Kang Anmin"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"image::edwardksg.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"{empty}[https://github.com/EdwardKSG[github]] [\u003c\u003canmin#, portfolio\u003e\u003e]"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"Responsibilities: Model + Testing + Scheduling \u0026 Tracking(helper)"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"EdwardKSG":11,"iNekox3":1,"-":40}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ClearCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends ProgressCheckerSystemTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty ProgressChecker, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":21,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        /* Case: undo clearing ProgressChecker -\u003e original ProgressChecker restored */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* Case: redo clearing ProgressChecker -\u003e cleared */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        /* Case: selects first card in person list and clears ProgressChecker -\u003e cleared and no card selected */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original ProgressChecker"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire ProgressChecker cleared */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original ProgressChecker"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: clear empty ProgressChecker -\u003e cleared */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: mixed case command word -\u003e cleared */"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandSuccess(\"ClEaR\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":2,"-":100}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TestUtil.getLastIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TestUtil.getMidIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TestUtil.getPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends ProgressCheckerSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: delete the middle person in the list, command in mixed casing -\u003e deleted */"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"        Model modelBeforeDeletingLastPerson \u003d getModel();"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"        Index lastPersonNewIndex \u003d getLastIndex(modelBeforeDeletingLastPerson);"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"        Model expectedNewModel \u003d getModel();"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"        Person deletedNewPerson \u003d removePerson(expectedNewModel, lastPersonNewIndex);"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"        String expectedNewResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedNewPerson);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"                \"delETE\" + \" \" + lastPersonNewIndex.getOneBased(), expectedNewModel, expectedNewResultMessage);"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of ProgressChecker and person list -\u003e deleted */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of ProgressChecker but out of bounds of person list"},{"lineNumber":78,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":79,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getProgressChecker().getPersonList().size();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":110,"author":{"gitID":"-"},"content":"                getModel().getProgressChecker().getPersonList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s ProgressChecker."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":147,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":8,"-":199}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"//import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"//import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.ALICE;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.AMY;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.BOB;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.CARL;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.HOON;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.IDA;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AddCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"//import seedu.progresschecker.model.person.Major;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"//import seedu.progresschecker.model.person.Year;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.PersonBuilder;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.PersonUtil;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends ProgressCheckerSystemTest {"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty ProgressChecker, command with leading spaces and trailing"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         * spaces"},{"lineNumber":75,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":76,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":79,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + USERNAME_DESC_AMY + \"   \" + MAJOR_DESC_AMY + \"   \""},{"lineNumber":80,"author":{"gitID":"-"},"content":"                + YEAR_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the ProgressChecker except name -\u003e added */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .withUsername(VALID_USERNAME_AMY).withMajor(VALID_MAJOR_AMY).withYear(VALID_YEAR_AMY)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the ProgressChecker except phone -\u003e added */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .withUsername(VALID_USERNAME_AMY).withMajor(VALID_MAJOR_AMY).withYear(VALID_YEAR_AMY)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the ProgressChecker except email -\u003e added */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .withUsername(VALID_USERNAME_AMY).withMajor(VALID_MAJOR_AMY).withYear(VALID_YEAR_AMY)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + USERNAME_DESC_AMY"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":119,"author":{"gitID":"EdwardKSG"},"content":"        /* Case: add a person with all fields same as another person in the ProgressChecker except major -\u003e added */"},{"lineNumber":120,"author":{"gitID":"EdwardKSG"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":121,"author":{"gitID":"EdwardKSG"},"content":"                .withUsername(VALID_USERNAME_AMY).withMajor(VALID_MAJOR_BOB).withYear(VALID_YEAR_AMY)"},{"lineNumber":122,"author":{"gitID":"EdwardKSG"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":123,"author":{"gitID":"EdwardKSG"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":124,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":125,"author":{"gitID":"EdwardKSG"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":126,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: add to empty ProgressChecker -\u003e added */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + USERNAME_DESC_BOB;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // ProgressChecker#addPerson(Person)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":182,"author":{"gitID":"EdwardKSG"},"content":"        /* Case: missing username -\u003e rejected */"},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":"        /* Case: missing major -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"EdwardKSG"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":189,"author":{"gitID":"EdwardKSG"},"content":"                + YEAR_DESC_AMY;"},{"lineNumber":190,"author":{"gitID":"EdwardKSG"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":191,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: missing year -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /*command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + MAJOR_DESC_AMY;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));*/"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + USERNAME_DESC_AMY"},{"lineNumber":213,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":217,"author":{"gitID":"EdwardKSG"},"content":"        /* Case: invalid username -\u003e rejected */"},{"lineNumber":218,"author":{"gitID":"EdwardKSG"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_USERNAME_DESC"},{"lineNumber":219,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":220,"author":{"gitID":"EdwardKSG"},"content":"        assertCommandFailure(command, GithubUsername.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":221,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":225,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":26,"-":275}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.SelectCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends ProgressCheckerSystemTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":25,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        String commandMixedCase \u003d \"SeLECt\" + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: mixed case command word -\u003e cleared */"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandSuccess(commandMixedCase, middleIndex);"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of ProgressChecker but out of bounds of person list"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getProgressChecker().getPersonList().size();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of ProgressChecker and person list -\u003e selected */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":88,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":92,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty ProgressChecker -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":4,"-":149}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"//import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"//import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"//import seedu.progresschecker.model.person.Major;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"//import seedu.progresschecker.model.person.Year;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.PersonBuilder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.PersonUtil;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends ProgressCheckerSystemTest {"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":75,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + USERNAME_DESC_BOB + \"  \""},{"lineNumber":76,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + \" \" + YEAR_DESC_BOB + \" \""},{"lineNumber":77,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withUsername(VALID_USERNAME_BOB)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .withMajor(VALID_MAJOR_BOB).withYear(VALID_YEAR_BOB)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":93,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of ProgressChecker and person list -\u003e edited */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of ProgressChecker but out of bounds of person list"},{"lineNumber":127,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getProgressChecker().getPersonList().size();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":137,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":138,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + USERNAME_DESC_AMY + MAJOR_DESC_AMY + YEAR_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":"        /* Case: invalid username -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":"                + INVALID_USERNAME_DESC, GithubUsername.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: invalid major -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /*assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_MAJOR_DESC,"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                Major.MESSAGE_MAJOR_CONSTRAINTS);*/"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getProgressChecker().getPersonList().contains(BOB));"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB"},{"lineNumber":204,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":236,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":240,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":244,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":5,"-":299}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.CARL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.DANIEL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.FindCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends ProgressCheckerSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in ProgressChecker, command with leading spaces and trailing spaces"},{"lineNumber":28,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":37,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in ProgressChecker, 2 keywords -\u003e 2 persons found */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in ProgressChecker, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in ProgressChecker, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in ProgressChecker, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":66,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: find same persons in ProgressChecker after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getProgressChecker().getPersonList().contains(BENSON));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: find person in ProgressChecker, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: find person in ProgressChecker, keyword is substring of name -\u003e 1 persons found */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* Case: find person in ProgressChecker, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: find person not in ProgressChecker -\u003e 0 persons found */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in ProgressChecker -\u003e 0 persons found */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: find progresschecker of person in ProgressChecker -\u003e 0 persons found */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getMajor().value;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: find email of person in ProgressChecker -\u003e 0 persons found */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in ProgressChecker -\u003e 0 persons found */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* Case: find person in empty ProgressChecker -\u003e 0 persons found */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: mixed case command word -\u003e cleared */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":168,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":1,"-":193}},{"path":"src/test/java/seedu/progresschecker/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getMajor().value, actualCard.getAddress());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"        if (!actualCard.getTagLabels().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"            ObservableList\u003cString\u003e classes \u003d actualCard.getTagLabels().get(0).getStyleClass();"},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":"            String tagColor \u003d classes.toString().split(\"\\\\s+\")[1];"},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"            List\u003cString\u003e expectedClasses \u003d expectedPerson.getTags().stream().map(tag -\u003e tag.tagName)"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"                .collect(Collectors.toList());"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":"            assertEquals(getTagColor(expectedClasses.get(0)), tagColor);"},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":83,"author":{"gitID":"iNekox3"},"content":"    public static String getTagColor(String tagName) {"},{"lineNumber":84,"author":{"gitID":"iNekox3"},"content":"        switch(tagName) {"},{"lineNumber":85,"author":{"gitID":"iNekox3"},"content":"        case \"friends\":"},{"lineNumber":86,"author":{"gitID":"iNekox3"},"content":"        case \"husband\":"},{"lineNumber":87,"author":{"gitID":"iNekox3"},"content":"            return \"green\";"},{"lineNumber":88,"author":{"gitID":"iNekox3"},"content":"        case \"colleagues\":"},{"lineNumber":89,"author":{"gitID":"iNekox3"},"content":"        case \"neighbours\":"},{"lineNumber":90,"author":{"gitID":"iNekox3"},"content":"        case \"classmates\":"},{"lineNumber":91,"author":{"gitID":"iNekox3"},"content":"            return \"blue\";"},{"lineNumber":92,"author":{"gitID":"iNekox3"},"content":"        case \"family\":"},{"lineNumber":93,"author":{"gitID":"iNekox3"},"content":"        case \"owesMoney\":"},{"lineNumber":94,"author":{"gitID":"iNekox3"},"content":"            return \"red\";"},{"lineNumber":95,"author":{"gitID":"iNekox3"},"content":"        case \"friend\":"},{"lineNumber":96,"author":{"gitID":"iNekox3"},"content":"            return \"yellow\";"},{"lineNumber":97,"author":{"gitID":"iNekox3"},"content":"        default:"},{"lineNumber":98,"author":{"gitID":"iNekox3"},"content":"            return null;"},{"lineNumber":99,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":28,"-":73}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d ProgressChecker - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-T09-B3/main/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team T09-B3`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"There are some things you will need to set up before getting started in contributing to ProgressChecker. Below lists the important key elements you will have to configure."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":24,"author":{"gitID":"-"},"content":"+"},{"lineNumber":25,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":26,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":27,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":". https://www.atlassian.com/git/tutorials/comparing-workflows#forking-workflow[Fork] this repo, and https://nus-cs2103-ay1718s2.github.io/website/book/gitAndGithub/init/index.html[clone] the fork to your computer"},{"lineNumber":40,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":41,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":42,"author":{"gitID":"-"},"content":"... Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":43,"author":{"gitID":"-"},"content":"image:setup2.png[width\u003d\"600\"] +"},{"lineNumber":44,"author":{"gitID":"-"},"content":"_step 3.i_"},{"lineNumber":45,"author":{"gitID":"-"},"content":"... Click `New...` and find the directory of the JDK"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK` +"},{"lineNumber":48,"author":{"gitID":"-"},"content":"image:setup3.png[width\u003d\"600\"]  +"},{"lineNumber":49,"author":{"gitID":"-"},"content":"_step 5_"},{"lineNumber":50,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":51,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":52,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":53,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":54,"author":{"gitID":"-"},"content":"image:setup5.png[width\u003d\"600\"]  +"},{"lineNumber":55,"author":{"gitID":"-"},"content":"_step 8_"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":". Run the `gradlew.bat run` and try a few commands"},{"lineNumber":60,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":69,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":70,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":73,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-T09-B3/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-T09-B3/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":88,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":93,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":100,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"ProgressChecker consists of multiple components that work together via an event-driven structure. This section will break down the various components in details to help you jump straight into understanding the architecture in depth."},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":111,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":116,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/progresschecker/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":131,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":133,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":138,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":143,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":146,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":154,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `ProgressCheckerChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":162,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":167,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":170,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/progresschecker/ui/Ui.java[`Ui.java`]"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/progresschecker/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":181,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":182,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":185,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":188,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":189,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":192,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":195,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/progresschecker/logic/Logic.java[`Logic.java`]"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":".  `Logic` uses the `ProgressCheckerParser` class to parse the user command."},{"lineNumber":198,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":199,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a teammate) and/or raise events."},{"lineNumber":200,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":205,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":208,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":211,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/progresschecker/model/Model.java[`Model.java`]"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":218,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":219,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":220,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":223,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":226,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/progresschecker/storage/Storage.java[`Storage.java`]"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":233,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.progresschecker.commons` package."},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":246,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the ProgressChecker (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component"},{"lineNumber":253,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the ProgressChecker before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":258,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":259,"author":{"gitID":"-"},"content":"----"},{"lineNumber":260,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":"}"},{"lineNumber":266,"author":{"gitID":"-"},"content":"----"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":269,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":270,"author":{"gitID":"-"},"content":"----"},{"lineNumber":271,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":"}"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":284,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"}"},{"lineNumber":286,"author":{"gitID":"-"},"content":"----"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th teammate in the ProgressChecker. The current state of the ProgressChecker is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":".Undo/Redo Stack at Starting Point"},{"lineNumber":293,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new teammate."},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":".Undo/Redo Stack with New Command `add`"},{"lineNumber":298,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":301,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"The user now decides that adding the teammate was a mistake, and decides to undo that action using `undo`."},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the ProgressChecker to the state before the `add` command executed."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":".Undo/Redo Stack with Command `undo`"},{"lineNumber":308,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":311,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":".Sequence Diagram of Undo/Redo"},{"lineNumber":316,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the ProgressChecker to the state after the command is executed)."},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":321,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":".Undo/Redo Stack with New Command `clear`"},{"lineNumber":326,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":".Undo/Redo Stack with Command `list`"},{"lineNumber":331,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":".Activity Diagram of Undo/Redo"},{"lineNumber":336,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire ProgressChecker."},{"lineNumber":352,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":353,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":354,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the teammate being deleted)."},{"lineNumber":356,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the ProgressChecker (`add`, `clear`, `edit`)."},{"lineNumber":362,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":363,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":364,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":365,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":366,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":367,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":373,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":374,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":375,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":376,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":377,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":378,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"-"},"content":"// tag::upload[]"},{"lineNumber":381,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Upload feature"},{"lineNumber":382,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Planned Implementation"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"The Upload command will allow users to upload their preferred image to replace the default profile photo."},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"Upload can be undoable. The following diagram shows the inheritance diagram for upload command:"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component"},{"lineNumber":389,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"UploadCommand is implemented this way:"},{"lineNumber":392,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":393,"author":{"gitID":"-"},"content":"----"},{"lineNumber":394,"author":{"gitID":"-"},"content":"public class UploadCommand extends UndoableCommand {"},{"lineNumber":395,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":396,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":397,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":398,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":399,"author":{"gitID":"-"},"content":"            model.uploadPhoto(toUpload);"},{"lineNumber":400,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":401,"author":{"gitID":"-"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":402,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_IMAGE_NOT_FOUND);"},{"lineNumber":403,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":404,"author":{"gitID":"-"},"content":"            throw new CommandException(\"Caught IOException!\");"},{"lineNumber":405,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":406,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":407,"author":{"gitID":"-"},"content":"}"},{"lineNumber":408,"author":{"gitID":"-"},"content":"----"},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":411,"author":{"gitID":"-"},"content":"If the path is invalid or the image cannot be found, the upload will not be successful. User will be asked to write the correct path to image again. Users are allowed to reload the image if they want to update the profile photo."},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UploadCommand`"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** user will provide the path of image"},{"lineNumber":418,"author":{"gitID":"-"},"content":"** Pros: The path can be used directly to find the image and display it in the app."},{"lineNumber":419,"author":{"gitID":"-"},"content":"** Cons: Image may be a local file. When other users open the app, they cannot see the update."},{"lineNumber":420,"author":{"gitID":"-"},"content":"* **Alternative 2:** user will upload image into our github folder manually"},{"lineNumber":421,"author":{"gitID":"-"},"content":"** Pros: Everyone can see the update of profile photo."},{"lineNumber":422,"author":{"gitID":"-"},"content":"** Cons: Quite trobulesome to upload photo manually first."},{"lineNumber":423,"author":{"gitID":"-"},"content":"// end::upload[]"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"// tag::search[]"},{"lineNumber":426,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Dynamic Search Implementation"},{"lineNumber":427,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"AdityaA1998"},"content":"The `find` command shows the searched contact currently. However, the user does not need to type the complete name press enter, the whole search is dynamic. As soon as the user types the command `find` dynamic search state is toggled. After typing `find` command, whichever character is entered by the user, the results which contain"},{"lineNumber":430,"author":{"gitID":"AdityaA1998"},"content":" the typed keywords appear."},{"lineNumber":431,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":432,"author":{"gitID":"AdityaA1998"},"content":"The following diagram shows the UML diagram for `find` command :"},{"lineNumber":433,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":".UML Diagram of `find` Command"},{"lineNumber":435,"author":{"gitID":"-"},"content":"image::FindCommandUMLDiagram.png[width\u003d\"120\"]"},{"lineNumber":436,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":437,"author":{"gitID":"AdityaA1998"},"content":"To implement the dynamic search, we used the following method - as soon as the user enters any character in the command box, the text is retrieved from"},{"lineNumber":438,"author":{"gitID":"AdityaA1998"},"content":"the command box and checked if it is the `find` command. If it is the `find` command, dynamic search is started. After the `find` command is detected in the"},{"lineNumber":439,"author":{"gitID":"AdityaA1998"},"content":"command box, every key that is pressed is parsed and sent to the `find` command parser. After that the basic functionality of find is used and the results are displayed."},{"lineNumber":440,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":441,"author":{"gitID":"AdityaA1998"},"content":"The code snippet for the implementation is:"},{"lineNumber":442,"author":{"gitID":"AdityaA1998"},"content":"[source,java]"},{"lineNumber":443,"author":{"gitID":"AdityaA1998"},"content":"----"},{"lineNumber":444,"author":{"gitID":"AdityaA1998"},"content":"private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":445,"author":{"gitID":"AdityaA1998"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":446,"author":{"gitID":"AdityaA1998"},"content":"        // .. other keypress logic .."},{"lineNumber":447,"author":{"gitID":"AdityaA1998"},"content":"        default:"},{"lineNumber":448,"author":{"gitID":"AdityaA1998"},"content":"            try {"},{"lineNumber":449,"author":{"gitID":"AdityaA1998"},"content":"                if (// .. checking if the text is `find` command) {"},{"lineNumber":450,"author":{"gitID":"AdityaA1998"},"content":"                    isCorrectCommandWord \u003d !commandTextField.getText().trim().isEmpty();"},{"lineNumber":451,"author":{"gitID":"AdityaA1998"},"content":"                    CommandResult commandResult;"},{"lineNumber":452,"author":{"gitID":"AdityaA1998"},"content":"                    if (keyEvent.getCode() !\u003d KeyCode.BACK_SPACE \u0026\u0026 keyEvent.getCode() !\u003d KeyCode.DELETE) {"},{"lineNumber":453,"author":{"gitID":"AdityaA1998"},"content":"                        commandResult \u003d logic.execute(commandTextField.getText() + keyEvent.getText());"},{"lineNumber":454,"author":{"gitID":"AdityaA1998"},"content":"                    } else {"},{"lineNumber":455,"author":{"gitID":"AdityaA1998"},"content":"                        commandResult \u003d logic.execute(commandTextField.getText().substring(0,"},{"lineNumber":456,"author":{"gitID":"AdityaA1998"},"content":"                                commandTextField.getText().length() - 1));"},{"lineNumber":457,"author":{"gitID":"AdityaA1998"},"content":"                    }"},{"lineNumber":458,"author":{"gitID":"AdityaA1998"},"content":"                    // process result of the command"},{"lineNumber":459,"author":{"gitID":"AdityaA1998"},"content":"                    logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":460,"author":{"gitID":"AdityaA1998"},"content":"                    raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":461,"author":{"gitID":"AdityaA1998"},"content":"                }"},{"lineNumber":462,"author":{"gitID":"AdityaA1998"},"content":"            } catch (CommandException | ParseException e) {"},{"lineNumber":463,"author":{"gitID":"AdityaA1998"},"content":"               // .. command failure logic .."},{"lineNumber":464,"author":{"gitID":"AdityaA1998"},"content":"            }"},{"lineNumber":465,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":466,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":467,"author":{"gitID":"AdityaA1998"},"content":"----"},{"lineNumber":468,"author":{"gitID":"AdityaA1998"},"content":"[NOTE]"},{"lineNumber":469,"author":{"gitID":"AdityaA1998"},"content":"The entered key is not instantly updated in the command box thats why after the `commandTextField.getText()` is executed we need to append\\delete a character for the"},{"lineNumber":470,"author":{"gitID":"AdityaA1998"},"content":" code to the result to process the right input - the one that the user can see on their screens."},{"lineNumber":471,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":472,"author":{"gitID":"AdityaA1998"},"content":"[discrete]"},{"lineNumber":473,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d\u003d Design consideration"},{"lineNumber":474,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":475,"author":{"gitID":"AdityaA1998"},"content":"**Aspect**: User Interface (UI)"},{"lineNumber":476,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":477,"author":{"gitID":"AdityaA1998"},"content":"**Alternative 1 (current choice):** Show the search results without actually highlighting the keywords. +"},{"lineNumber":478,"author":{"gitID":"AdityaA1998"},"content":"**Pros**: Allows more readability of the of the results as they contain multiple fields and not just user name. +"},{"lineNumber":479,"author":{"gitID":"AdityaA1998"},"content":"**Cons**: User needs to manually search for the keywords entered by him in the search results."},{"lineNumber":480,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":481,"author":{"gitID":"AdityaA1998"},"content":"**Alternative 2:** Show the search results WITH highlighting the keywords in the searched name. +"},{"lineNumber":482,"author":{"gitID":"AdityaA1998"},"content":"**Pros**: It will make it easier for the user to view the user to identify the searched keyword in the displayed results. +"},{"lineNumber":483,"author":{"gitID":"AdityaA1998"},"content":"**Cons**: Adding highlights to the results might make the displayed results a bit too cluttered specially with the presence of tags which are colored as well."},{"lineNumber":484,"author":{"gitID":"-"},"content":"// end::search[]"},{"lineNumber":485,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"// tag::answerexercise[]"},{"lineNumber":487,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Planned] Answering an exercise"},{"lineNumber":488,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Planned Implementation"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"The exercises for all weeks would be stored as a local file upon which it would be loaded by the `StorageManager` on start up."},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `answer 2.1.1 a d`."},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":".Component interactions for `answer 2.1.1 a d` command (part 1)"},{"lineNumber":495,"author":{"gitID":"-"},"content":"image::SDforAnswerExercise.png[width\u003d\"800\"]"},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":498,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `ExercisesChangedEvent` when the exercises data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":499,"author":{"gitID":"-"},"content":""},{"lineNumber":500,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the exercises display of the UI being updated to reflect the newly given answers."},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":".Component interactions for `answer 2.1.1 a d` command (part 2)"},{"lineNumber":503,"author":{"gitID":"-"},"content":"image::SDforExercisesEventHandling.png[width\u003d\"800\"]"},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `AnswerCommand`"},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"* Add a new command that extends `Command`"},{"lineNumber":510,"author":{"gitID":"-"},"content":""},{"lineNumber":511,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Format of answer command"},{"lineNumber":512,"author":{"gitID":"-"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use same command formatting `answer INDEX ANSWER` regardless of the type of question (e.g. text based question, multiple choice question)"},{"lineNumber":514,"author":{"gitID":"-"},"content":"** Pros: Less parser files to manage altogether"},{"lineNumber":515,"author":{"gitID":"-"},"content":"** Cons: Can be unintuitive for users when it comes to answer different question with the same formatting"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use different command based on the type of question (e.g. `answert INDEX ANSWER` for answering text based question and `answerm INDEX CHOICE` for answering multiple choice questions)"},{"lineNumber":518,"author":{"gitID":"-"},"content":"** Pros: Can be clearer on what is being answered for the user"},{"lineNumber":519,"author":{"gitID":"-"},"content":"** Cons: More commands and formatting to learn and remember"},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How answering executes"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"* Trigger an event change in `Logic` to signal `UI` for a change in text display in `ExercisesPanel`"},{"lineNumber":524,"author":{"gitID":"-"},"content":"* Process checking of correctness in `Model`"},{"lineNumber":525,"author":{"gitID":"-"},"content":"* Save data to local file in `Storage`"},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Storing of exercise questions"},{"lineNumber":528,"author":{"gitID":"-"},"content":""},{"lineNumber":529,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Load from a local file"},{"lineNumber":530,"author":{"gitID":"-"},"content":"** Pros: Implementation becomes a lot more modular."},{"lineNumber":531,"author":{"gitID":"-"},"content":"** Cons: Have to implement extra text file parser and involves `Storage` that might be seen as extra load to learn for new programmers"},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include in `UI` file together with where the text display is being changed at"},{"lineNumber":534,"author":{"gitID":"-"},"content":"** Pros: Easier to see where everything is"},{"lineNumber":535,"author":{"gitID":"-"},"content":"** Cons: Formatting the exercises becomes harder and the implementation is less modular"},{"lineNumber":536,"author":{"gitID":"-"},"content":"// end::answerexercise[]"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"// tag::adddefaulttasklist[]"},{"lineNumber":539,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Ongoing] add default task command (Google Tasks API relevant commands)"},{"lineNumber":540,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current+Planned Implementation"},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"The default LOs and todos for all weeks would be stored as a local file upon which it would be loaded by the `StorageManager` on start up."},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `newtasklist`."},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":".Component Interactions for `newtasklist` Command"},{"lineNumber":547,"author":{"gitID":"-"},"content":"image::SDforAddDefaultTaskList.png[width\u003d\"800\"]"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":550,"author":{"gitID":"-"},"content":"This command has no parameter regarding user input. The arguments passed are pre-initialized constant variables stored in the AddDefaultTasksCommand Class itself."},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"We apply Google Tasks API to help us save user tasks data online (there will be cases where data of teammates are needed, thus only local data is not enough)."},{"lineNumber":553,"author":{"gitID":"-"},"content":"To use Google Tasks API, we fist need to register this project on google developer console and retrieve a client credential file (client_id.json) to authorize our project."},{"lineNumber":554,"author":{"gitID":"-"},"content":"Then, add corresponding dependencies to build.gradle, the JAR files will be downloaded automatically upon project rebuild."},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"Here is the code snippet to add dependencies:"},{"lineNumber":557,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":558,"author":{"gitID":"-"},"content":"----"},{"lineNumber":559,"author":{"gitID":"-"},"content":"compile ("},{"lineNumber":560,"author":{"gitID":"-"},"content":"    [\u0027com.google.api-client:google-api-client:1.23.0\u0027],"},{"lineNumber":561,"author":{"gitID":"-"},"content":"    [\u0027com.google.apis:google-api-services-tasks:v1-rev49-1.23.0\u0027],"},{"lineNumber":562,"author":{"gitID":"-"},"content":"    [\u0027com.google.oauth-client:google-oauth-client-jetty:1.23.0\u0027],"},{"lineNumber":563,"author":{"gitID":"-"},"content":")"},{"lineNumber":564,"author":{"gitID":"-"},"content":"----"},{"lineNumber":565,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":566,"author":{"gitID":"-"},"content":"Simply downloading JAR files without editing gradle is not suggested. JARs are not in git thus our co-developers will rely on the dependencies to retrieve the libraries."},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"We write a program to authorize our project (by loading the aforementioned client credential file), trigger user loggin and build service."},{"lineNumber":569,"author":{"gitID":"-"},"content":"Note that when users are using ProgressChecker, only the first google task command requires them to log in with their google accounts,"},{"lineNumber":570,"author":{"gitID":"-"},"content":"later other commands that use google tasks api will not trigger user login again. Also, very important, we import the APIs at the beginning of the program."},{"lineNumber":571,"author":{"gitID":"-"},"content":""},{"lineNumber":572,"author":{"gitID":"-"},"content":"Google Tasks API helps us save time building massive data structures (ie. Tasks, TaskLists, Lists of TaskLists, with many methods and exceptions)."},{"lineNumber":573,"author":{"gitID":"-"},"content":"However, we do have a few classes in the modeling part that further add customized methods which are useful for current commands and even future commands."},{"lineNumber":574,"author":{"gitID":"-"},"content":"In this way, we avoid repetition of code snippet and having big chunks of import statements in numerous commands."},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"Here is a code snippet that can find a task list by its title (while the native method only finds task by its id which is not memorable):"},{"lineNumber":577,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":578,"author":{"gitID":"-"},"content":"----"},{"lineNumber":579,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":580,"author":{"gitID":"-"},"content":" * Finds the task list with title {@code String} from the current list of task lists"},{"lineNumber":581,"author":{"gitID":"-"},"content":" *"},{"lineNumber":582,"author":{"gitID":"-"},"content":" * @param listTitle title of the task list we look for"},{"lineNumber":583,"author":{"gitID":"-"},"content":" * @return the task list instance"},{"lineNumber":584,"author":{"gitID":"-"},"content":" */"},{"lineNumber":585,"author":{"gitID":"-"},"content":"public static TaskList searchTaskList(String listTitle) throws CommandException {"},{"lineNumber":586,"author":{"gitID":"-"},"content":"    TaskList taskList \u003d null;"},{"lineNumber":587,"author":{"gitID":"-"},"content":"    ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":588,"author":{"gitID":"-"},"content":"    try {"},{"lineNumber":589,"author":{"gitID":"-"},"content":"        connection.authorize();"},{"lineNumber":590,"author":{"gitID":"-"},"content":"    } catch (Exception e) {"},{"lineNumber":591,"author":{"gitID":"-"},"content":"        throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":592,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":593,"author":{"gitID":"-"},"content":"    Tasks service \u003d connection.getTasksService();"},{"lineNumber":594,"author":{"gitID":"-"},"content":"    try {"},{"lineNumber":595,"author":{"gitID":"-"},"content":"    TaskLists taskLists \u003d service.tasklists().list().execute();"},{"lineNumber":596,"author":{"gitID":"-"},"content":"        taskList \u003d taskLists.getItems().stream()"},{"lineNumber":597,"author":{"gitID":"-"},"content":"                .filter(t -\u003e t.getTitle().equals(listTitle))"},{"lineNumber":598,"author":{"gitID":"-"},"content":"                .findFirst()"},{"lineNumber":599,"author":{"gitID":"-"},"content":"                .orElse(null);"},{"lineNumber":600,"author":{"gitID":"-"},"content":"    } catch (IOException ioe) {"},{"lineNumber":601,"author":{"gitID":"-"},"content":"        throw new CommandException(LOAD_FAILURE);"},{"lineNumber":602,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":603,"author":{"gitID":"-"},"content":""},{"lineNumber":604,"author":{"gitID":"-"},"content":"    return taskList;"},{"lineNumber":605,"author":{"gitID":"-"},"content":"}"},{"lineNumber":606,"author":{"gitID":"-"},"content":"----"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `AddDefaultTasksCommand`"},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"-"},"content":"* Add a new command that extends `Command`. We do not extend `UndoableCommand` because updating google tasks online cannot be handled by the undo command."},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Format of add default task list command"},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** only one command word, without any other argument"},{"lineNumber":617,"author":{"gitID":"-"},"content":"** Pros: Less parser files to manage altogether. Very simple and easy to type."},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How the task is added"},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"* Authorization with client credential file and user login"},{"lineNumber":622,"author":{"gitID":"-"},"content":"* Create a new task list with default given name and push to user\u0027s google account"},{"lineNumber":623,"author":{"gitID":"-"},"content":"* Load the local file that contains all the default LOs and todos, parse it, create tasks one by one and add the the previously created task"},{"lineNumber":624,"author":{"gitID":"-"},"content":"// end::adddefaulttasklist[]"},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":631,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":632,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":637,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":638,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":639,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":642,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation. This section talks about how you can modify and publish the existing documentations."},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":651,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":656,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":663,"author":{"gitID":"-"},"content":""},{"lineNumber":664,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":669,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":670,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":671,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":674,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":675,"author":{"gitID":"-"},"content":""},{"lineNumber":676,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":677,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"ProgressChecker uses JUnit tests to check for its correctness. This section covers the type of tests and how to run them."},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":684,"author":{"gitID":"-"},"content":""},{"lineNumber":685,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":686,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":691,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":692,"author":{"gitID":"-"},"content":""},{"lineNumber":693,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":698,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":699,"author":{"gitID":"-"},"content":""},{"lineNumber":700,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":701,"author":{"gitID":"-"},"content":""},{"lineNumber":702,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":703,"author":{"gitID":"-"},"content":""},{"lineNumber":704,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":711,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":712,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.progresschecker.ui` package."},{"lineNumber":713,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":714,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":715,"author":{"gitID":"-"},"content":"e.g. `seedu.progresschecker.commons.StringUtilTest`"},{"lineNumber":716,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":717,"author":{"gitID":"-"},"content":"e.g. `seedu.progresschecker.storage.StorageManagerTest`"},{"lineNumber":718,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":719,"author":{"gitID":"-"},"content":"e.g. `seedu.progresschecker.logic.LogicManagerTest`"},{"lineNumber":720,"author":{"gitID":"-"},"content":""},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":723,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":724,"author":{"gitID":"-"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":726,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":729,"author":{"gitID":"-"},"content":""},{"lineNumber":730,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":733,"author":{"gitID":"-"},"content":""},{"lineNumber":734,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":735,"author":{"gitID":"-"},"content":""},{"lineNumber":736,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":737,"author":{"gitID":"-"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":743,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":744,"author":{"gitID":"-"},"content":""},{"lineNumber":745,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":748,"author":{"gitID":"-"},"content":""},{"lineNumber":749,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/progresschecker/MainApp.java[`MainApp.java`]."},{"lineNumber":750,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":751,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":752,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":753,"author":{"gitID":"-"},"content":""},{"lineNumber":754,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":755,"author":{"gitID":"-"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":757,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":758,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":761,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":762,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":763,"author":{"gitID":"-"},"content":""},{"lineNumber":764,"author":{"gitID":"-"},"content":"It might be your first time working with a large code base. If so, here is a suggested path for new programmers to kick start your first functionality:"},{"lineNumber":765,"author":{"gitID":"-"},"content":""},{"lineNumber":766,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":771,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":774,"author":{"gitID":"-"},"content":""},{"lineNumber":775,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":776,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":777,"author":{"gitID":"-"},"content":""},{"lineNumber":778,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":781,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove teammates in the list."},{"lineNumber":784,"author":{"gitID":"-"},"content":"+"},{"lineNumber":785,"author":{"gitID":"-"},"content":"****"},{"lineNumber":786,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":787,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/progresschecker/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/progresschecker/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":788,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/progresschecker/logic/parser/ProgressCheckerParser.java[`ProgressCheckerParser`] is responsible for analyzing command words."},{"lineNumber":789,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":790,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/progresschecker/logic/parser/ProgressCheckerParser.java[`ProgressCheckerParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":791,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":792,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":793,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":794,"author":{"gitID":"-"},"content":"****"},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":797,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":798,"author":{"gitID":"-"},"content":""},{"lineNumber":799,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the ProgressChecker, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":800,"author":{"gitID":"-"},"content":""},{"lineNumber":801,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":802,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":803,"author":{"gitID":"-"},"content":""},{"lineNumber":804,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the ProgressChecker."},{"lineNumber":805,"author":{"gitID":"-"},"content":"+"},{"lineNumber":806,"author":{"gitID":"-"},"content":"****"},{"lineNumber":807,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":808,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/progresschecker/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/progresschecker/model/ProgressChecker.java[`ProgressChecker`] API need to be updated."},{"lineNumber":809,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":810,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/progresschecker/model/ProgressChecker.java[`ProgressChecker`] and link:{repoURL}/src/main/java/seedu/progresschecker/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/progresschecker/model/ProgressChecker.java[`ProgressChecker`] allows you to update a teammate, and link:{repoURL}/src/main/java/seedu/progresschecker/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":811,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":812,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/progresschecker/model/ProgressChecker.java[`ProgressChecker`]. Loop through each teammates, and remove the `tag` from each teammate."},{"lineNumber":813,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/progresschecker/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/progresschecker/model/ModelManager.java[`ModelManager`] should call `ProgressChecker#removeTag(Tag)`."},{"lineNumber":814,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":815,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":816,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/progresschecker/model/ProgressChecker.java[`ProgressChecker`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":817,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":818,"author":{"gitID":"-"},"content":"****"},{"lineNumber":819,"author":{"gitID":"-"},"content":""},{"lineNumber":820,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":821,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your ProgressChecker application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last teammate in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":826,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":". Use different colors for different tags inside teammate cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":829,"author":{"gitID":"-"},"content":"+"},{"lineNumber":830,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":831,"author":{"gitID":"-"},"content":"+"},{"lineNumber":832,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":833,"author":{"gitID":"-"},"content":"+"},{"lineNumber":834,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":835,"author":{"gitID":"-"},"content":"+"},{"lineNumber":836,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":837,"author":{"gitID":"-"},"content":"+"},{"lineNumber":838,"author":{"gitID":"-"},"content":"****"},{"lineNumber":839,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":840,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/progresschecker/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":841,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":842,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":843,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":844,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":845,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":846,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":847,"author":{"gitID":"-"},"content":"****"},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/progresschecker/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/progresschecker/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":850,"author":{"gitID":"-"},"content":"+"},{"lineNumber":851,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":852,"author":{"gitID":"-"},"content":"+"},{"lineNumber":853,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":854,"author":{"gitID":"-"},"content":"+"},{"lineNumber":855,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":856,"author":{"gitID":"-"},"content":"+"},{"lineNumber":857,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":858,"author":{"gitID":"-"},"content":"+"},{"lineNumber":859,"author":{"gitID":"-"},"content":"****"},{"lineNumber":860,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":861,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/progresschecker/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/progresschecker/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/progresschecker/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":862,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/progresschecker/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":863,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":864,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/progresschecker/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":865,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/progresschecker/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":866,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":867,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":868,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/ProgressCheckerSystemTest.java[`ProgressCheckerSystemTest#assertCommandBoxShowsDefaultStyle() and ProgressCheckerSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":869,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":870,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":871,"author":{"gitID":"-"},"content":"****"},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/progresschecker/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the ProgressChecker."},{"lineNumber":874,"author":{"gitID":"-"},"content":"+"},{"lineNumber":875,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":876,"author":{"gitID":"-"},"content":"+"},{"lineNumber":877,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":878,"author":{"gitID":"-"},"content":"+"},{"lineNumber":879,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":880,"author":{"gitID":"-"},"content":"+"},{"lineNumber":881,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":882,"author":{"gitID":"-"},"content":"+"},{"lineNumber":883,"author":{"gitID":"-"},"content":"****"},{"lineNumber":884,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":885,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":886,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/progresschecker/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the ProgressChecker is updated."},{"lineNumber":887,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":888,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/progresschecker/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of teammates when the application just started."},{"lineNumber":889,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/progresschecker/ui/StatusBarFooter.java[`StatusBarFooter#handleProgressCheckerChangedEvent(ProgressCheckerChangedEvent)`] to update the number of teammates whenever there are new changes to the progresschecker."},{"lineNumber":890,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":891,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/ProgressCheckerSystemTest.java[`ProgressCheckerSystemTest`] to also verify the new total number of teammates status bar."},{"lineNumber":892,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":893,"author":{"gitID":"-"},"content":"****"},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":896,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the ProgressChecker to the cloud. However, the current implementation of the application constantly saves the ProgressChecker after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the ProgressChecker storage."},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":901,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":902,"author":{"gitID":"-"},"content":""},{"lineNumber":903,"author":{"gitID":"-"},"content":". Add a new method `backupProgressChecker(ReadOnlyProgressChecker)`, so that the ProgressChecker can be saved in a fixed temporary location."},{"lineNumber":904,"author":{"gitID":"-"},"content":"+"},{"lineNumber":905,"author":{"gitID":"-"},"content":"****"},{"lineNumber":906,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":907,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/progresschecker/storage/ProgressCheckerStorage.java[`ProgressCheckerStorage`] interface."},{"lineNumber":908,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/progresschecker/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/progresschecker/storage/XmlProgressCheckerStorage.java[`XmlProgressCheckerStorage`] class."},{"lineNumber":909,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":910,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":911,"author":{"gitID":"-"},"content":"****"},{"lineNumber":912,"author":{"gitID":"-"},"content":""},{"lineNumber":913,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":914,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `progresschecker`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":921,"author":{"gitID":"-"},"content":"Edits the remark for a teammate specified in the `INDEX`. +"},{"lineNumber":922,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":927,"author":{"gitID":"-"},"content":"Edits the remark for the first teammate to `Likes to drink coffee.`"},{"lineNumber":928,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":929,"author":{"gitID":"-"},"content":"Removes the remark for the first teammate."},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":934,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/progresschecker/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":939,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/progresschecker/logic/parser/ProgressCheckerParser.java[`ProgressCheckerParser`] to accept a `RemarkCommand`."},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":944,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/progresschecker/logic/parser/ProgressCheckerParserTest.java[`ProgressCheckerParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":947,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":952,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":953,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/progresschecker/logic/parser/ProgressCheckerParser.java[`ProgressCheckerParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":958,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":959,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":960,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/progresschecker/logic/parser/ProgressCheckerParserTest.java[`ProgressCheckerParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":963,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/progresschecker/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":964,"author":{"gitID":"-"},"content":""},{"lineNumber":965,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":968,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/progresschecker/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":975,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/progresschecker/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/progresschecker/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":980,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":987,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/progresschecker/model/person/Person.java[`Person`]."},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/progresschecker/model/person/Person.java[`Person`]."},{"lineNumber":992,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":993,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/progresschecker/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `progressChecker.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":994,"author":{"gitID":"-"},"content":""},{"lineNumber":995,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":996,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/progresschecker/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":999,"author":{"gitID":"-"},"content":""},{"lineNumber":1000,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1001,"author":{"gitID":"-"},"content":""},{"lineNumber":1002,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonProgressChecker.xml`, `typicalPersonsProgressChecker.xml`, `validProgressChecker.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1007,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/progresschecker/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/progresschecker/model/person/Person.java[`Person`]."},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1010,"author":{"gitID":"-"},"content":""},{"lineNumber":1011,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/progresschecker/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":1012,"author":{"gitID":"-"},"content":". Try and use the method on any sample `us` in link:{repoURL}/src/test/java/seedu/progresschecker/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1015,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/progresschecker/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1018,"author":{"gitID":"-"},"content":""},{"lineNumber":1019,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/progresschecker/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1022,"author":{"gitID":"-"},"content":""},{"lineNumber":1023,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/progresschecker/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1024,"author":{"gitID":"-"},"content":""},{"lineNumber":1025,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1026,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1027,"author":{"gitID":"-"},"content":""},{"lineNumber":1028,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a teammate."},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1039,"author":{"gitID":"-"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1041,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"This section covers what ProgressChecker is meant to be and what it can do for the users. Your name and feature contribution will be listed here."},{"lineNumber":1044,"author":{"gitID":"-"},"content":""},{"lineNumber":1045,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1046,"author":{"gitID":"-"},"content":""},{"lineNumber":1047,"author":{"gitID":"-"},"content":"* is taking CS2103/CS2103T in NUS"},{"lineNumber":1048,"author":{"gitID":"-"},"content":"* wants to keep track on his/her learning progress"},{"lineNumber":1049,"author":{"gitID":"-"},"content":"* is willing to have good team management"},{"lineNumber":1050,"author":{"gitID":"-"},"content":"* has a need to manage a up to 4 contacts"},{"lineNumber":1051,"author":{"gitID":"-"},"content":"* prefers desktop apps over other types"},{"lineNumber":1052,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1053,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1054,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"*Value proposition*:"},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"-"},"content":"* never miss LOs hidden in the nested collapsible list"},{"lineNumber":1059,"author":{"gitID":"-"},"content":"* keep track of your own progress on a week by week basis"},{"lineNumber":1060,"author":{"gitID":"-"},"content":"* keep track of your teammates\u0027 completion of TO-DO list(at most 20 tasks per day) and learning progress (providing proof for peer evaluation)"},{"lineNumber":1061,"author":{"gitID":"-"},"content":"* view the teammates\u0027 weekly plan in phase B (to know the upcoming updates even before they send any pull requests to github repo)"},{"lineNumber":1062,"author":{"gitID":"-"},"content":"* manage issues from github straight from the software along with other tracking"},{"lineNumber":1063,"author":{"gitID":"-"},"content":"* save your answers(no more than 100 words) for the exercises (as proof of completion and for future revision)"},{"lineNumber":1064,"author":{"gitID":"-"},"content":"* easily search for information based on key words (which is hard to achieve in the module website with nested collapsible lists)"},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"*Feature Contribution*:"},{"lineNumber":1067,"author":{"gitID":"-"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":"**Koh Yee Ru:**"},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":". (Minor) Week based window view: students are able to navigate and view content arranged in a weekly basis. (acts as a base for incorporation of API)"},{"lineNumber":1071,"author":{"gitID":"-"},"content":". (Minor) Changing color themes: students will be able to change between a dark and light theme like the norm for editors which programmers are used to."},{"lineNumber":1072,"author":{"gitID":"-"},"content":". (Major) Exercises: students will be able to view, answer and save their responses for the weekly exercises to help track their conceptual understanding. Choice based questions will automatically be check for correctness with corresponding feedback to students."},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"**Kang Anmin:**"},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":". (Minor) Change/Add more fields of information for teammates in the contact list, in order to fit the specific context of this software. It also lays a foundation for other operations."},{"lineNumber":1077,"author":{"gitID":"-"},"content":". (Major) LO management: Add LOs to google tasks (the users google account, load tasks and sign completion."},{"lineNumber":1078,"author":{"gitID":"-"},"content":""},{"lineNumber":1079,"author":{"gitID":"-"},"content":"**Lai Liwen:**"},{"lineNumber":1080,"author":{"gitID":"-"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":". (Minor) HighLight the key word: the key word will be highlighted in command find"},{"lineNumber":1082,"author":{"gitID":"-"},"content":". (Major) Revamp the UI: rearrange the different sections and panels to best suit audience\u0027s needs"},{"lineNumber":1083,"author":{"gitID":"-"},"content":". (Major) Upload profile photo: students will be able to upload a photo to their profile"},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"-"},"content":"**Aditya Agarwal:**"},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"-"},"content":". (Minor) Implement dynamic search"},{"lineNumber":1088,"author":{"gitID":"-"},"content":". (Minor) Add an auto-complete for commands with tab press"},{"lineNumber":1089,"author":{"gitID":"-"},"content":". (Major) Add a progress checker which will keep a track of number of tasks remaining and accordingly update the progress bar"},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1092,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"-"},"content":"This section lists the actions that both new and long-time users can and may want to perform with ProgressChecker."},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1100,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1101,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"|`* * *` |new user |fill in my details such as name, email, 8 digits phone number |provide necessary information for platform maintenance"},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"|`* * *` |new user |fill in optional fields such as faculty, year of study, etc. |help my teammates know me better"},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"|`* * *` |user |update information of certain field(s) |keep my information up-to-date"},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"|`* * *` |user |add a teammate\u0027s details |help myself to track my current teammates\u0027 progress"},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a teammate |remove an entry of a teammate that I\u0027m no longer grouped with"},{"lineNumber":1112,"author":{"gitID":"-"},"content":""},{"lineNumber":1113,"author":{"gitID":"-"},"content":"|`* * *` |new user |upload a photo for myself or my teammates |help me to recognize my teammates"},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"-"},"content":"|`* * *` |new user |load a photo of myself or my teammates from github |help me to recognize my teammates"},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":"|`* * *` |user |search information in our module website based on keywords |navigate and reference the information I need quickly"},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"|`* * *` |user |view my to-do learning outcomes |know all the weekly deliverables and not miss them out"},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"|`* * *` |user |mark a to-do learning outcome as completed |focus on the tasks I have not done"},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":"|`* * *` |user |answer and save my responses for the weekly exercises |show to tutor as proof of my learning outcome and revise before exams"},{"lineNumber":1124,"author":{"gitID":"-"},"content":""},{"lineNumber":1125,"author":{"gitID":"-"},"content":"|`* * *` |user |know if my answer for an exercise is correct |learn from any mistakes I made"},{"lineNumber":1126,"author":{"gitID":"-"},"content":""},{"lineNumber":1127,"author":{"gitID":"-"},"content":"|`* * *` |user |see the list of completed/incomplete learning outcomes of my teammates |help to remind my teammate of the task or know which task to offer help with if they are having difficulties"},{"lineNumber":1128,"author":{"gitID":"-"},"content":""},{"lineNumber":1129,"author":{"gitID":"-"},"content":"|`* * *` |user |list issues (tasks) on GitHub |easily inform my teammates of my upcoming plans even before I send any pull requests to the team\u0027s repository"},{"lineNumber":1130,"author":{"gitID":"-"},"content":""},{"lineNumber":1131,"author":{"gitID":"-"},"content":"|`* * *` |user |assign issues (tasks) to my teammates |track who is doing what"},{"lineNumber":1132,"author":{"gitID":"-"},"content":""},{"lineNumber":1133,"author":{"gitID":"-"},"content":"|`* * *` |user |see the issues (tasks) listed on GitHub |easily know the upcoming plans of my teammates even before they send any pull requests to the team\u0027s repository"},{"lineNumber":1134,"author":{"gitID":"-"},"content":""},{"lineNumber":1135,"author":{"gitID":"-"},"content":"|`* * *` |user |close issues (tasks) on GitHub |easily inform my teammates of a completed task if no particular pull requests closes it"},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"-"},"content":"|`* *` |user |see the timeline showing the learning progress of me and my teammates |make sure everyone is on track"},{"lineNumber":1138,"author":{"gitID":"-"},"content":""},{"lineNumber":1139,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"-"},"content":"|`* *` |user with many teammates in the ProgressChecker |sort teammates by name |locate a teammate easily"},{"lineNumber":1142,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":"This section list the sequence of events for a feature. It includes possible scenarios in which a feature is not interacted with as intended which you can defense against."},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `ProgressChecker` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1150,"author":{"gitID":"-"},"content":""},{"lineNumber":1151,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1152,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add teammate"},{"lineNumber":1153,"author":{"gitID":"-"},"content":""},{"lineNumber":1154,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"-"},"content":"1.  User requests to add a specific teammate in the list"},{"lineNumber":1157,"author":{"gitID":"-"},"content":"2.  ProgressChecker add the teammate"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1159,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"-"},"content":"* 1a. The teammate has already been existing in the list."},{"lineNumber":1164,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1165,"author":{"gitID":"-"},"content":""},{"lineNumber":1166,"author":{"gitID":"-"},"content":"** 1a1. ProgressChecker shows an error message."},{"lineNumber":1167,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1168,"author":{"gitID":"AdityaA1998"},"content":"Use case resumes at step 1."},{"lineNumber":1169,"author":{"gitID":"-"},"content":""},{"lineNumber":1170,"author":{"gitID":"-"},"content":"* 1a. The given information is invalid."},{"lineNumber":1171,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":"** 1a1. ProgressChecker shows an error message."},{"lineNumber":1174,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1175,"author":{"gitID":"AdityaA1998"},"content":"Use case resumes at step 1."},{"lineNumber":1176,"author":{"gitID":"-"},"content":""},{"lineNumber":1177,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1178,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add the default task list"},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1181,"author":{"gitID":"-"},"content":""},{"lineNumber":1182,"author":{"gitID":"-"},"content":"1.  User requests to add the task list"},{"lineNumber":1183,"author":{"gitID":"-"},"content":"2.  If this is the first google-task-relevant command used by the user in this session, user is requested to log in his/her google account"},{"lineNumber":1184,"author":{"gitID":"-"},"content":"3.  ProgressChecker loads and parses local file, adds the task list to user\u0027s google account"},{"lineNumber":1185,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1186,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1187,"author":{"gitID":"-"},"content":""},{"lineNumber":1188,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1189,"author":{"gitID":"-"},"content":""},{"lineNumber":1190,"author":{"gitID":"-"},"content":"* 2a. No Internet Access."},{"lineNumber":1191,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1192,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"-"},"content":"* 2b. Invalid client credential file."},{"lineNumber":1195,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1196,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1197,"author":{"gitID":"-"},"content":""},{"lineNumber":1198,"author":{"gitID":"-"},"content":"* 2c. Invalid user log in information."},{"lineNumber":1199,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1201,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1202,"author":{"gitID":"-"},"content":"* 3a. The file is not found."},{"lineNumber":1203,"author":{"gitID":"AdityaA1998"},"content":"+"},{"lineNumber":1204,"author":{"gitID":"AdityaA1998"},"content":"Use case ends."},{"lineNumber":1205,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1206,"author":{"gitID":"-"},"content":"* 3b. The file is corrupted."},{"lineNumber":1207,"author":{"gitID":"AdityaA1998"},"content":"+"},{"lineNumber":1208,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"-"},"content":"* 3c. The list already exists."},{"lineNumber":1211,"author":{"gitID":"AdityaA1998"},"content":"+"},{"lineNumber":1212,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1213,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1214,"author":{"gitID":"iNekox3"},"content":"[discrete]"},{"lineNumber":1215,"author":{"gitID":"iNekox3"},"content":"\u003d\u003d\u003d Use case: Answer a question and save"},{"lineNumber":1216,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1217,"author":{"gitID":"iNekox3"},"content":"*MSS*"},{"lineNumber":1218,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1219,"author":{"gitID":"iNekox3"},"content":"1.  User requests to view a specific week"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"2.  ProgressChecker shows content of the specified week"},{"lineNumber":1221,"author":{"gitID":"iNekox3"},"content":"3.  User requests to key in and save an answer to a question"},{"lineNumber":1222,"author":{"gitID":"-"},"content":"4.  ProgressChecker takes in input and saves"},{"lineNumber":1223,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1225,"author":{"gitID":"-"},"content":""},{"lineNumber":1226,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1227,"author":{"gitID":"-"},"content":""},{"lineNumber":1228,"author":{"gitID":"iNekox3"},"content":"* 1a. Specified week does not exist."},{"lineNumber":1229,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1230,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1231,"author":{"gitID":"-"},"content":"** 1a1. ProgressChecker shows an error message."},{"lineNumber":1232,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1234,"author":{"gitID":"-"},"content":""},{"lineNumber":1235,"author":{"gitID":"iNekox3"},"content":"[none]"},{"lineNumber":1236,"author":{"gitID":"iNekox3"},"content":"* 2a. There is no content to be shown."},{"lineNumber":1237,"author":{"gitID":"iNekox3"},"content":"+"},{"lineNumber":1238,"author":{"gitID":"iNekox3"},"content":"Use case ends."},{"lineNumber":1239,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1240,"author":{"gitID":"iNekox3"},"content":"* 3a. The question index does not exist."},{"lineNumber":1241,"author":{"gitID":"iNekox3"},"content":"[none]"},{"lineNumber":1242,"author":{"gitID":"-"},"content":"** 3a1. ProgressChecker shows an error message."},{"lineNumber":1243,"author":{"gitID":"iNekox3"},"content":"+"},{"lineNumber":1244,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1245,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1246,"author":{"gitID":"iNekox3"},"content":"[discrete]"},{"lineNumber":1247,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Assign an issue to a teammate"},{"lineNumber":1248,"author":{"gitID":"-"},"content":""},{"lineNumber":1249,"author":{"gitID":"-"},"content":"_{ to be added }_"},{"lineNumber":1250,"author":{"gitID":"-"},"content":""},{"lineNumber":1251,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1252,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Use case: Autocomplete a command"},{"lineNumber":1253,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1254,"author":{"gitID":"iNekox3"},"content":"*MSS*"},{"lineNumber":1255,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1256,"author":{"gitID":"AdityaA1998"},"content":"1.  User types an incomplete command"},{"lineNumber":1257,"author":{"gitID":"AdityaA1998"},"content":"2.  User presses `tab` key to complete the command"},{"lineNumber":1258,"author":{"gitID":"AdityaA1998"},"content":"3.  ProgessChecker returns the completed command with dummy fields if there exists a specific format"},{"lineNumber":1259,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1260,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1261,"author":{"gitID":"-"},"content":""},{"lineNumber":1262,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1263,"author":{"gitID":"-"},"content":""},{"lineNumber":1264,"author":{"gitID":"AdityaA1998"},"content":"* 1a. Specified command does not exist."},{"lineNumber":1265,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1266,"author":{"gitID":"AdityaA1998"},"content":"[none]"},{"lineNumber":1267,"author":{"gitID":"AdityaA1998"},"content":"** 1a1. ProgressChecker doesn\u0027t do anything and waits for the right key/command to be entered."},{"lineNumber":1268,"author":{"gitID":"AdityaA1998"},"content":"** 1a2. It waits for the right letter to be pressed or the correct command to be entered."},{"lineNumber":1269,"author":{"gitID":"AdityaA1998"},"content":"+"},{"lineNumber":1270,"author":{"gitID":"AdityaA1998"},"content":"Use case resumes at step 1."},{"lineNumber":1271,"author":{"gitID":"-"},"content":""},{"lineNumber":1272,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1273,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete teammate"},{"lineNumber":1274,"author":{"gitID":"-"},"content":""},{"lineNumber":1275,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1276,"author":{"gitID":"-"},"content":""},{"lineNumber":1277,"author":{"gitID":"-"},"content":"1.  User requests to list teammates"},{"lineNumber":1278,"author":{"gitID":"-"},"content":"2.  ProgressChecker shows a list of teammates"},{"lineNumber":1279,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific teammate in the list"},{"lineNumber":1280,"author":{"gitID":"-"},"content":"4.  ProgressChecker deletes the teammate"},{"lineNumber":1281,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1282,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1283,"author":{"gitID":"-"},"content":""},{"lineNumber":1284,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1285,"author":{"gitID":"-"},"content":""},{"lineNumber":1286,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1287,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1288,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1289,"author":{"gitID":"-"},"content":""},{"lineNumber":1290,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1291,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1292,"author":{"gitID":"-"},"content":""},{"lineNumber":1293,"author":{"gitID":"-"},"content":"** 3a1. ProgressChecker shows an error message."},{"lineNumber":1294,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1295,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1296,"author":{"gitID":"-"},"content":""},{"lineNumber":1297,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1298,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Close an issue"},{"lineNumber":1299,"author":{"gitID":"-"},"content":""},{"lineNumber":1300,"author":{"gitID":"-"},"content":"_{ to be added }_"},{"lineNumber":1301,"author":{"gitID":"-"},"content":""},{"lineNumber":1302,"author":{"gitID":"iNekox3"},"content":"[discrete]"},{"lineNumber":1303,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Find teammate"},{"lineNumber":1304,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1305,"author":{"gitID":"iNekox3"},"content":"*MSS*"},{"lineNumber":1306,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1307,"author":{"gitID":"-"},"content":"1.  User types find"},{"lineNumber":1308,"author":{"gitID":"-"},"content":"2.  ProgressChecker automatically shows the list dynamically without the user needing to press enter key"},{"lineNumber":1309,"author":{"gitID":"-"},"content":"3.  User need not need to type the whole name, substrings will generate results"},{"lineNumber":1310,"author":{"gitID":"-"},"content":"4.  ProgressChecker displays the necessary results"},{"lineNumber":1311,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1312,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1313,"author":{"gitID":"-"},"content":""},{"lineNumber":1314,"author":{"gitID":"iNekox3"},"content":"*Extensions*"},{"lineNumber":1315,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1316,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1317,"author":{"gitID":"-"},"content":"* 2a. The contact list is empty."},{"lineNumber":1318,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1319,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1320,"author":{"gitID":"-"},"content":""},{"lineNumber":1321,"author":{"gitID":"-"},"content":"* 3a. The given substring doesn\u0027t exist in any name"},{"lineNumber":1322,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1323,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1324,"author":{"gitID":"-"},"content":"** 3a1. ProgressChecker shows an error message."},{"lineNumber":1325,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1326,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1327,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1328,"author":{"gitID":"-"},"content":""},{"lineNumber":1329,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: List an issue"},{"lineNumber":1331,"author":{"gitID":"-"},"content":""},{"lineNumber":1332,"author":{"gitID":"-"},"content":"_{ to be added }_"},{"lineNumber":1333,"author":{"gitID":"-"},"content":""},{"lineNumber":1334,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1335,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Mark a learning outcome as completed"},{"lineNumber":1336,"author":{"gitID":"-"},"content":""},{"lineNumber":1337,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"1.  User requests to list tasks(LOs)"},{"lineNumber":1340,"author":{"gitID":"-"},"content":"2.  ProgressChecker shows a list of tasks(LOs)"},{"lineNumber":1341,"author":{"gitID":"-"},"content":"3.  User provides an index to requests to mark the corresponding LO in the list as completed"},{"lineNumber":1342,"author":{"gitID":"-"},"content":"4.  If this is the first google-task-relevant command used by the user in this session, user is requested to log in his/her google account"},{"lineNumber":1343,"author":{"gitID":"-"},"content":"5.  ProgressChecker executes command to mark the LO as completed in google tasks under the user\u0027s google account"},{"lineNumber":1344,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1345,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1346,"author":{"gitID":"-"},"content":""},{"lineNumber":1347,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1348,"author":{"gitID":"-"},"content":""},{"lineNumber":1349,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1350,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1351,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1352,"author":{"gitID":"-"},"content":""},{"lineNumber":1353,"author":{"gitID":"-"},"content":"* 2b. The list has not been created yet (invalid list name)."},{"lineNumber":1354,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1355,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1356,"author":{"gitID":"-"},"content":""},{"lineNumber":1357,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1358,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1359,"author":{"gitID":"-"},"content":""},{"lineNumber":1360,"author":{"gitID":"-"},"content":"** 3a1. ProgressChecker shows an error message."},{"lineNumber":1361,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1362,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1363,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1364,"author":{"gitID":"iNekox3"},"content":"[discrete]"},{"lineNumber":1365,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Search for information"},{"lineNumber":1366,"author":{"gitID":"-"},"content":""},{"lineNumber":1367,"author":{"gitID":"-"},"content":"_{ to be added }_"},{"lineNumber":1368,"author":{"gitID":"-"},"content":""},{"lineNumber":1369,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1370,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Upload a photo for the profile"},{"lineNumber":1371,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1372,"author":{"gitID":"iNekox3"},"content":"*MSS*"},{"lineNumber":1373,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1374,"author":{"gitID":"-"},"content":"1.  User requests to view their profile"},{"lineNumber":1375,"author":{"gitID":"-"},"content":"2.  ProgressChecker shows the profile of the user"},{"lineNumber":1376,"author":{"gitID":"-"},"content":"3.  User requests to upload a new photo to the profile"},{"lineNumber":1377,"author":{"gitID":"-"},"content":"4.  ProgressChecker adds a new photo to the profile of user"},{"lineNumber":1378,"author":{"gitID":"-"},"content":"5.  Profile displays the new photo"},{"lineNumber":1379,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1380,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1381,"author":{"gitID":"-"},"content":""},{"lineNumber":1382,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1383,"author":{"gitID":"-"},"content":""},{"lineNumber":1384,"author":{"gitID":"-"},"content":"* 1a. Picture intented to add cannot be found."},{"lineNumber":1385,"author":{"gitID":"iNekox3"},"content":"+"},{"lineNumber":1386,"author":{"gitID":"iNekox3"},"content":"[none]"},{"lineNumber":1387,"author":{"gitID":"-"},"content":"** 1a1. ProgressChecker shows an error message."},{"lineNumber":1388,"author":{"gitID":"iNekox3"},"content":"+"},{"lineNumber":1389,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1390,"author":{"gitID":"-"},"content":""},{"lineNumber":1391,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1392,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: View contents of a specific week"},{"lineNumber":1393,"author":{"gitID":"-"},"content":""},{"lineNumber":1394,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1395,"author":{"gitID":"-"},"content":""},{"lineNumber":1396,"author":{"gitID":"iNekox3"},"content":"1.  User requests to view a specific week"},{"lineNumber":1397,"author":{"gitID":"-"},"content":"2.  ProgressChecker shows content of the specified week"},{"lineNumber":1398,"author":{"gitID":"iNekox3"},"content":"+"},{"lineNumber":1399,"author":{"gitID":"iNekox3"},"content":"Use case ends."},{"lineNumber":1400,"author":{"gitID":"-"},"content":""},{"lineNumber":1401,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1402,"author":{"gitID":"-"},"content":""},{"lineNumber":1403,"author":{"gitID":"iNekox3"},"content":"* 1a. Specified week does not exist."},{"lineNumber":1404,"author":{"gitID":"-"},"content":""},{"lineNumber":1405,"author":{"gitID":"-"},"content":"** 1a1. ProgressChecker shows an error message."},{"lineNumber":1406,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1407,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1408,"author":{"gitID":"-"},"content":""},{"lineNumber":1409,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1410,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1411,"author":{"gitID":"-"},"content":""},{"lineNumber":1412,"author":{"gitID":"-"},"content":"This sections list the criteria needed for the system and software."},{"lineNumber":1413,"author":{"gitID":"-"},"content":""},{"lineNumber":1414,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1415,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1416,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1417,"author":{"gitID":"-"},"content":".  The data cannot be retrieved from outside."},{"lineNumber":1418,"author":{"gitID":"-"},"content":".  The product may need 3-5 minutes to build up for the first time."},{"lineNumber":1419,"author":{"gitID":"-"},"content":".  User can only view the information of their teammates."},{"lineNumber":1420,"author":{"gitID":"-"},"content":".  User need to authenticate with their Google Tasks credentials."},{"lineNumber":1421,"author":{"gitID":"-"},"content":""},{"lineNumber":1422,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1423,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1424,"author":{"gitID":"-"},"content":""},{"lineNumber":1425,"author":{"gitID":"-"},"content":"[[Build-Automation]] Build Automation::"},{"lineNumber":1426,"author":{"gitID":"-"},"content":"Build automation is the process of automating the creation of a software build and the associated processes including: compiling computer source code into binary code, packaging binary code, and running automated tests."},{"lineNumber":1427,"author":{"gitID":"-"},"content":""},{"lineNumber":1428,"author":{"gitID":"-"},"content":"[[Gradle]] Gradle::"},{"lineNumber":1429,"author":{"gitID":"-"},"content":"Gradle is an open-source build automation system."},{"lineNumber":1430,"author":{"gitID":"-"},"content":""},{"lineNumber":1431,"author":{"gitID":"-"},"content":"[[GUI]] GUI::"},{"lineNumber":1432,"author":{"gitID":"-"},"content":"Graphical User Interface"},{"lineNumber":1433,"author":{"gitID":"-"},"content":""},{"lineNumber":1434,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1435,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1436,"author":{"gitID":"-"},"content":""},{"lineNumber":1437,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1438,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1439,"author":{"gitID":"-"},"content":""},{"lineNumber":1440,"author":{"gitID":"-"},"content":"[[sequence-diagram]] Sequence Diagram::"},{"lineNumber":1441,"author":{"gitID":"-"},"content":"A sequence diagram shows object interactions shown in time sequence."},{"lineNumber":1442,"author":{"gitID":"-"},"content":""},{"lineNumber":1443,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1444,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1445,"author":{"gitID":"-"},"content":""},{"lineNumber":1446,"author":{"gitID":"-"},"content":"You may want to do manual testing to familiarise yourself with the software. Given below are instructions to test the app manually."},{"lineNumber":1447,"author":{"gitID":"-"},"content":""},{"lineNumber":1448,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1449,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1450,"author":{"gitID":"-"},"content":""},{"lineNumber":1451,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1452,"author":{"gitID":"-"},"content":""},{"lineNumber":1453,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1454,"author":{"gitID":"-"},"content":""},{"lineNumber":1455,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1456,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1457,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1458,"author":{"gitID":"-"},"content":""},{"lineNumber":1459,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1460,"author":{"gitID":"-"},"content":""},{"lineNumber":1461,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1462,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1463,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1464,"author":{"gitID":"-"},"content":""},{"lineNumber":1465,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1466,"author":{"gitID":"-"},"content":""},{"lineNumber":1467,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a teammate"},{"lineNumber":1468,"author":{"gitID":"-"},"content":""},{"lineNumber":1469,"author":{"gitID":"-"},"content":". Deleting a teammate while all teammates are listed"},{"lineNumber":1470,"author":{"gitID":"-"},"content":""},{"lineNumber":1471,"author":{"gitID":"-"},"content":".. Prerequisites: List all teammates using the `list` command. Multiple teammates in the list."},{"lineNumber":1472,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1473,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1474,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1475,"author":{"gitID":"-"},"content":"   Expected: No teammate is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1476,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1477,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1478,"author":{"gitID":"-"},"content":""},{"lineNumber":1479,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1480,"author":{"gitID":"-"},"content":""},{"lineNumber":1481,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1482,"author":{"gitID":"-"},"content":""},{"lineNumber":1483,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1484,"author":{"gitID":"-"},"content":""},{"lineNumber":1485,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1486,"author":{"gitID":"-"},"content":""},{"lineNumber":1487,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"AdityaA1998":74,"iNekox3":40,"-":1373}},{"path":"src/test/java/seedu/progresschecker/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ListCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    private static final String COMMAND_ADD_INCOMPLETE \u003d \"ad\";"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"    private static final String COMMAND_ADD_COMPLETE \u003d AddCommand.COMMAND_FORMAT;"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    private static final String COMMAND_EDIT_INCOMPLETE \u003d \"e\";"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    private static final String COMMAND_EDIT_COMPLETE \u003d EditCommand.COMMAND_FORMAT;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"AdityaA1998"},"content":"    public void handleKeyPress_tab() {"},{"lineNumber":136,"author":{"gitID":"AdityaA1998"},"content":"        // add command"},{"lineNumber":137,"author":{"gitID":"AdityaA1998"},"content":"        commandBoxHandle.setInput(COMMAND_ADD_INCOMPLETE);"},{"lineNumber":138,"author":{"gitID":"AdityaA1998"},"content":"        assertInputHistory(KeyCode.TAB, COMMAND_ADD_COMPLETE);"},{"lineNumber":139,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":140,"author":{"gitID":"AdityaA1998"},"content":"        // edit command"},{"lineNumber":141,"author":{"gitID":"AdityaA1998"},"content":"        commandBoxHandle.setInput(COMMAND_EDIT_INCOMPLETE);"},{"lineNumber":142,"author":{"gitID":"AdityaA1998"},"content":"        assertInputHistory(KeyCode.TAB, COMMAND_EDIT_COMPLETE);"},{"lineNumber":143,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":144,"author":{"gitID":"AdityaA1998"},"content":"        // invalid command"},{"lineNumber":145,"author":{"gitID":"AdityaA1998"},"content":"        commandBoxHandle.setInput(COMMAND_THAT_FAILS);"},{"lineNumber":146,"author":{"gitID":"AdityaA1998"},"content":"        assertInputHistory(KeyCode.TAB, COMMAND_THAT_FAILS);"},{"lineNumber":147,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":19,"-":159}},{"path":"src/test/java/seedu/progresschecker/commons/util/StringUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.hamcrest.CoreMatchers.containsString;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.hamcrest.MatcherAssert.assertThat;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class StringUtilTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void isUnsignedPositiveInteger() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // EP: empty strings"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // EP: not a number"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // EP: zero"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // EP: zero as prefix"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // EP: signed numbers"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // EP: numbers with white space"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\"));  // Spaces in the middle"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            Optional\u003cString\u003e errorMessage) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(exceptionClass);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        StringUtil.containsWordIgnoreCase(sentence, word);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","},{"lineNumber":79,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter cannot be empty\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter should be a single word\"));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *   - any word"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *   - empty string"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *   - one word"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *   - multiple words"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *   - last word in sentence"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     *   - matches multiple words"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // Empty sentence"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // Matches a partial word only"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":134,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Equivalence Partitions: null, valid throwable object"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void getDetails_exceptionGiven() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                   containsString(\"java.io.FileNotFoundException: file not found\"));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        StringUtil.getDetails(null);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":1,"-":158}},{"path":"src/test/java/seedu/progresschecker/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_YEAR_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Major;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Year;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, \"1\" + INVALID_USERNAME_DESC,"},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":"                GithubUsername.MESSAGE_USERNAME_CONSTRAINTS); // invalid username"},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, \"1\" + INVALID_MAJOR_DESC, Major.MESSAGE_MAJOR_CONSTRAINTS); // invalid major"},{"lineNumber":103,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, \"1\" + INVALID_YEAR_DESC, Year.MESSAGE_YEAR_CONSTRAINTS); // invalid year"},{"lineNumber":104,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY,"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC,"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + INVALID_USERNAME_DESC"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                 + VALID_MAJOR_AMY + VALID_PHONE_AMY + VALID_YEAR_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND + USERNAME_DESC_AMY"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + MAJOR_DESC_AMY + YEAR_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withUsername(VALID_USERNAME_AMY)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                .withMajor(VALID_MAJOR_AMY).withYear(VALID_YEAR_AMY)"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":179,"author":{"gitID":"EdwardKSG"},"content":"        // username"},{"lineNumber":180,"author":{"gitID":"EdwardKSG"},"content":"        userInput \u003d targetIndex.getOneBased() + USERNAME_DESC_AMY;"},{"lineNumber":181,"author":{"gitID":"EdwardKSG"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withUsername(VALID_USERNAME_AMY).build();"},{"lineNumber":182,"author":{"gitID":"EdwardKSG"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":"        // major"},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":"        userInput \u003d targetIndex.getOneBased() + MAJOR_DESC_AMY;"},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withMajor(VALID_MAJOR_AMY).build();"},{"lineNumber":188,"author":{"gitID":"EdwardKSG"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":189,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":190,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + MAJOR_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + MAJOR_DESC_AMY + EMAIL_DESC_AMY + YEAR_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":204,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":205,"author":{"gitID":"-"},"content":"                + USERNAME_DESC_AMY + USERNAME_DESC_BOB;"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withUsername(VALID_USERNAME_BOB)"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                .withMajor(VALID_MAJOR_BOB).withYear(VALID_YEAR_BOB).withTags("},{"lineNumber":210,"author":{"gitID":"-"},"content":"                VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + USERNAME_DESC_BOB"},{"lineNumber":227,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB + PHONE_DESC_BOB;"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":229,"author":{"gitID":"-"},"content":"                .withUsername(VALID_USERNAME_BOB).withMajor(VALID_MAJOR_BOB).withYear(VALID_YEAR_BOB).build();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":19,"-":225}},{"path":"src/test/java/seedu/progresschecker/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Major;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.Assert;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_MAJOR \u003d \" \";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String INVALID_USERNAME \u003d \"R@chelGithub\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_MAJOR \u003d \"Computer Science\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_USERNAME \u003d \"RachelGithub\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":137,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"EdwardKSG"},"content":"    public void parseUsername_null_throwsNullPointerException() {"},{"lineNumber":139,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUsername((String) null));"},{"lineNumber":140,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUsername((Optional\u003cString\u003e) null));"},{"lineNumber":141,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":143,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"EdwardKSG"},"content":"    public void parseUsername_invalidValue_throwsIllegalValueException() {"},{"lineNumber":145,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseUsername(INVALID_USERNAME));"},{"lineNumber":146,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseUsername("},{"lineNumber":147,"author":{"gitID":"EdwardKSG"},"content":"                Optional.of(INVALID_USERNAME)));"},{"lineNumber":148,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":150,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"EdwardKSG"},"content":"    public void parseUsername_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":152,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(ParserUtil.parseUsername(Optional.empty()).isPresent());"},{"lineNumber":153,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":155,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"EdwardKSG"},"content":"    public void parseUsername_validValueWithoutWhitespace_returnsUsername() throws Exception {"},{"lineNumber":157,"author":{"gitID":"EdwardKSG"},"content":"        GithubUsername expectedUsername \u003d new GithubUsername(VALID_USERNAME);"},{"lineNumber":158,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expectedUsername, ParserUtil.parseUsername(VALID_USERNAME));"},{"lineNumber":159,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(Optional.of(expectedUsername), ParserUtil.parseUsername(Optional.of(VALID_USERNAME)));"},{"lineNumber":160,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":162,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"EdwardKSG"},"content":"    public void parseUsername_validValueWithWhitespace_returnsTrimmedUsername() throws Exception {"},{"lineNumber":164,"author":{"gitID":"EdwardKSG"},"content":"        String usernameWithWhitespace \u003d WHITESPACE + VALID_USERNAME + WHITESPACE;"},{"lineNumber":165,"author":{"gitID":"EdwardKSG"},"content":"        GithubUsername expectedUsername \u003d new GithubUsername(VALID_USERNAME);"},{"lineNumber":166,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expectedUsername, ParserUtil.parseUsername(usernameWithWhitespace));"},{"lineNumber":167,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(Optional.of(expectedUsername), ParserUtil.parseUsername(Optional.of(usernameWithWhitespace)));"},{"lineNumber":168,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":170,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":171,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"EdwardKSG"},"content":"    public void parseMajor_null_throwsNullPointerException() {"},{"lineNumber":173,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMajor((String) null));"},{"lineNumber":174,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMajor((Optional\u003cString\u003e) null));"},{"lineNumber":175,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":177,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"EdwardKSG"},"content":"    public void parseMajor_invalidValue_throwsIllegalValueException() {"},{"lineNumber":179,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseMajor(INVALID_MAJOR));"},{"lineNumber":180,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseMajor(Optional.of(INVALID_MAJOR)));"},{"lineNumber":181,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":"    public void parseMajor_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(ParserUtil.parseMajor(Optional.empty()).isPresent());"},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":188,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"EdwardKSG"},"content":"    public void parseMajor_validValueWithoutWhitespace_returnsMajor() throws Exception {"},{"lineNumber":190,"author":{"gitID":"EdwardKSG"},"content":"        Major expectedMajor \u003d new Major(VALID_MAJOR);"},{"lineNumber":191,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expectedMajor, ParserUtil.parseMajor(VALID_MAJOR));"},{"lineNumber":192,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(Optional.of(expectedMajor), ParserUtil.parseMajor(Optional.of(VALID_MAJOR)));"},{"lineNumber":193,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":195,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":196,"author":{"gitID":"EdwardKSG"},"content":"    public void parseMajor_validValueWithWhitespace_returnsTrimmedMajor() throws Exception {"},{"lineNumber":197,"author":{"gitID":"EdwardKSG"},"content":"        String majorWithWhitespace \u003d WHITESPACE + VALID_MAJOR + WHITESPACE;"},{"lineNumber":198,"author":{"gitID":"EdwardKSG"},"content":"        Major expectedMajor \u003d new Major(VALID_MAJOR);"},{"lineNumber":199,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expectedMajor, ParserUtil.parseMajor(majorWithWhitespace));"},{"lineNumber":200,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(Optional.of(expectedMajor), ParserUtil.parseMajor(Optional.of(majorWithWhitespace)));"},{"lineNumber":201,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":67,"-":218}},{"path":"src/test/java/seedu/progresschecker/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_YEAR_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_AMY;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_BOB;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AddCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Major;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Year;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.PersonBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withUsername(VALID_USERNAME_BOB)"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                .withMajor(VALID_MAJOR_BOB).withYear(VALID_YEAR_BOB)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":88,"author":{"gitID":"EdwardKSG"},"content":"        // multiple usernames - last name accepted"},{"lineNumber":89,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_AMY"},{"lineNumber":90,"author":{"gitID":"EdwardKSG"},"content":"                        + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":91,"author":{"gitID":"EdwardKSG"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":92,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":93,"author":{"gitID":"EdwardKSG"},"content":"        // multiple majors - last major accepted"},{"lineNumber":94,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":95,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_AMY + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":96,"author":{"gitID":"EdwardKSG"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":97,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":98,"author":{"gitID":"EdwardKSG"},"content":"        // multiple years - last year accepted"},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_AMY + YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withUsername(VALID_USERNAME_BOB).withMajor(VALID_MAJOR_BOB)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                .withYear(VALID_YEAR_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withUsername(VALID_USERNAME_AMY).withMajor(VALID_MAJOR_AMY)"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .withYear(VALID_YEAR_AMY).withTags().build();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB, expectedMessage);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB, expectedMessage);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + USERNAME_DESC_BOB"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB, expectedMessage);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":142,"author":{"gitID":"EdwardKSG"},"content":"        // missing username prefix"},{"lineNumber":143,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_USERNAME_BOB"},{"lineNumber":144,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB, expectedMessage);"},{"lineNumber":145,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":146,"author":{"gitID":"EdwardKSG"},"content":"        // missing major prefix"},{"lineNumber":147,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":148,"author":{"gitID":"EdwardKSG"},"content":"                + VALID_MAJOR_BOB + YEAR_DESC_BOB, expectedMessage);"},{"lineNumber":149,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":150,"author":{"gitID":"EdwardKSG"},"content":"        // missing year prefix"},{"lineNumber":151,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":152,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_BOB + VALID_YEAR_BOB, expectedMessage);"},{"lineNumber":153,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_USERNAME_BOB"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                + VALID_MAJOR_BOB + VALID_YEAR_BOB, expectedMessage);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + USERNAME_DESC_BOB"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":178,"author":{"gitID":"EdwardKSG"},"content":"        // invalid username"},{"lineNumber":179,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_USERNAME_DESC"},{"lineNumber":180,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":181,"author":{"gitID":"EdwardKSG"},"content":"                GithubUsername.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":"        // invalid major"},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":"                + INVALID_MAJOR_DESC + YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":"                Major.MESSAGE_MAJOR_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":188,"author":{"gitID":"EdwardKSG"},"content":"        // invalid year"},{"lineNumber":189,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":190,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_BOB + INVALID_YEAR_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":191,"author":{"gitID":"EdwardKSG"},"content":"                Year.MESSAGE_YEAR_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                + INVALID_MAJOR_DESC + YEAR_DESC_BOB,"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":206,"author":{"gitID":"-"},"content":"                + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":207,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":45,"-":164}},{"path":"src/test/java/seedu/progresschecker/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"        // different major -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withMajor(VALID_MAJOR_BOB).build();"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"        // different year -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withYear(VALID_YEAR_BOB).build();"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":9,"-":56}},{"path":"src/test/java/seedu/progresschecker/logic/commands/UploadCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Livian1107"},"content":"//@@author: Livian1107"},{"lineNumber":9,"author":{"gitID":"Livian1107"},"content":"public class UploadCommandTest {"},{"lineNumber":10,"author":{"gitID":"Livian1107"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"Livian1107"},"content":"    public void isValidLocalPath() {"},{"lineNumber":12,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":13,"author":{"gitID":"Livian1107"},"content":"        // valid photo path"},{"lineNumber":14,"author":{"gitID":"Livian1107"},"content":"        assertTrue(UploadCommand.isValidLocalPath(\"C:\\\\Users\\\\Livian\\\\desktop\\\\1.png\"));"},{"lineNumber":15,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":"        // empty path"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"        assertFalse(UploadCommand.isValidLocalPath(\"\")); // empty string"},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":"        assertFalse(UploadCommand.isValidLocalPath(\" \")); // spaces only"},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":"        // invalid extension"},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":"        assertFalse(UploadCommand.isValidLocalPath(\"C:\\\\photo.gif\"));"},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":"        assertFalse(UploadCommand.isValidLocalPath(\"D:\\\\photo.bmp\"));"},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":"        // invalid path format"},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":"        assertFalse(UploadCommand.isValidLocalPath(\"C:\\\\\\\\1.jpg\")); // too many backslashes"},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":"        assertFalse(UploadCommand.isValidLocalPath(\"C:\\\\\")); // no file name"},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":21,"-":7}},{"path":"src/test/java/seedu/progresschecker/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ProgressChecker;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ReadOnlyProgressChecker;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.PhotoPath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.exceptions.DuplicatePhotoException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        public void loginGithub(GitDetails gitdetails) throws IOException, CommandException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        public void createIssueOnGitHub(Issue issue) throws IOException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called. \");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"AdityaA1998"},"content":"        public void closeIssueOnGithub(Index index) throws IOException {"},{"lineNumber":119,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":120,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"AdityaA1998"},"content":"        public void reopenIssueOnGithub(Index index) throws IOException, CommandException {"},{"lineNumber":129,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":130,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        public void sort() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyProgressChecker newData) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public ReadOnlyProgressChecker getProgressChecker() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        public void uploadPhoto(Person target, String path)"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"AdityaA1998"},"content":"        public void updateIssue(Index index, Issue editedIssue) throws IOException {"},{"lineNumber":178,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":179,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void addPhoto(PhotoPath photoPath) throws DuplicatePhotoException {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        public void updateExercise(Exercise target, Exercise editedExercise) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        public ReadOnlyProgressChecker getProgressChecker() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            return new ProgressChecker();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        public ReadOnlyProgressChecker getProgressChecker() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            return new ProgressChecker();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":16,"-":220}},{"path":"src/test/java/seedu/progresschecker/model/person/GithubUsernameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"public class GithubUsernameTest {"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new GithubUsername(null));"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    public void constructor_invalidUsername_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"        String invalidUsername \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new GithubUsername(invalidUsername));"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    public void isValidUsername() {"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"        // null username"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e GithubUsername.isValidUsername(null));"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"        // invalid username"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(GithubUsername.isValidUsername(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(GithubUsername.isValidUsername(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(GithubUsername.isValidUsername(\"^\")); // only non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(GithubUsername.isValidUsername(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"        // valid username"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(GithubUsername.isValidUsername(\"peter jack\")); // alphabets only"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(GithubUsername.isValidUsername(\"12345\")); // numbers only"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(GithubUsername.isValidUsername(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(GithubUsername.isValidUsername(\"Capital Tan\")); // with capital letters"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(GithubUsername.isValidUsername(\"David Roger Jackson Ray Jr 2nd\")); // long usernames"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":33,"-":9}},{"path":"src/test/java/seedu/progresschecker/model/person/MajorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"public class MajorTest {"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Major(null));"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    public void constructor_invalidMajor_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"        String invalidMajor \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Major(invalidMajor));"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    public void isValidMajor() {"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"        // null major"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Major.isValidMajor(null));"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"        // invalid majors"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(Major.isValidMajor(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(Major.isValidMajor(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"        // valid majors"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(Major.isValidMajor(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(Major.isValidMajor(\"-\")); // one character"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(Major.isValidMajor(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long major"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":29,"-":9}},{"path":"src/test/java/guitests/guihandles/CommandBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.ui.CommandBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A handle to the {@code CommandBox} in the GUI."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public CommandBoxHandle(TextField commandBoxNode) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        super(commandBoxNode);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns the text in the command box."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getInput() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean run(String command) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"     * Sets text in the command box."},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public void setInput(String input) {"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        getRootNode().setText(input);"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":7,"-":46}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String MAJOR_FIELD_ID \u003d \"#major\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String YEAR_FIELD_ID \u003d \"#year\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label majorLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label yearLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.majorLabel \u003d getChildNode(MAJOR_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.yearLabel \u003d getChildNode(YEAR_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return majorLabel.getText();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public String getYear() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return yearLabel.getText();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":79,"author":{"gitID":"iNekox3"},"content":"    public List\u003cLabel\u003e getTagLabels() {"},{"lineNumber":80,"author":{"gitID":"iNekox3"},"content":"        return tagLabels;"},{"lineNumber":81,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"iNekox3":4,"-":78}},{"path":"src/main/java/seedu/progresschecker/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.LoadTaskEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.PageLoadChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MODULE_PAGE_URL \u003d"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            \"https://nus-cs2103-ay1718s2.github.io/\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String OUTCOMES_PAGE_PATH \u003d"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            \"website/schedule/week\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String OUTCOMES_PAGE_DOCUMENT \u003d"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            \"/outcomes.html\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final int CURRENT_WEEK \u003d 2;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    // TODO: replace with a default page for each person when API has been implemented"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        loadOutcomesPage(CURRENT_WEEK);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    // TODO: update loading to use API to pull data from Google Tasks"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    // TODO: also check which person is currently selected to display the corresponding data"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void loadOutcomesPage(int index) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        loadPage(MODULE_PAGE_URL + OUTCOMES_PAGE_PATH + index + OUTCOMES_PAGE_DOCUMENT);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"     * Loads the HTML file which contains task information."},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"    public void loadTaskPage(String content) {"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"        loadPageViaString(content);"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"    public void loadPageViaString(String content) {"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"        Platform.runLater(() -\u003e browser.getEngine().loadContent(content));"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private void handlePageLoadChangedEvent(PageLoadChangedEvent event) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        loadOutcomesPage(event.getPageIndex());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":109,"author":{"gitID":"EdwardKSG"},"content":"    @Subscribe"},{"lineNumber":110,"author":{"gitID":"EdwardKSG"},"content":"    private void handleLoadTaskEvent(LoadTaskEvent event)  {"},{"lineNumber":111,"author":{"gitID":"EdwardKSG"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":112,"author":{"gitID":"EdwardKSG"},"content":"        loadTaskPage(event.getContent());"},{"lineNumber":113,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":115,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":19,"-":96}},{"path":"src/main/java/seedu/progresschecker/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.CommandFormatListUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.ListElementPointer;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CommandResult;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"    private static final String CORRECT_COMMAND_WORD \u003d \"find\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    private boolean isCorrectCommandWord \u003d false;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":44,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"        //@@author adityaa1998"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"        //TAB case is used to auto-complete commands"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"        case TAB:"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"            keyEvent.consume();"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"            autocompleteCommad(commandTextField.getText());"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"            break;"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"        default:"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"            //dynamic search implementation"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"            try {"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"                if ((commandTextField.getText().trim().equalsIgnoreCase(CORRECT_COMMAND_WORD)"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"                        || isCorrectCommandWord)) {"},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"                    isCorrectCommandWord \u003d !commandTextField.getText().trim().isEmpty();"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"                    CommandResult commandResult;"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"                    if (keyEvent.getCode() !\u003d KeyCode.BACK_SPACE \u0026\u0026 keyEvent.getCode() !\u003d KeyCode.DELETE) {"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"                        commandResult \u003d logic.execute(commandTextField.getText() + keyEvent.getText());"},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"                    } else {"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"                        commandResult \u003d logic.execute(commandTextField.getText().substring(0,"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"                                commandTextField.getText().length() - 1));"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"                    }"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"                    // process result of the command"},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"                    logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"                    raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"                }"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"            } catch (CommandException | ParseException e) {"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":"                // handle command failure"},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":"                setStyleToIndicateCommandFailure();"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"                logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"                raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":"            //@@author"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":165,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":188,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"AdityaA1998"},"content":"     * Sets the commandbox to completed command format if the entered substring of the command is valid"},{"lineNumber":190,"author":{"gitID":"AdityaA1998"},"content":"     * @param text is the command which is to be autocompleted"},{"lineNumber":191,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"AdityaA1998"},"content":"    private void autocompleteCommad(String text) {"},{"lineNumber":193,"author":{"gitID":"AdityaA1998"},"content":"        ArrayList\u003cString\u003e commandFormatList \u003d CommandFormatListUtil.getCommandFormatList();"},{"lineNumber":194,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":195,"author":{"gitID":"AdityaA1998"},"content":"        //retrieve the list of words which begin with text"},{"lineNumber":196,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cString\u003e autocompleteCommandList \u003d commandFormatList.stream()"},{"lineNumber":197,"author":{"gitID":"AdityaA1998"},"content":"                .filter(s -\u003e s.startsWith(text))"},{"lineNumber":198,"author":{"gitID":"AdityaA1998"},"content":"                .collect(Collectors.toList());"},{"lineNumber":199,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":200,"author":{"gitID":"AdityaA1998"},"content":"        //replace input in text field with matched keyword"},{"lineNumber":201,"author":{"gitID":"AdityaA1998"},"content":"        if (!autocompleteCommandList.isEmpty()) {"},{"lineNumber":202,"author":{"gitID":"AdityaA1998"},"content":"            replaceText(autocompleteCommandList.get(0));"},{"lineNumber":203,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":205,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":58,"-":148}},{"path":"src/main/java/seedu/progresschecker/ui/ExerciseListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":" * Panel containing the list of exercises."},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"public class ExerciseListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"    private static final String FXML \u003d \"ExerciseListPanel.fxml\";"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ExerciseListPanel.class);"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    private ListView\u003cExerciseCard\u003e exerciseListView;"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    public ExerciseListPanel(ObservableList\u003cExercise\u003e exerciseList) {"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"        setConnections(exerciseList);"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"    private void setConnections(ObservableList\u003cExercise\u003e exerciseList) {"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"        ObservableList\u003cExerciseCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"                exerciseList, (exercise) -\u003e new ExerciseCard(exercise));"},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"        exerciseListView.setItems(mappedList);"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"        exerciseListView.setCellFactory(listView -\u003e new ExerciseListViewCell());"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ExerciseCard}."},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"    class ExerciseListViewCell extends ListCell\u003cExerciseCard\u003e {"},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"        @Override"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"        protected void updateItem(ExerciseCard exercise, boolean empty) {"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":"            super.updateItem(exercise, empty);"},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":48,"author":{"gitID":"iNekox3"},"content":"            if (empty || exercise \u003d\u003d null) {"},{"lineNumber":49,"author":{"gitID":"iNekox3"},"content":"                setGraphic(null);"},{"lineNumber":50,"author":{"gitID":"iNekox3"},"content":"                setText(null);"},{"lineNumber":51,"author":{"gitID":"iNekox3"},"content":"            } else {"},{"lineNumber":52,"author":{"gitID":"iNekox3"},"content":"                setGraphic(exercise.getRoot());"},{"lineNumber":53,"author":{"gitID":"iNekox3"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":57,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":43,"-":14}},{"path":"src/main/java/seedu/progresschecker/ui/ExerciseCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":" * An UI component that displays information of an {@code Exercise}."},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":"public class ExerciseCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"    private static final String FXML \u003d \"ExerciseListCard.fxml\";"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"    public final Exercise exercise;"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"    private Label questionIndex;"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    private Label questionType;"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"    private Label question;"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"    private Label studentAnswer;"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"    private Label modelAnswer;"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"    public ExerciseCard(Exercise exercise) {"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"        super(FXML);"},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"        this.exercise \u003d exercise;"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"        questionIndex.setText(exercise.getQuestionIndex().value);"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"        question.setText(exercise.getQuestion().value);"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"        studentAnswer.setText(exercise.getStudentAnswer().value);"},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"        modelAnswer.setText(exercise.getModelAnswer().value);"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":30,"-":7}},{"path":"src/main/java/seedu/progresschecker/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_EXERCISE_INDEX \u003d \"Exercise %1$s does not exist\";"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX \u003d \"The issue index provided is invalid\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":1,"-":14}},{"path":"src/main/java/seedu/progresschecker/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Config;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.GuiSettings;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.AppUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.Logic;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String ICON \u003d \"/images/progress_checker_32.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final int MIN_HEIGHT \u003d 600;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final int MIN_WIDTH \u003d 450;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private ExerciseListPanel exerciseListPanel;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private StackPane exerciseListPanelPlaceholder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setIcon(ICON);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        setWindowMinSize();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":110,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":116,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":120,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        exerciseListPanel \u003d new ExerciseListPanel(logic.getFilteredExerciseList());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        exerciseListPanelPlaceholder.getChildren().add(exerciseListPanel.getRoot());"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getProgressCheckerFilePath());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"Livian1107"},"content":"    //@@author: Livian1107"},{"lineNumber":190,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"Livian1107"},"content":"     * Switches to the Night Theme."},{"lineNumber":192,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"Livian1107"},"content":"    @FXML"},{"lineNumber":194,"author":{"gitID":"Livian1107"},"content":"    public void handleNightTheme() {"},{"lineNumber":195,"author":{"gitID":"Livian1107"},"content":"        Scene scene \u003d primaryStage.getScene();"},{"lineNumber":196,"author":{"gitID":"Livian1107"},"content":"        scene.getStylesheets().setAll(\"view/DarkTheme.css\");"},{"lineNumber":197,"author":{"gitID":"Livian1107"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":198,"author":{"gitID":"Livian1107"},"content":"        show();"},{"lineNumber":199,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":201,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"Livian1107"},"content":"     * Switches to the Day Theme."},{"lineNumber":203,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"Livian1107"},"content":"    @FXML"},{"lineNumber":205,"author":{"gitID":"Livian1107"},"content":"    public void handleDayTheme() {"},{"lineNumber":206,"author":{"gitID":"Livian1107"},"content":"        Scene scene \u003d primaryStage.getScene();"},{"lineNumber":207,"author":{"gitID":"Livian1107"},"content":"        scene.getStylesheets().setAll(\"view/DayTheme.css\");"},{"lineNumber":208,"author":{"gitID":"Livian1107"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":209,"author":{"gitID":"Livian1107"},"content":"        show();"},{"lineNumber":210,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"Livian1107"},"content":"    //@@author"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"Livian1107"},"content":"    //@@author Livian1107"},{"lineNumber":240,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"Livian1107"},"content":"     * Sets the icon of Main Window"},{"lineNumber":242,"author":{"gitID":"Livian1107"},"content":"     * @param icon with given path"},{"lineNumber":243,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"Livian1107"},"content":"    private void setIcon(String icon) {"},{"lineNumber":245,"author":{"gitID":"Livian1107"},"content":"        primaryStage.getIcons().setAll(AppUtil.getImage(icon));"},{"lineNumber":246,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":248,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"Livian1107"},"content":"     * Sets the minimum size of the main window"},{"lineNumber":250,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"Livian1107"},"content":"    private void setWindowMinSize() {"},{"lineNumber":252,"author":{"gitID":"Livian1107"},"content":"        primaryStage.setMinHeight(MIN_HEIGHT);"},{"lineNumber":253,"author":{"gitID":"Livian1107"},"content":"        primaryStage.setMinWidth(MIN_WIDTH);"},{"lineNumber":254,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"Livian1107"},"content":"    //@@author"},{"lineNumber":256,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Livian1107":40,"-":216}},{"path":"src/main/java/seedu/progresschecker/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.shape.Rectangle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.MainApp;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"    private static final String[] TAG_COLORS \u003d"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"        { \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\" };"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Label major;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Label year;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Label username;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private Rectangle profile;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        major.setText(person.getMajor().value);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        year.setText(person.getYear().value);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        username.setText(person.getUsername().username);"},{"lineNumber":66,"author":{"gitID":"iNekox3"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":67,"author":{"gitID":"iNekox3"},"content":"            Label label \u003d new Label(tag.tagName);"},{"lineNumber":68,"author":{"gitID":"iNekox3"},"content":"            label.getStyleClass().add(getTagColor(tag.tagName));"},{"lineNumber":69,"author":{"gitID":"iNekox3"},"content":"            tags.getChildren().add(label);"},{"lineNumber":70,"author":{"gitID":"iNekox3"},"content":"        });"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        loadPhoto();"},{"lineNumber":72,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":74,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"iNekox3"},"content":"     * Get a deterministic tag color based off tag\u0027s name value."},{"lineNumber":76,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"iNekox3"},"content":"    private String getTagColor(String tagName) {"},{"lineNumber":78,"author":{"gitID":"iNekox3"},"content":"        int index \u003d getValueOfString(tagName) % TAG_COLORS.length;"},{"lineNumber":79,"author":{"gitID":"iNekox3"},"content":"        return TAG_COLORS[index];"},{"lineNumber":80,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Loads profile photo"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void loadPhoto() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String photoPath \u003d person.getPhotoPath();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Image profilePhoto;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (photoPath.contains(\"contact\")) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            File photo \u003d new File(photoPath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            if (photo.exists() \u0026\u0026 !photo.isDirectory()) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                String url \u003d photo.toURI().toString();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                profilePhoto \u003d new Image(url);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                profile.setFill(new ImagePattern(profilePhoto));"},{"lineNumber":94,"author":{"gitID":"iNekox3"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            profilePhoto \u003d new Image("},{"lineNumber":97,"author":{"gitID":"-"},"content":"                    MainApp.class.getResourceAsStream(person.getDefaultPath()));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            profile.setFill(new ImagePattern(profilePhoto));"},{"lineNumber":99,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"iNekox3"},"content":"     * Adds each letter of given string into an integer."},{"lineNumber":104,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"iNekox3"},"content":"    private int getValueOfString(String tagName) {"},{"lineNumber":106,"author":{"gitID":"iNekox3"},"content":"        int sum \u003d 0;"},{"lineNumber":107,"author":{"gitID":"iNekox3"},"content":"        for (char c : tagName.toCharArray()) {"},{"lineNumber":108,"author":{"gitID":"iNekox3"},"content":"            sum +\u003d c;"},{"lineNumber":109,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"iNekox3"},"content":"        return sum;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"iNekox3":28,"-":102}},{"path":"src/main/java/seedu/progresschecker/commons/util/StringUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class StringUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true //for a word that contains the substring"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(word);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        for (String wordInSentence: wordsInPreppedSentence) {"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"            for (int i \u003d 0; i \u003c\u003d wordInSentence.length() - preppedWord.length(); i++) {"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"                if (wordInSentence.substring(i, i + preppedWord.length()).equalsIgnoreCase(preppedWord)) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                    return true;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(t);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(s);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns true if {@code s} is within the range 2 to 13."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * e.g. 2, 3, 4, ..., 13 \u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static boolean isWithinRange(String s) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(s);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return value \u003e\u003d ViewCommand.MIN_WEEK_NUMBER \u0026\u0026 value \u003c\u003d ViewCommand.MAX_WEEK_NUMBER;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":4,"-":89}},{"path":"src/main/java/seedu/progresschecker/commons/events/ui/PageLoadChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":" * Represents a page change in the Browser Panel"},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":"public class PageLoadChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":"    public final int targetIndex;"},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"    public PageLoadChangedEvent(Index targetIndex) {"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"        this.targetIndex \u003d targetIndex.getOneBased();"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"    public int getPageIndex() {"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"        return targetIndex;"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":21,"-":5}},{"path":"src/main/java/seedu/progresschecker/logic/parser/UploadCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UploadCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":14,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Livian1107"},"content":" * Parses input arguments and creates a new UploadCommand object"},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"public class UploadCommandParser  implements Parser\u003cUploadCommand\u003e  {"},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":"     * Parses the given {@code String} of arguments in the context of the UploadCommand"},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":"     * and returns an UploadCommand object for execution."},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":"    public UploadCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(args);"},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":"        Index index;"},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":"        String[] content \u003d args.trim().split(\" \");"},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":"            index \u003d ParserUtil.parseIndex(content[0]);"},{"lineNumber":29,"author":{"gitID":"Livian1107"},"content":"            return new UploadCommand(index, content[1]);"},{"lineNumber":30,"author":{"gitID":"Livian1107"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":31,"author":{"gitID":"Livian1107"},"content":"            throw new ParseException("},{"lineNumber":32,"author":{"gitID":"Livian1107"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UploadCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"Livian1107"},"content":"        } catch (IOException e) {"},{"lineNumber":34,"author":{"gitID":"Livian1107"},"content":"            throw new ParseException("},{"lineNumber":35,"author":{"gitID":"Livian1107"},"content":"                    UploadCommand.MESSAGE_IMAGE_NOT_FOUND);"},{"lineNumber":36,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":38,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":27,"-":12}},{"path":"src/main/java/seedu/progresschecker/logic/parser/ReopenIssueCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.ReopenIssueCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":" * Parses input arguments and creates a new CloseIssueCommand object"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"public class ReopenIssueCommandParser implements Parser\u003cReopenIssueCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     * Parses the given {@code String} of arguments in the context of the ReopenIssueCommand"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"     * and returns an ReopenIssueCommand object for execution."},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public ReopenIssueCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"            return new ReopenIssueCommand(index);"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReopenIssueCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":24,"-":7}},{"path":"src/main/java/seedu/progresschecker/logic/CommandFormatListUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AddCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ClearCommand;"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.CloseIssueCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CreateIssue;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand;"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.EditIssueCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ExitCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.FindCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.GitLoginCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.ReopenIssueCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.SelectCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.SortCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UploadCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewTaskListCommand;"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":" * Initialises and returns a list which contains different command formats"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"public final class CommandFormatListUtil {"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    private static ArrayList\u003cString\u003e commandFormatList;"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    public static ArrayList\u003cString\u003e getCommandFormatList () {"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"        createCommandFormatList();"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        return commandFormatList;"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"     * Creates commandFormatList for existing commands"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    private static void createCommandFormatList() {"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(AddCommand.COMMAND_FORMAT);"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(ClearCommand.COMMAND_WORD);"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(DeleteCommand.COMMAND_FORMAT);"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(EditCommand.COMMAND_FORMAT);"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(ExitCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(FindCommand.COMMAND_FORMAT);"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(HelpCommand.COMMAND_WORD);"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(ListCommand.COMMAND_WORD);"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(RedoCommand.COMMAND_WORD);"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(SelectCommand.COMMAND_FORMAT);"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(SortCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(UndoCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(UploadCommand.COMMAND_FORMAT);"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(ViewCommand.COMMAND_FORMAT);"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(ViewTaskListCommand.COMMAND_FORMAT);"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(CreateIssue.COMMAND_FORMAT);"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(EditIssueCommand.COMMAND_FORMAT);"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(ReopenIssueCommand.COMMAND_FORMAT);"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(CloseIssueCommand.COMMAND_FORMAT);"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(GitLoginCommand.COMMAND_FORMAT);"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"        //sorting the commandFormatList"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"        Collections.sort(commandFormatList);"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":47,"-":21}},{"path":"src/main/java/seedu/progresschecker/logic/parser/ResetTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ResetTaskCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":" * Parses input arguments and creates a new ResetTaskCommand object"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"public class ResetTaskCommandParser implements Parser\u003cResetTaskCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"     * Parses the given {@code String} of arguments in the context of the ResetTaskCommand"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"     * and returns an ResetTaskCommand object for execution."},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public ResetTaskCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"            int index \u003d ParserUtil.parseTaskIndex(args);"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"            return new ResetTaskCommand(index);"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ResetTaskCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":22,"-":8}},{"path":"src/main/java/seedu/progresschecker/logic/parser/EditIssueCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_ASSIGNEES;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_BODY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_LABEL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_MILESTONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.EditIssueCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Assignees;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Labels;"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":" * Parses input arguments and creates a new EditIssueCommand object"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"public class EditIssueCommandParser implements Parser\u003cEditIssueCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"     * Parses the given {@code String} of arguments in the context of the EditIssueCommand"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"     * and returns an EditIssueCommand object for execution."},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    public EditIssueCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(args);"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_ASSIGNEES, PREFIX_MILESTONE, PREFIX_BODY,"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"                        PREFIX_LABEL);"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"        Index index;"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditIssueCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"        EditIssueCommand.EditIssueDescriptor editIssueDescriptor \u003d new EditIssueCommand.EditIssueDescriptor();"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"            ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE)).ifPresent(editIssueDescriptor::setTitle);"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"            parseAssigneesForEdit(argMultimap.getAllValues(PREFIX_ASSIGNEES))"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"                    .ifPresent(editIssueDescriptor::setAssignees);"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"            ParserUtil.parseMilestone(argMultimap.getValue(PREFIX_MILESTONE))"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"                    .ifPresent(editIssueDescriptor::setMilestone);"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"            ParserUtil.parseBody(argMultimap.getValue(PREFIX_BODY))"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"                    .ifPresent(editIssueDescriptor::setBody);"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"            parseLabelsForEdit(argMultimap.getAllValues(PREFIX_LABEL)).ifPresent(editIssueDescriptor::setLabels);"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"        if (!editIssueDescriptor.isAnyFieldEdited()) {"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(EditIssueCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"            return new EditIssueCommand(index, editIssueDescriptor);"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"        } catch (CommandException ce) {"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(EditIssueCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException ie) {"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(EditIssueCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"     * Parses {@code Collection\u003cString\u003e labels} into a {@code Set\u003cLabels\u003e} if {@code labels} is non-empty."},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"     * If {@code labels} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"     * {@code Set\u003cLabels\u003e} containing zero labels."},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"    private Optional\u003cSet\u003cLabels\u003e\u003e parseLabelsForEdit(Collection\u003cString\u003e labels) throws IllegalValueException {"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"        assert labels !\u003d null;"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"        if (labels.isEmpty()) {"},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"            return Optional.empty();"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"        Collection\u003cString\u003e labelSet \u003d labels.size() \u003d\u003d 1 \u0026\u0026 labels.contains(\"\") ? Collections.emptySet() : labels;"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"        return Optional.of(ParserUtil.parseLabels(labels));"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"     * Parses {@code Collection\u003cString\u003e assignees} into a {@code Set\u003cAssignees\u003e} if {@code assignees} is non-empty."},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"     * If {@code assignees} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"     * {@code Set\u003cAssignees\u003e} containing zero assignees."},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":"    private Optional\u003cSet\u003cAssignees\u003e\u003e parseAssigneesForEdit(Collection\u003cString\u003e assignees) throws IllegalValueException {"},{"lineNumber":98,"author":{"gitID":"AdityaA1998"},"content":"        assert assignees !\u003d null;"},{"lineNumber":99,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":100,"author":{"gitID":"AdityaA1998"},"content":"        if (assignees.isEmpty()) {"},{"lineNumber":101,"author":{"gitID":"AdityaA1998"},"content":"            return Optional.empty();"},{"lineNumber":102,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"AdityaA1998"},"content":"        Collection\u003cString\u003e assigneesSet \u003d assignees.size() \u003d\u003d 1"},{"lineNumber":104,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 assignees.contains(\"\") ? Collections.emptySet() : assignees;"},{"lineNumber":105,"author":{"gitID":"AdityaA1998"},"content":"        return Optional.of(ParserUtil.parseAssignees(assignees));"},{"lineNumber":106,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":86,"-":21}},{"path":"src/main/java/seedu/progresschecker/logic/parser/AnswerCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AnswerCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionIndex;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.StudentAnswer;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":" * Parses input arguments and creates a new AnswerCommand object"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"public class AnswerCommandParser implements Parser\u003cAnswerCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    private static final int QUESTION_INDEX_INDEX \u003d 0;"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"    private static final int ANSWER_INDEX \u003d 1;"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"     * Parses the given {@code String} of arguments in the context of the AnswerCommand"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"     * and returns an AnswerCommand object for execution."},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    public AnswerCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"            String[] content \u003d args.trim().split(\" \", 2);"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"            QuestionIndex questionIndex;"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"            questionIndex \u003d ParserUtil.parseQuestionIndex(content[QUESTION_INDEX_INDEX]);"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"            StudentAnswer studentAnswer \u003d ParserUtil.parseStudentAnswer(content[ANSWER_INDEX]);"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"            return new AnswerCommand(questionIndex, studentAnswer);"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AnswerCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AnswerCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":32,"-":11}},{"path":"src/main/java/seedu/progresschecker/logic/parser/ViewTaskListCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewTaskListCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":" * Parses input arguments and creates a new ViewTaskListCommand object"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"public class ViewTaskListCommandParser implements Parser\u003cViewTaskListCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewTaskListCommand"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"     * and returns an ViewTaskListCommand object for execution."},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public ViewTaskListCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"            String title \u003d ParserUtil.parseTaskTitle(args);"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"            return new ViewTaskListCommand(); // title);"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewTaskListCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":21,"-":8}},{"path":"src/main/java/seedu/progresschecker/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ViewTaskListCommand.MAX_TITLE_LENGTH;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ViewTaskListCommand.MESSAGE_TITLE_CONSTRAINTS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.StringUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Passcode;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Repository;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Username;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionIndex;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.StudentAnswer;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Assignees;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Body;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Labels;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Milestone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Title;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Major;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Year;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":35,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"     * Parses {@code String} into an {@code int} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"     * trimmed."},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"    public static int parseTaskIndex(String index) throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"        String trimmedIndex \u003d index.trim();"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"        return Integer.parseInt(trimmedIndex);"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     *         and not within desired range)."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static Index parseIndexRange(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex) || !StringUtil.isWithinRange(trimmedIndex)) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":90,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"EdwardKSG"},"content":"     * Parses a {@code String Title} into a {@code String}."},{"lineNumber":92,"author":{"gitID":"EdwardKSG"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":93,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":94,"author":{"gitID":"EdwardKSG"},"content":"     * @throws IllegalValueException if the given {@code Title} is invalid."},{"lineNumber":95,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"EdwardKSG"},"content":"    public static String parseTaskTitle(String title) throws IllegalValueException {"},{"lineNumber":97,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(title);"},{"lineNumber":98,"author":{"gitID":"EdwardKSG"},"content":"        String trimmedTitle \u003d title.trim();"},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":"        if (title.length() \u003e MAX_TITLE_LENGTH) {"},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":"            throw new IllegalValueException(MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"        return trimmedTitle;"},{"lineNumber":103,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"AdityaA1998"},"content":"    //@@author adityaa1998"},{"lineNumber":131,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String title} into a {@code Title}."},{"lineNumber":133,"author":{"gitID":"AdityaA1998"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":134,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":135,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IllegalValueException if the given {@code title} is invalid."},{"lineNumber":136,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":138,"author":{"gitID":"AdityaA1998"},"content":"    public static Title parseTitle(String title) throws IllegalValueException {"},{"lineNumber":139,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(title);"},{"lineNumber":140,"author":{"gitID":"AdityaA1998"},"content":"        String trimmedTitle \u003d title.trim();"},{"lineNumber":141,"author":{"gitID":"AdityaA1998"},"content":"        if (!Title.isValidTitle(trimmedTitle)) {"},{"lineNumber":142,"author":{"gitID":"AdityaA1998"},"content":"            throw new IllegalValueException(Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"AdityaA1998"},"content":"        return new Title(trimmedTitle);"},{"lineNumber":145,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":147,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code Optional\u003cString\u003e title} into an {@code Optional\u003cName\u003e} if {@code title} is present."},{"lineNumber":149,"author":{"gitID":"AdityaA1998"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":150,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"AdityaA1998"},"content":"    public static Optional\u003cTitle\u003e parseTitle(Optional\u003cString\u003e title) throws IllegalValueException {"},{"lineNumber":152,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(title);"},{"lineNumber":153,"author":{"gitID":"AdityaA1998"},"content":"        return title.isPresent() ? Optional.of(parseTitle(title.get())) : Optional.empty();"},{"lineNumber":154,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":156,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String assignees} into a {@code Assignees}."},{"lineNumber":158,"author":{"gitID":"AdityaA1998"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":159,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":161,"author":{"gitID":"AdityaA1998"},"content":"    public static Assignees parseAssignees(String assignees) {"},{"lineNumber":162,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(assignees);"},{"lineNumber":163,"author":{"gitID":"AdityaA1998"},"content":"        String trimmedAssignees \u003d assignees.trim();"},{"lineNumber":164,"author":{"gitID":"AdityaA1998"},"content":"        return new Assignees(trimmedAssignees);"},{"lineNumber":165,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":167,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"AdityaA1998"},"content":"     * Parses {@code Collection\u003cString\u003e assignees} into a {@code Set\u003cAssignees\u003e}."},{"lineNumber":169,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"AdityaA1998"},"content":"    public static Set\u003cAssignees\u003e parseAssignees(Collection\u003cString\u003e assignees) throws IllegalValueException {"},{"lineNumber":171,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(assignees);"},{"lineNumber":172,"author":{"gitID":"AdityaA1998"},"content":"        final Set\u003cAssignees\u003e assigneesSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":173,"author":{"gitID":"AdityaA1998"},"content":"        for (String assigneeName : assignees) {"},{"lineNumber":174,"author":{"gitID":"AdityaA1998"},"content":"            assigneesSet.add(parseAssignees(assigneeName));"},{"lineNumber":175,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"AdityaA1998"},"content":"        return assigneesSet;"},{"lineNumber":177,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":179,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String labels} into a {@code Labels}."},{"lineNumber":181,"author":{"gitID":"AdityaA1998"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":182,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":184,"author":{"gitID":"AdityaA1998"},"content":"    public static Labels parseLabels(String labels) {"},{"lineNumber":185,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(labels);"},{"lineNumber":186,"author":{"gitID":"AdityaA1998"},"content":"        String trimmedLabels \u003d labels.trim();"},{"lineNumber":187,"author":{"gitID":"AdityaA1998"},"content":"        return new Labels(trimmedLabels);"},{"lineNumber":188,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":190,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"AdityaA1998"},"content":"     * Parses {@code Collection\u003cString\u003e labels} into a {@code Set\u003cLabels\u003e}."},{"lineNumber":192,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"AdityaA1998"},"content":"    public static Set\u003cLabels\u003e parseLabels(Collection\u003cString\u003e labels) throws IllegalValueException {"},{"lineNumber":194,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(labels);"},{"lineNumber":195,"author":{"gitID":"AdityaA1998"},"content":"        final Set\u003cLabels\u003e labelsSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":196,"author":{"gitID":"AdityaA1998"},"content":"        for (String labelName : labels) {"},{"lineNumber":197,"author":{"gitID":"AdityaA1998"},"content":"            labelsSet.add(parseLabels(labelName));"},{"lineNumber":198,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"AdityaA1998"},"content":"        return labelsSet;"},{"lineNumber":200,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":202,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":203,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String milestone} into a {@code Milestone}."},{"lineNumber":205,"author":{"gitID":"AdityaA1998"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":206,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":207,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IllegalValueException if the given {@code milestone} is invalid."},{"lineNumber":208,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":210,"author":{"gitID":"AdityaA1998"},"content":"    public static Milestone parseMilestone(String milestone) throws IllegalValueException {"},{"lineNumber":211,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(milestone);"},{"lineNumber":212,"author":{"gitID":"AdityaA1998"},"content":"        String trimmedMilestone \u003d milestone.trim();"},{"lineNumber":213,"author":{"gitID":"AdityaA1998"},"content":"        if (!Milestone.isValidMilestone(trimmedMilestone)) {"},{"lineNumber":214,"author":{"gitID":"AdityaA1998"},"content":"            throw new IllegalValueException(Milestone.MESSAGE_MILESTONE_CONSTRAINTS);"},{"lineNumber":215,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"AdityaA1998"},"content":"        return new Milestone(trimmedMilestone);"},{"lineNumber":217,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":219,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code Optional\u003cString\u003e milestone} into an {@code Optional\u003cMilestone\u003e} if {@code milestone} is present."},{"lineNumber":221,"author":{"gitID":"AdityaA1998"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":222,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"AdityaA1998"},"content":"    public static Optional\u003cMilestone\u003e parseMilestone(Optional\u003cString\u003e milestone) throws IllegalValueException {"},{"lineNumber":224,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(milestone);"},{"lineNumber":225,"author":{"gitID":"AdityaA1998"},"content":"        return milestone.isPresent() ? Optional.of(parseMilestone(milestone.get())) : Optional.empty();"},{"lineNumber":226,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":228,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String body} into a {@code Body}."},{"lineNumber":230,"author":{"gitID":"AdityaA1998"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":231,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":233,"author":{"gitID":"AdityaA1998"},"content":"    public static Body parseBody(String body) {"},{"lineNumber":234,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(body);"},{"lineNumber":235,"author":{"gitID":"AdityaA1998"},"content":"        String trimmedBody \u003d body.trim();"},{"lineNumber":236,"author":{"gitID":"AdityaA1998"},"content":"        return new Body(trimmedBody);"},{"lineNumber":237,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":239,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code Optional\u003cString\u003e body} into an {@code Optional\u003cBody\u003e} if {@code body} is present."},{"lineNumber":241,"author":{"gitID":"AdityaA1998"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":242,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"AdityaA1998"},"content":"    public static Optional\u003cBody\u003e parseBody(Optional\u003cString\u003e body) throws IllegalValueException {"},{"lineNumber":244,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(body);"},{"lineNumber":245,"author":{"gitID":"AdityaA1998"},"content":"        return body.isPresent() ? Optional.of(parseBody(body.get())) : Optional.empty();"},{"lineNumber":246,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":248,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String username} into a {@code Username}."},{"lineNumber":250,"author":{"gitID":"AdityaA1998"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":251,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"AdityaA1998"},"content":"    public static Username parseGitUsername(String username) {"},{"lineNumber":253,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(username);"},{"lineNumber":254,"author":{"gitID":"AdityaA1998"},"content":"        String trimmedUsername \u003d username.trim();"},{"lineNumber":255,"author":{"gitID":"AdityaA1998"},"content":"        return new Username(trimmedUsername);"},{"lineNumber":256,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":258,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"AdityaA1998"},"content":"     Parses a {@code Optional\u003cString\u003e username} into an {@code Optional\u003cUsername\u003e} if {@code username} is present."},{"lineNumber":260,"author":{"gitID":"AdityaA1998"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":261,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"AdityaA1998"},"content":"    public static Optional\u003cUsername\u003e parseGitUsername(Optional\u003cString\u003e username) throws IllegalValueException {"},{"lineNumber":263,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(username);"},{"lineNumber":264,"author":{"gitID":"AdityaA1998"},"content":"        return username.isPresent() ? Optional.of(parseGitUsername(username.get())) : Optional.empty();"},{"lineNumber":265,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":267,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String passcode} into a {@code Passcode}."},{"lineNumber":269,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"AdityaA1998"},"content":"    public static Passcode parsePasscode(String passcode) {"},{"lineNumber":271,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(passcode);"},{"lineNumber":272,"author":{"gitID":"AdityaA1998"},"content":"        return new Passcode(passcode);"},{"lineNumber":273,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":275,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"AdityaA1998"},"content":"     Parses a {@code Optional\u003cString\u003e Passcode} into an {@code Optional\u003cPasscode\u003e} if {@code passcpde} is present."},{"lineNumber":277,"author":{"gitID":"AdityaA1998"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":278,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"AdityaA1998"},"content":"    public static Optional\u003cPasscode\u003e parsePasscode(Optional\u003cString\u003e passcode) throws IllegalValueException {"},{"lineNumber":280,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(passcode);"},{"lineNumber":281,"author":{"gitID":"AdityaA1998"},"content":"        return passcode.isPresent() ? Optional.of(parsePasscode(passcode.get())) : Optional.empty();"},{"lineNumber":282,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":284,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":285,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String repositroy} into a {@code Repository}."},{"lineNumber":286,"author":{"gitID":"AdityaA1998"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":287,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":288,"author":{"gitID":"AdityaA1998"},"content":"    public static Repository parseRepository(String repository) {"},{"lineNumber":289,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(repository);"},{"lineNumber":290,"author":{"gitID":"AdityaA1998"},"content":"        String trimmedRepository \u003d repository.trim();"},{"lineNumber":291,"author":{"gitID":"AdityaA1998"},"content":"        return new Repository(trimmedRepository);"},{"lineNumber":292,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":294,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":295,"author":{"gitID":"AdityaA1998"},"content":"     Parses a {@code Optional\u003cString\u003e Repository} into an {@code Optional\u003cRepository\u003e} if {@code repository} is present."},{"lineNumber":296,"author":{"gitID":"AdityaA1998"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":297,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":298,"author":{"gitID":"AdityaA1998"},"content":"    public static Optional\u003cRepository\u003e parseRepository(Optional\u003cString\u003e repository) throws IllegalValueException {"},{"lineNumber":299,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(repository);"},{"lineNumber":300,"author":{"gitID":"AdityaA1998"},"content":"        return repository.isPresent() ? Optional.of(parseRepository(repository.get())) : Optional.empty();"},{"lineNumber":301,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"AdityaA1998"},"content":"    //@@author"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":305,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":306,"author":{"gitID":"EdwardKSG"},"content":"     * Parses a {@code String username} into a {@code GithubUsername}."},{"lineNumber":307,"author":{"gitID":"EdwardKSG"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":308,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":309,"author":{"gitID":"EdwardKSG"},"content":"     * @throws IllegalValueException if the given {@code username} is invalid."},{"lineNumber":310,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":311,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":312,"author":{"gitID":"EdwardKSG"},"content":"    public static GithubUsername parseUsername(String username) throws IllegalValueException {"},{"lineNumber":313,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(username);"},{"lineNumber":314,"author":{"gitID":"EdwardKSG"},"content":"        String trimmedUsername \u003d username.trim();"},{"lineNumber":315,"author":{"gitID":"EdwardKSG"},"content":"        if (!GithubUsername.isValidUsername(trimmedUsername)) {"},{"lineNumber":316,"author":{"gitID":"EdwardKSG"},"content":"            throw new IllegalValueException(GithubUsername.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":317,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":318,"author":{"gitID":"EdwardKSG"},"content":"        return new GithubUsername(trimmedUsername);"},{"lineNumber":319,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":321,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":322,"author":{"gitID":"EdwardKSG"},"content":"     * Parses a {@code Optional\u003cString\u003e username} into an {@code Optional\u003cGithubUsername\u003e}"},{"lineNumber":323,"author":{"gitID":"EdwardKSG"},"content":"     *     if {@code username} is present."},{"lineNumber":324,"author":{"gitID":"EdwardKSG"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":325,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":326,"author":{"gitID":"EdwardKSG"},"content":"    public static Optional\u003cGithubUsername\u003e parseUsername(Optional\u003cString\u003e username) throws IllegalValueException {"},{"lineNumber":327,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(username);"},{"lineNumber":328,"author":{"gitID":"EdwardKSG"},"content":"        return username.isPresent() ? Optional.of(parseUsername(username.get())) : Optional.empty();"},{"lineNumber":329,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":333,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":334,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":335,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":336,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":337,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":338,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":339,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":340,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":342,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":343,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":348,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":349,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":350,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":351,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":352,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":353,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":354,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":357,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":358,"author":{"gitID":"EdwardKSG"},"content":"     * Parses a {@code String major} into an {@code Major}."},{"lineNumber":359,"author":{"gitID":"EdwardKSG"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":360,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":361,"author":{"gitID":"EdwardKSG"},"content":"     * @throws IllegalValueException if the given {@code major} is invalid."},{"lineNumber":362,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":363,"author":{"gitID":"EdwardKSG"},"content":"    public static Major parseMajor(String major) throws IllegalValueException {"},{"lineNumber":364,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(major);"},{"lineNumber":365,"author":{"gitID":"EdwardKSG"},"content":"        String trimmedMajor \u003d major.trim();"},{"lineNumber":366,"author":{"gitID":"EdwardKSG"},"content":"        if (!Major.isValidMajor(trimmedMajor)) {"},{"lineNumber":367,"author":{"gitID":"EdwardKSG"},"content":"            throw new IllegalValueException(Major.MESSAGE_MAJOR_CONSTRAINTS);"},{"lineNumber":368,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":369,"author":{"gitID":"EdwardKSG"},"content":"        return new Major(trimmedMajor);"},{"lineNumber":370,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":371,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":372,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":373,"author":{"gitID":"EdwardKSG"},"content":"     * Parses a {@code Optional\u003cString\u003e major} into an {@code Optional\u003cMajor\u003e} if {@code major} is present."},{"lineNumber":374,"author":{"gitID":"EdwardKSG"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":375,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":376,"author":{"gitID":"EdwardKSG"},"content":"    public static Optional\u003cMajor\u003e parseMajor(Optional\u003cString\u003e major) throws IllegalValueException {"},{"lineNumber":377,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(major);"},{"lineNumber":378,"author":{"gitID":"EdwardKSG"},"content":"        return major.isPresent() ? Optional.of(parseMajor(major.get())) : Optional.empty();"},{"lineNumber":379,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":380,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":381,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":382,"author":{"gitID":"EdwardKSG"},"content":"     * Parses a {@code String year} into an {@code Year}."},{"lineNumber":383,"author":{"gitID":"EdwardKSG"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":384,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":385,"author":{"gitID":"EdwardKSG"},"content":"     * @throws IllegalValueException if the given {@code year} is invalid."},{"lineNumber":386,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":387,"author":{"gitID":"EdwardKSG"},"content":"    public static Year parseYear(String year) throws IllegalValueException {"},{"lineNumber":388,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(year);"},{"lineNumber":389,"author":{"gitID":"EdwardKSG"},"content":"        String trimmedYear \u003d year.trim();"},{"lineNumber":390,"author":{"gitID":"EdwardKSG"},"content":"        if (!Year.isValidYear(trimmedYear)) {"},{"lineNumber":391,"author":{"gitID":"EdwardKSG"},"content":"            throw new IllegalValueException(Year.MESSAGE_YEAR_CONSTRAINTS);"},{"lineNumber":392,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":393,"author":{"gitID":"EdwardKSG"},"content":"        return new Year(trimmedYear);"},{"lineNumber":394,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":395,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":396,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":397,"author":{"gitID":"EdwardKSG"},"content":"     * Parses a {@code Optional\u003cString\u003e year} into an {@code Optional\u003cYear\u003e} if {@code year} is present."},{"lineNumber":398,"author":{"gitID":"EdwardKSG"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":399,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":400,"author":{"gitID":"EdwardKSG"},"content":"    public static Optional\u003cYear\u003e parseYear(Optional\u003cString\u003e year) throws IllegalValueException {"},{"lineNumber":401,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(year);"},{"lineNumber":402,"author":{"gitID":"EdwardKSG"},"content":"        return year.isPresent() ? Optional.of(parseYear(year.get())) : Optional.empty();"},{"lineNumber":403,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":404,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":407,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":408,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":409,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":410,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":411,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":412,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":413,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":414,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":415,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":416,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":417,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":418,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":419,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":422,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":423,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":424,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":425,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":426,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":427,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":428,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":431,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":432,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":433,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":434,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":435,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":436,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":437,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":438,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":439,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":440,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":441,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":442,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":443,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":446,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":447,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":448,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":449,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":450,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":451,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":452,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":453,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":454,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":455,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":456,"author":{"gitID":"-"},"content":""},{"lineNumber":457,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":458,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":459,"author":{"gitID":"iNekox3"},"content":"     * Parses a {@code String questionIndex} into a {@code QuestionIndex}."},{"lineNumber":460,"author":{"gitID":"iNekox3"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":461,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":462,"author":{"gitID":"iNekox3"},"content":"     * @throws IllegalValueException if the given {@code questionIndex} is invalid."},{"lineNumber":463,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":464,"author":{"gitID":"iNekox3"},"content":"    public static QuestionIndex parseQuestionIndex(String questionIndex) throws IllegalValueException {"},{"lineNumber":465,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(questionIndex);"},{"lineNumber":466,"author":{"gitID":"iNekox3"},"content":"        String trimmedQuestionIndex \u003d questionIndex.trim();"},{"lineNumber":467,"author":{"gitID":"iNekox3"},"content":"        if (!QuestionIndex.isValidIndex(trimmedQuestionIndex)) {"},{"lineNumber":468,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException(QuestionIndex.MESSAGE_INDEX_CONSTRAINTS);"},{"lineNumber":469,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":470,"author":{"gitID":"iNekox3"},"content":"        return new QuestionIndex(trimmedQuestionIndex);"},{"lineNumber":471,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":472,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":473,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":474,"author":{"gitID":"iNekox3"},"content":"     * Parses a {@code String studentAnswer} into a {@code StudentAnswer}."},{"lineNumber":475,"author":{"gitID":"iNekox3"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":476,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":477,"author":{"gitID":"iNekox3"},"content":"    public static StudentAnswer parseStudentAnswer(String studentAnswer) {"},{"lineNumber":478,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(studentAnswer);"},{"lineNumber":479,"author":{"gitID":"iNekox3"},"content":"        String trimmedStudentAnswer \u003d studentAnswer.trim();"},{"lineNumber":480,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":481,"author":{"gitID":"iNekox3"},"content":"        return new StudentAnswer(trimmedStudentAnswer);"},{"lineNumber":482,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":483,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"EdwardKSG":106,"AdityaA1998":173,"iNekox3":27,"-":177}},{"path":"src/main/java/seedu/progresschecker/logic/parser/CompleteTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CompleteTaskCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":" * Parses input arguments and creates a new CompleteTaskCommand object"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"public class CompleteTaskCommandParser implements Parser\u003cCompleteTaskCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"     * Parses the given {@code String} of arguments in the context of the CompleteTaskCommand"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"     * and returns an CompleteTaskCommand object for execution."},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public CompleteTaskCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"            int index \u003d ParserUtil.parseTaskIndex(args);"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"            return new CompleteTaskCommand(index);"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompleteTaskCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":22,"-":8}},{"path":"src/main/java/seedu/progresschecker/logic/apisetup/ConnectTasksApi.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.apisetup;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.InputStream;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.InputStreamReader;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.google.api.client.http.HttpTransport;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.google.api.client.http.javanet.NetHttpTransport;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.google.api.client.json.JsonFactory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.google.api.client.json.jackson2.JacksonFactory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.google.api.client.util.store.DataStoreFactory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.google.api.client.util.store.FileDataStoreFactory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.Tasks;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.TasksScopes;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":" * Sets up Google Tasks API."},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":" * i. Authorizes data access based on client credentials."},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":" * ii. Builds service (initializes API)."},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"public class ConnectTasksApi {"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"    private JsonFactory jsonFactory;"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    private HttpTransport transport;"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"    private Credential credentials;"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    public ConnectTasksApi() {"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"        this.jsonFactory \u003d new JacksonFactory();"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"        this.transport \u003d new NetHttpTransport();"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"        this.credentials \u003d null;"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"     * Authorizes the data access requested by Tasks API by loading client secrets file."},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    public void authorize() throws Exception {"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"        final java.util.logging.Logger buggyLogger \u003d java.util.logging.Logger.getLogger("},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"                FileDataStoreFactory.class.getName());"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"        buggyLogger.setLevel(java.util.logging.Level.SEVERE);"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"        // Sets up files to store access token"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"        DataStoreFactory datastore \u003d new FileDataStoreFactory("},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"                new File(\"tokens\")"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"        );"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"        InputStream in \u003d"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"                ConnectTasksApi.class.getResourceAsStream(\"/client_id.json\");"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"        // Loads Client Secrets file downloaded from Google developer console."},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"        GoogleClientSecrets clientSecrets \u003d GoogleClientSecrets.load("},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"                this.jsonFactory,"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"                new InputStreamReader(in)"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"        );"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"        // Sets Up authorization code flow."},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"        GoogleAuthorizationCodeFlow flow \u003d new GoogleAuthorizationCodeFlow.Builder("},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"                this.transport,"},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"                this.jsonFactory,"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"                clientSecrets,"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"                Collections.singleton(TasksScopes.TASKS)"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"        ).setDataStoreFactory(datastore).build();"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"        // Authorizes with client credentials."},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"        this.credentials \u003d new AuthorizationCodeInstalledApp("},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"                flow,"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"                new LocalServerReceiver()"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"        ).authorize(\"user\");"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"     * Builds Google Tasks service."},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"    public Tasks getTasksService() {"},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"        return new Tasks.Builder("},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":"                this.transport,"},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"                this.jsonFactory,"},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"                this.credentials"},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":"        ).build();"},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":65,"-":21}},{"path":"src/main/java/seedu/progresschecker/logic/parser/ProgressCheckerParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.AddDefaultTasksCommand.DEFAULT_LIST_TITLE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AddDefaultTasksCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AnswerCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ClearCommand;"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.CloseIssueCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.Command;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CompleteTaskCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CreateIssue;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.EditIssueCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.GitLoginCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.HelpCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.HistoryCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ListCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.ReopenIssueCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ResetTaskCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.SelectCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.SortCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UploadCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewTaskListCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class ProgressCheckerParser {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"        final String commandWordInLowerCase \u003d commandWord.toLowerCase();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"        switch (commandWordInLowerCase) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        case AddDefaultTasksCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        case AddDefaultTasksCommand.COMMAND_ALIAS:"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new AddDefaultTasksCommand(DEFAULT_LIST_TITLE);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case ViewTaskListCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case ViewTaskListCommand.COMMAND_ALIAS:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new ViewTaskListCommand();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case CompleteTaskCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        case CompleteTaskCommand.COMMAND_ALIAS:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return new CompleteTaskCommandParser().parse(arguments);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case ResetTaskCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        case ResetTaskCommand.COMMAND_ALIAS:"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return new ResetTaskCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case AnswerCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case AnswerCommand.COMMAND_ALIAS:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return new AnswerCommandParser().parse(arguments);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"        case EditIssueCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"        case EditIssueCommand.COMMAND_ALIAS:"},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":"            return new EditIssueCommandParser().parse(arguments);"},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        case UploadCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case UploadCommand.COMMAND_ALIAS:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return new UploadCommandParser().parse(arguments);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        case CreateIssue.COMMAND_WORD:"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        case CreateIssue.COMMAND_ALIAS:"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return new CreateIssueParser().parse(arguments);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":146,"author":{"gitID":"AdityaA1998"},"content":"        case SortCommand.COMMAND_ALIAS:"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return new SortCommand();"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        case ViewCommand.COMMAND_WORD:"},{"lineNumber":150,"author":{"gitID":"AdityaA1998"},"content":"        case ViewCommand.COMMAND_ALIAS:"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return new ViewCommandParser().parse(arguments);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"AdityaA1998"},"content":"        case ReopenIssueCommand.COMMAND_WORD:"},{"lineNumber":154,"author":{"gitID":"AdityaA1998"},"content":"        case ReopenIssueCommand.COMMAND_ALIAS:"},{"lineNumber":155,"author":{"gitID":"AdityaA1998"},"content":"            return new ReopenIssueCommandParser().parse(arguments);"},{"lineNumber":156,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":157,"author":{"gitID":"AdityaA1998"},"content":"        case CloseIssueCommand.COMMAND_WORD:"},{"lineNumber":158,"author":{"gitID":"AdityaA1998"},"content":"        case CloseIssueCommand.COMMAND_ALIAS:"},{"lineNumber":159,"author":{"gitID":"AdityaA1998"},"content":"            return new CloseIssueCommandParser().parse(arguments);"},{"lineNumber":160,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        case GitLoginCommand.COMMAND_WORD:"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        case GitLoginCommand.COMMAND_ALIAS:"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return new GitLoginCommandParser().parse(arguments);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":19,"-":151}},{"path":"src/main/java/seedu/progresschecker/logic/parser/GitLoginCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_GIT_PASSCODE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_GIT_REPO;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_GIT_USERNAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.GitLoginCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Passcode;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Repository;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Username;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":" * Parses input arguments and creates a new GitDetails object"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"public class GitLoginCommandParser implements Parser\u003cGitLoginCommand\u003e {"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"     * Parses the given {@code String} of arguments in the context of the GitLoginCommand"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"     * and returns an GitLoginCommand object for execution."},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    public GitLoginCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_GIT_USERNAME, PREFIX_GIT_PASSCODE, PREFIX_GIT_REPO);"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_GIT_USERNAME, PREFIX_GIT_PASSCODE, PREFIX_GIT_REPO)"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GitLoginCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"            Username username \u003d ParserUtil.parseGitUsername(argMultimap.getValue(PREFIX_GIT_USERNAME)).get();"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"            Passcode passcode \u003d ParserUtil.parsePasscode(argMultimap.getValue(PREFIX_GIT_PASSCODE)).get();"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"            Repository repository \u003d ParserUtil.parseRepository(argMultimap.getValue(PREFIX_GIT_REPO)).get();"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"            GitDetails details \u003d new GitDetails(username, passcode, repository);"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"            return new GitLoginCommand(details);"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":42,"-":17}},{"path":"src/main/java/seedu/progresschecker/logic/parser/CloseIssueCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.CloseIssueCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":" * Parses input arguments and creates a new CloseIssueCommand object"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"public class CloseIssueCommandParser implements Parser\u003cCloseIssueCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     * Parses the given {@code String} of arguments in the context of the CloseIssueCommand"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"     * and returns an CloseIssueCommand object for execution."},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public CloseIssueCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"            return new CloseIssueCommand(index);"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CloseIssueCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":24,"-":7}},{"path":"src/main/java/seedu/progresschecker/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the ProgressChecker."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" INDEX\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":1,"-":68}},{"path":"src/main/java/seedu/progresschecker/logic/parser/CreateIssueParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_ASSIGNEES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_BODY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_LABEL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_MILESTONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CreateIssue;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Assignees;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Body;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Labels;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Milestone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Title;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":" * Parses input arguments and creates a new CreateIssue object"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"public class CreateIssueParser implements Parser\u003cCreateIssue\u003e {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"     * Parses the given {@code String} of arguments in the context of the CreateIssue"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"     * and returns an createIssue object for execution."},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    public CreateIssue parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_ASSIGNEES,"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"                        PREFIX_MILESTONE, PREFIX_BODY, PREFIX_LABEL);"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE)"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateIssue.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"            Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE)).get();"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"            Set\u003cAssignees\u003e assigneeSet \u003d ParserUtil.parseAssignees(argMultimap.getAllValues(PREFIX_ASSIGNEES));"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"            Milestone milestone \u003d ParserUtil.parseMilestone(argMultimap.getValue(PREFIX_MILESTONE)).orElse(null);"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"            Body body \u003d ParserUtil.parseBody(argMultimap.getValue(PREFIX_BODY).orElse(\"\"));"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"            Set\u003cLabels\u003e labelSet \u003d ParserUtil.parseLabels(argMultimap.getAllValues(PREFIX_LABEL));"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"            List\u003cAssignees\u003e assigneesList \u003d new ArrayList\u003c\u003e(assigneeSet);"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"            List\u003cLabels\u003e labelsList \u003d new ArrayList\u003c\u003e(labelSet);"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"            Issue issue \u003d new Issue(title, assigneesList, milestone, body, labelsList);"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"            return new CreateIssue(issue);"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":48,"-":24}},{"path":"src/main/java/seedu/progresschecker/logic/commands/ViewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.PageLoadChangedEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * View the web view of outcomes of a particular week."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ViewCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final int MIN_WEEK_NUMBER \u003d 2;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final int MAX_WEEK_NUMBER \u003d 13;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"view\";"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_ALIAS \u003d \"v\";"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" WEEK-NUMBER\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            // TODO: change description and parameter range when appropriate"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Toggle view to display outcomes in the specified week.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer ranging from \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + MIN_WEEK_NUMBER + \" to \" + MAX_WEEK_NUMBER + \")\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 2\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Viewing week %1$s\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public ViewCommand(Index targetIndex) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new PageLoadChangedEvent(targetIndex));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                || (other instanceof ViewCommand // instanceof handles nulls"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((ViewCommand) other).targetIndex)); // state check"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":2,"-":44}},{"path":"src/main/java/seedu/progresschecker/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Livian1107"},"content":"//@@author: Livian1107"},{"lineNumber":6,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Livian1107"},"content":" * Sorts all persons in the ProgressChecker in alphabetical order."},{"lineNumber":8,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Livian1107"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":10,"author":{"gitID":"Livian1107"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":11,"author":{"gitID":"Livian1107"},"content":"    public static final String COMMAND_ALIAS \u003d \"so\";"},{"lineNumber":12,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":13,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Sorted all persons in alphabetical order\";"},{"lineNumber":14,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":15,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":"    protected CommandResult executeUndoableCommand() {"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(model);"},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":"        model.sort();"},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":18,"-":4}},{"path":"src/main/java/seedu/progresschecker/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_MAJOR;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_YEAR;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Adds a person to the ProgressChecker."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_USERNAME + \"USERNAME \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_MAJOR + \"MAJOR \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_YEAR + \"YEAR \""},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the ProgressChecker. \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_USERNAME + \"USERNAME \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_MAJOR + \"MAJOR \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_YEAR + \"YEAR \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + PREFIX_USERNAME + \"JohnGithub \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + PREFIX_MAJOR + \"Computer Science \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + PREFIX_YEAR + \"2 \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the ProgressChecker\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":1,"-":81}},{"path":"src/main/java/seedu/progresschecker/logic/commands/CloseIssueCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":" * Close an issue on github"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"public class CloseIssueCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_WORD \u003d \"-issue\";"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_ALIAS \u003d \"cli\";"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" ISSUE-INDEX\";"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"            + \"\\nParameters: ISSUE_INDEX (must be a positive valid index number)\""},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"            + \"Example: \\n\" + COMMAND_WORD + \" 2\";"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Issue #%1$s closed successfully\";"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Issue wasn\u0027t closed. Enter correct index number.\";"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"    private final Index targetIndex;"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    public CloseIssueCommand(Index targetIndex) {"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"            model.closeIssueOnGithub(targetIndex);"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException ie) {"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof CloseIssueCommand // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.targetIndex.equals(((CloseIssueCommand) other).targetIndex)); // state check"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":44,"-":4}},{"path":"src/main/java/seedu/progresschecker/logic/commands/CreateIssue.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_ASSIGNEES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_BODY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_LABEL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_MILESTONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":" * Create an issue on github"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"public class CreateIssue extends Command {"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_WORD \u003d \"+issue\";"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_ALIAS \u003d \"ci\";"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_TITLE + \"TITLE \""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_ASSIGNEES + \"ASSIGNEES \""},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_MILESTONE + \"MILESTONE \""},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_BODY + \"BODY \""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_LABEL + \"LABELS\";"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Create an issue in your team organisation. \""},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"            + \"Parameters: \""},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_TITLE + \"TITLE \""},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_ASSIGNEES + \"ASSIGNEES \""},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_MILESTONE + \"MILESTONE \""},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_BODY + \"BODY \""},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_LABEL + \"LABELS/n\""},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_TITLE + \"Add new create issue command \""},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_ASSIGNEES + \"johndoe \""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_MILESTONE + \"v1.1 \""},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_BODY + \"This is a test issue \""},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_LABEL + \"bug\";"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Issue successfully created on Github\";"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_FAILURE \u003d \"There is some error in the parameter or authentication\";"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    private final Issue toCreate;"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"     * Creates an CreateIssue to create the specified {@code Issue}"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"    public CreateIssue(Issue issue) {"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(issue);"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"        toCreate \u003d issue;"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"            model.createIssueOnGitHub(toCreate);"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException e) {"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":52,"-":14}},{"path":"src/main/java/seedu/progresschecker/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_MAJOR;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_YEAR;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.CollectionUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Major;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Year;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the ProgressChecker."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"ed\";"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \" + \"INDEX \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_USERNAME + \"USERNAME] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_MAJOR + \"MAJOR] \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_YEAR + \"YEAR] \""},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_USERNAME + \"USERNAME] \""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_MAJOR + \"MAJOR] \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_YEAR + \"YEAR] \""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":62,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":63,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":64,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the ProgressChecker.\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        GithubUsername updatedUsername \u003d editPersonDescriptor.getUsername().orElse(personToEdit.getUsername());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Major updatedMajor \u003d editPersonDescriptor.getMajor().orElse(personToEdit.getMajor());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Year updatedYear \u003d editPersonDescriptor.getYear().orElse(personToEdit.getYear());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedUsername, updatedMajor,"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                updatedYear, updatedTags);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        private GithubUsername username;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        private Major major;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        private Year year;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":168,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":169,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            setUsername(toCopy.username);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            setMajor(toCopy.major);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            setYear(toCopy.year);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":182,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.username,"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                    this.major, this.year, this.tags);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        public void setUsername(GithubUsername username) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            this.username \u003d username;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public Optional\u003cGithubUsername\u003e getUsername() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(username);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        public void setMajor(Major major) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            this.major \u003d major;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        public Optional\u003cMajor\u003e getMajor() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(major);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        public void setYear(Year year) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            this.year \u003d year;"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        public Optional\u003cYear\u003e getYear() {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(year);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":238,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":239,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":245,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":246,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":247,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":248,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":269,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":270,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":271,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getUsername().equals(e.getUsername())"},{"lineNumber":272,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getMajor().equals(e.getMajor())"},{"lineNumber":273,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getYear().equals(e.getYear())"},{"lineNumber":274,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":2,"-":275}},{"path":"src/main/java/seedu/progresschecker/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the ProgressChecker."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" INDEX\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":1,"-":53}},{"path":"src/main/java/seedu/progresschecker/logic/commands/AnswerCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.Model.PREDICATE_SHOW_ALL_EXERCISES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.ModelAnswer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Question;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionIndex;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionType;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.StudentAnswer;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.ExerciseNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":" * Edits details of student answer of an exercise in the ProgressChecker."},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"public class AnswerCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    public static final int MIN_WEEK_NUMBER \u003d 2;"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"    public static final int MAX_WEEK_NUMBER \u003d 13;"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"    public static final String COMMAND_WORD \u003d \"answer\";"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"    public static final String COMMAND_ALIAS \u003d \"ans\";"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" QUESTION-INDEX\" + \" ANSWER\";"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Answer an exercise \""},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"            + \"identified by the index number shown. \""},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"            + \"Existing answer will be overwritten by the input value.\\n\""},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"            + \"Parameters: INDEX (must be in the format of WEEK.SECTION.QUESTION number \""},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"            + \"where WEEK range from \" + MIN_WEEK_NUMBER + \" to \" + MAX_WEEK_NUMBER + \") \""},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"            + \"ANSWER\\n\""},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"            + \"Example: \" + COMMAND_WORD + \" 2.1.1 \""},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":"            + \"Procedural languages work at simple data structures and functions level.\";"},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"    public static final String MESSAGE_EDIT_EXERCISE_SUCCESS \u003d \"Answered Exercise: %1$s\";"},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"    private final QuestionIndex questionIndex;"},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":"    private final StudentAnswer studentAnswer;"},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"    private Exercise exerciseToEdit;"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":"    private Exercise editedExercise;"},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":48,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"iNekox3"},"content":"     * @param questionIndex of the question in the filtered exercise list to edit"},{"lineNumber":50,"author":{"gitID":"iNekox3"},"content":"     * @param studentAnswer answer to edit the exercise with"},{"lineNumber":51,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"iNekox3"},"content":"    public AnswerCommand(QuestionIndex questionIndex, StudentAnswer studentAnswer) {"},{"lineNumber":53,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(questionIndex);"},{"lineNumber":54,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":55,"author":{"gitID":"iNekox3"},"content":"        this.questionIndex \u003d questionIndex;"},{"lineNumber":56,"author":{"gitID":"iNekox3"},"content":"        this.studentAnswer \u003d studentAnswer;"},{"lineNumber":57,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":59,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"iNekox3"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"iNekox3"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"iNekox3"},"content":"            model.updateExercise(exerciseToEdit, editedExercise);"},{"lineNumber":63,"author":{"gitID":"iNekox3"},"content":"        } catch (ExerciseNotFoundException enfe) {"},{"lineNumber":64,"author":{"gitID":"iNekox3"},"content":"            throw new AssertionError(\"The target exercise cannot be missing\");"},{"lineNumber":65,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"iNekox3"},"content":"        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"},{"lineNumber":67,"author":{"gitID":"iNekox3"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_EXERCISE_SUCCESS, questionIndex));"},{"lineNumber":68,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":70,"author":{"gitID":"iNekox3"},"content":"    //TODO: store mapping of questionIndex to exercise\u0027s index in exerciseList in a separate data structure"},{"lineNumber":71,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"iNekox3"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":73,"author":{"gitID":"iNekox3"},"content":"        List\u003cExercise\u003e exerciseList \u003d model.getFilteredExerciseList();"},{"lineNumber":74,"author":{"gitID":"iNekox3"},"content":"        boolean isFound \u003d false;"},{"lineNumber":75,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":76,"author":{"gitID":"iNekox3"},"content":"        if (!questionIndex.isValidIndex(questionIndex.toString())) {"},{"lineNumber":77,"author":{"gitID":"iNekox3"},"content":"            throw new CommandException(String.format("},{"lineNumber":78,"author":{"gitID":"iNekox3"},"content":"                    Messages.MESSAGE_INVALID_EXERCISE_INDEX, questionIndex.toString()));"},{"lineNumber":79,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":81,"author":{"gitID":"iNekox3"},"content":"        for (Exercise e : exerciseList) {"},{"lineNumber":82,"author":{"gitID":"iNekox3"},"content":"            if (e.getQuestionIndex().toString().equals(questionIndex.toString())) {"},{"lineNumber":83,"author":{"gitID":"iNekox3"},"content":"                exerciseToEdit \u003d exerciseList.get(exerciseList.indexOf(e));"},{"lineNumber":84,"author":{"gitID":"iNekox3"},"content":"                editedExercise \u003d createEditedExercise(exerciseToEdit, studentAnswer);"},{"lineNumber":85,"author":{"gitID":"iNekox3"},"content":"                isFound \u003d true;"},{"lineNumber":86,"author":{"gitID":"iNekox3"},"content":"                break;"},{"lineNumber":87,"author":{"gitID":"iNekox3"},"content":"            }"},{"lineNumber":88,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":90,"author":{"gitID":"iNekox3"},"content":"        if (!isFound) {"},{"lineNumber":91,"author":{"gitID":"iNekox3"},"content":"            throw new CommandException(String.format("},{"lineNumber":92,"author":{"gitID":"iNekox3"},"content":"                    Messages.MESSAGE_INVALID_EXERCISE_INDEX, questionIndex.toString()));"},{"lineNumber":93,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":96,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"iNekox3"},"content":"     * Creates and returns a {@code Exercise} with the details of {@code exerciseToEdit}"},{"lineNumber":98,"author":{"gitID":"iNekox3"},"content":"     * edited with {@code editExerciseDescriptor}."},{"lineNumber":99,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"iNekox3"},"content":"    private static Exercise createEditedExercise(Exercise exerciseToEdit, StudentAnswer studentAnswer) {"},{"lineNumber":101,"author":{"gitID":"iNekox3"},"content":"        assert exerciseToEdit !\u003d null;"},{"lineNumber":102,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":103,"author":{"gitID":"iNekox3"},"content":"        QuestionIndex questionIndex \u003d exerciseToEdit.getQuestionIndex();"},{"lineNumber":104,"author":{"gitID":"iNekox3"},"content":"        QuestionType questionType \u003d exerciseToEdit.getQuestionType();"},{"lineNumber":105,"author":{"gitID":"iNekox3"},"content":"        Question question \u003d exerciseToEdit.getQuestion();"},{"lineNumber":106,"author":{"gitID":"iNekox3"},"content":"        StudentAnswer updatedStudentAnswer \u003d studentAnswer;"},{"lineNumber":107,"author":{"gitID":"iNekox3"},"content":"        ModelAnswer modelAnswer \u003d exerciseToEdit.getModelAnswer();"},{"lineNumber":108,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":109,"author":{"gitID":"iNekox3"},"content":"        return new Exercise(questionIndex, questionType, question,"},{"lineNumber":110,"author":{"gitID":"iNekox3"},"content":"                updatedStudentAnswer, modelAnswer);"},{"lineNumber":111,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":113,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"iNekox3"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitID":"iNekox3"},"content":"        // short circuit if same object"},{"lineNumber":116,"author":{"gitID":"iNekox3"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":117,"author":{"gitID":"iNekox3"},"content":"            return true;"},{"lineNumber":118,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":120,"author":{"gitID":"iNekox3"},"content":"        // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"iNekox3"},"content":"        if (!(other instanceof AnswerCommand)) {"},{"lineNumber":122,"author":{"gitID":"iNekox3"},"content":"            return false;"},{"lineNumber":123,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":125,"author":{"gitID":"iNekox3"},"content":"        // state check"},{"lineNumber":126,"author":{"gitID":"iNekox3"},"content":"        AnswerCommand e \u003d (AnswerCommand) other;"},{"lineNumber":127,"author":{"gitID":"iNekox3"},"content":"        return questionIndex.equals(e.questionIndex)"},{"lineNumber":128,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 studentAnswer.equals(e.studentAnswer)"},{"lineNumber":129,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 Objects.equals(exerciseToEdit, e.exerciseToEdit);"},{"lineNumber":130,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":132,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":114,"-":18}},{"path":"src/main/java/seedu/progresschecker/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in ProgressChecker whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"search\";"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" NAME\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":1,"-":37}},{"path":"src/main/java/seedu/progresschecker/logic/commands/ReopenIssueCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":" * Reopens an issue on github"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"public class ReopenIssueCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_WORD \u003d \"reopenissue\";"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_ALIAS \u003d \"ri\";"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" ISSUE-INDEX\";"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"            + \"\\nParameters: ISSUE_INDEX (must be a positive valid index number)\""},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"            + \"Example: \\n\" + COMMAND_WORD + \" 2\";"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Issue #%1$s was reopened successfully\";"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Issue wasn\u0027t reopened. Enter correct index number.\";"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"    private final Index targetIndex;"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    public ReopenIssueCommand(Index targetIndex) {"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"            model.reopenIssueOnGithub(targetIndex);"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException ie) {"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof ReopenIssueCommand // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.targetIndex.equals(((ReopenIssueCommand) other).targetIndex)); // state check"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":45,"-":4}},{"path":"src/main/java/seedu/progresschecker/logic/commands/UploadCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.FileUtil.REGEX_VALID_IMAGE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.FileUtil.copyFile;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.FileUtil.createMissing;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.FileUtil.getFileExtension;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.PhotoPath;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.exceptions.DuplicatePhotoException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":" * Uploads a photo to the profile."},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":29,"author":{"gitID":"Livian1107"},"content":"public class UploadCommand extends UndoableCommand {"},{"lineNumber":30,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":31,"author":{"gitID":"Livian1107"},"content":"    public static final String COMMAND_WORD \u003d \"upload\";"},{"lineNumber":32,"author":{"gitID":"Livian1107"},"content":"    public static final String COMMAND_ALIAS \u003d \"up\";"},{"lineNumber":33,"author":{"gitID":"Livian1107"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \" + \"INDEX \""},{"lineNumber":34,"author":{"gitID":"Livian1107"},"content":"            + \"[PATH]\";"},{"lineNumber":35,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":36,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Uploads a photo to the specified profile.\\n\""},{"lineNumber":37,"author":{"gitID":"Livian1107"},"content":"            + \"The valid photo extensions are \u0027jpg\u0027, \u0027jpeg\u0027 or \u0027png\u0027.\\n\""},{"lineNumber":38,"author":{"gitID":"Livian1107"},"content":"            + \"Parameter: INDEX(must be a positive integer) PATH...\\n\""},{"lineNumber":39,"author":{"gitID":"Livian1107"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 C:\\\\Users\\\\User\\\\Desktop\\\\photo.png\\n\";"},{"lineNumber":40,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":41,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New photo uploaded!\";"},{"lineNumber":42,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_COPY_FAIL \u003d \"Cannot copy file!\";"},{"lineNumber":43,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_IMAGE_NOT_FOUND \u003d \"The image cannot be found!\";"},{"lineNumber":44,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_IMAGE_DUPLICATE \u003d \"Upload the same image!\";"},{"lineNumber":45,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_LOCAL_PATH_CONSTRAINTS \u003d"},{"lineNumber":46,"author":{"gitID":"Livian1107"},"content":"            \"The photo path should be a valid path on your PC. \""},{"lineNumber":47,"author":{"gitID":"Livian1107"},"content":"            + \"It should start with the name of your PC user name, \""},{"lineNumber":48,"author":{"gitID":"Livian1107"},"content":"            + \"followed by several folders, e.g.\\\"C:\\\\Usres\\\\User\\\\Desktop\\\\photo.png\\\". \\n\""},{"lineNumber":49,"author":{"gitID":"Livian1107"},"content":"            + \"The file should exist. \\n\""},{"lineNumber":50,"author":{"gitID":"Livian1107"},"content":"            + \"The path of file cannot contain any whitespaces inside. \\n\""},{"lineNumber":51,"author":{"gitID":"Livian1107"},"content":"                    + \"The valid extensions of the file should be \u0027jpg\u0027, \u0027jpeg\u0027 or \u0027png\u0027. \\n\";"},{"lineNumber":52,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":53,"author":{"gitID":"Livian1107"},"content":"    public static final String REGEX_VALID_LOCAL_PATH \u003d"},{"lineNumber":54,"author":{"gitID":"Livian1107"},"content":"            \"([a-zA-Z]:)?(\\\\\\\\\\\\w+)+\\\\\\\\\" + REGEX_VALID_IMAGE;"},{"lineNumber":55,"author":{"gitID":"Livian1107"},"content":"    public static final String PATH_SAVED_FILE \u003d \"src/main/resources/images/contact/\";"},{"lineNumber":56,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":57,"author":{"gitID":"Livian1107"},"content":"    private final Index targetIndex;"},{"lineNumber":58,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":59,"author":{"gitID":"Livian1107"},"content":"    private Person personToUpdate;"},{"lineNumber":60,"author":{"gitID":"Livian1107"},"content":"    private PhotoPath photoPath;"},{"lineNumber":61,"author":{"gitID":"Livian1107"},"content":"    private String localPath;"},{"lineNumber":62,"author":{"gitID":"Livian1107"},"content":"    private String savePath;"},{"lineNumber":63,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":64,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"Livian1107"},"content":"     * Creates an UploadCommand to upload the profile photo with specified {@code Path}"},{"lineNumber":66,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"Livian1107"},"content":"    public UploadCommand(Index index, String path) throws IllegalValueException, IOException {"},{"lineNumber":68,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(path);"},{"lineNumber":69,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(index);"},{"lineNumber":70,"author":{"gitID":"Livian1107"},"content":"        if (isValidLocalPath(path)) {"},{"lineNumber":71,"author":{"gitID":"Livian1107"},"content":"            this.localPath \u003d path;"},{"lineNumber":72,"author":{"gitID":"Livian1107"},"content":"            this.targetIndex \u003d index;"},{"lineNumber":73,"author":{"gitID":"Livian1107"},"content":"            this.savePath \u003d copyLocalPhoto(localPath);"},{"lineNumber":74,"author":{"gitID":"Livian1107"},"content":"            this.photoPath \u003d new PhotoPath(savePath);"},{"lineNumber":75,"author":{"gitID":"Livian1107"},"content":"        } else {"},{"lineNumber":76,"author":{"gitID":"Livian1107"},"content":"            throw new IllegalValueException(MESSAGE_LOCAL_PATH_CONSTRAINTS);"},{"lineNumber":77,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":80,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"Livian1107"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":82,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(personToUpdate);"},{"lineNumber":83,"author":{"gitID":"Livian1107"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"Livian1107"},"content":"            model.addPhoto(photoPath);"},{"lineNumber":85,"author":{"gitID":"Livian1107"},"content":"            model.uploadPhoto(personToUpdate, savePath);"},{"lineNumber":86,"author":{"gitID":"Livian1107"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":87,"author":{"gitID":"Livian1107"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":88,"author":{"gitID":"Livian1107"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":89,"author":{"gitID":"Livian1107"},"content":"        } catch (DuplicatePhotoException e) {"},{"lineNumber":90,"author":{"gitID":"Livian1107"},"content":"            throw new CommandException(MESSAGE_IMAGE_DUPLICATE);"},{"lineNumber":91,"author":{"gitID":"Livian1107"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":92,"author":{"gitID":"Livian1107"},"content":"            throw new CommandException(MESSAGE_IMAGE_DUPLICATE);"},{"lineNumber":93,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":96,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"Livian1107"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":98,"author":{"gitID":"Livian1107"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":99,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":100,"author":{"gitID":"Livian1107"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":101,"author":{"gitID":"Livian1107"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":102,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":104,"author":{"gitID":"Livian1107"},"content":"        personToUpdate \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":105,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":107,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"Livian1107"},"content":"     * Returns true when the String path provided is a valid local path"},{"lineNumber":109,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"Livian1107"},"content":"    public static boolean isValidLocalPath(String path) {"},{"lineNumber":111,"author":{"gitID":"Livian1107"},"content":"        return path.matches(REGEX_VALID_LOCAL_PATH);"},{"lineNumber":112,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":114,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"Livian1107"},"content":"     * Copies uploaded photo file to specified saved path"},{"lineNumber":116,"author":{"gitID":"Livian1107"},"content":"     * @param localPath is the path of uploaded photo"},{"lineNumber":117,"author":{"gitID":"Livian1107"},"content":"     * @return String of saved path of uploaded photo"},{"lineNumber":118,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"Livian1107"},"content":"    public String copyLocalPhoto(String localPath) throws IOException {"},{"lineNumber":120,"author":{"gitID":"Livian1107"},"content":"        File localFile \u003d new File(localPath);"},{"lineNumber":121,"author":{"gitID":"Livian1107"},"content":"        String newPath \u003d createSavePath(localPath);"},{"lineNumber":122,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":123,"author":{"gitID":"Livian1107"},"content":"        if (!localFile.exists()) {"},{"lineNumber":124,"author":{"gitID":"Livian1107"},"content":"            throw new FileNotFoundException(MESSAGE_LOCAL_PATH_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":127,"author":{"gitID":"Livian1107"},"content":"        createSavedPhoto(newPath);"},{"lineNumber":128,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":129,"author":{"gitID":"Livian1107"},"content":"        try {"},{"lineNumber":130,"author":{"gitID":"Livian1107"},"content":"            copyFile(localPath, newPath);"},{"lineNumber":131,"author":{"gitID":"Livian1107"},"content":"        } catch (IOException e) {"},{"lineNumber":132,"author":{"gitID":"Livian1107"},"content":"            throw new IOException(MESSAGE_COPY_FAIL);"},{"lineNumber":133,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"Livian1107"},"content":"        return newPath;"},{"lineNumber":135,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":137,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"Livian1107"},"content":"     * Create a new path for uploaded photo to save"},{"lineNumber":139,"author":{"gitID":"Livian1107"},"content":"     * @param localPath is the String of uploaded photo on user PC"},{"lineNumber":140,"author":{"gitID":"Livian1107"},"content":"     * @return savePath String of uploaded photo"},{"lineNumber":141,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"Livian1107"},"content":"    public static String createSavePath(String localPath) {"},{"lineNumber":143,"author":{"gitID":"Livian1107"},"content":"        Date date \u003d new Date();"},{"lineNumber":144,"author":{"gitID":"Livian1107"},"content":"        Long num \u003d date.getTime();"},{"lineNumber":145,"author":{"gitID":"Livian1107"},"content":"        String createPath \u003d PATH_SAVED_FILE + num.toString() + getFileExtension(localPath);"},{"lineNumber":146,"author":{"gitID":"Livian1107"},"content":"        return createPath;"},{"lineNumber":147,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":149,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"Livian1107"},"content":"     * Creates a new file to save profile photo"},{"lineNumber":151,"author":{"gitID":"Livian1107"},"content":"     * @param path to save photo"},{"lineNumber":152,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"Livian1107"},"content":"    public void createSavedPhoto(String path) {"},{"lineNumber":154,"author":{"gitID":"Livian1107"},"content":"        File savedPhoto \u003d new File(path);"},{"lineNumber":155,"author":{"gitID":"Livian1107"},"content":"        try {"},{"lineNumber":156,"author":{"gitID":"Livian1107"},"content":"            createMissing(savedPhoto);"},{"lineNumber":157,"author":{"gitID":"Livian1107"},"content":"        } catch (IOException e) {"},{"lineNumber":158,"author":{"gitID":"Livian1107"},"content":"            assert false : \"Fail to create the file!\";"},{"lineNumber":159,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":137,"-":24}},{"path":"src/main/java/seedu/progresschecker/logic/commands/ResetTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.AddDefaultTasksCommand.DEFAULT_LIST_ID;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.MyTask.undoTask;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":" * Sets a task with given index as incompleted."},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"public class ResetTaskCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_WORD \u003d \"reset\";"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_ALIAS \u003d \"rt\"; // short for \"reset task\""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"    public static final String DATA_FOLDER \u003d \"data/\";"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    public static final String TASK_PAGE \u003d \"tasklist.html\";"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public static final String FILE_FAILURE \u003d \"Something is wrong with the file system.\";"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \"INDEX\";"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d \"The index should be an index in the task list displayed\""},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"            + \"to you. It must be an integer that does not exceed the number of tasks in the list.\";"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"            + \": Mark task with the given index in the list as incompleted.\\n\""},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"            + \"Parameters: INDEX (an index in the task list)\\n \""},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Reset task list: %1$s\";"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"    public static final String RESET_FAILURE \u003d \"Failed to mark it as incompleted. Index: %1$s\";"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    private int index;"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"     * Reset the task with index {@code int}"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public ResetTaskCommand(int index) {"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(index);"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"        this.index \u003d index;"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"            String title \u003d undoTask(index, DEFAULT_LIST_ID);"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"            ViewTaskListCommand view \u003d new ViewTaskListCommand();"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"            view.updateView();"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, index + \". \" + title));"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"        } catch (CommandException ce) {"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"            throw ce;"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(RESET_FAILURE + index);"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":49,"-":9}},{"path":"src/main/java/seedu/progresschecker/logic/commands/AddDefaultTasksCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.MyTask.createTask;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.MyTaskList.clearTaskList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.MyTaskList.copyTaskList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.MyTaskList.createTaskList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.MyTaskList.setTaskListTitle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.io.BufferedReader;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.io.InputStream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.io.InputStreamReader;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":" * Adds a default task list to the user\u0027s Google account."},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"public class AddDefaultTasksCommand extends Command {"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_WORD \u003d \"newtasklist\";"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_ALIAS \u003d \"nl\"; // short for \"new list\""},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    public static final String SOURCE_FILE_FOLDER \u003d \"/view\";"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"    public static final String SOURCE_FILE \u003d \"/defaultTasks.txt\";"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new task list. \""},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"            + \"Parameters: \""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"            + \"LISTNAME \""},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"            + \"CS2103 LOs\";"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task list added: %1$s\";"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    public static final String DEFAULT_LIST_TITLE \u003d \"CS2103 LOs\";"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    public static final String FIRST_LIST_TITLE \u003d \"My List\";"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    public static final String DEFAULT_LIST_ID \u003d \"@default\";"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public static final String CREATE_FAILURE \u003d \"Failed to create task list: \";"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    private String listTitle;"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"     * Creates a AddDefaultTasksCommand to add the default task list with title {@code Sting}"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"    public AddDefaultTasksCommand(String title) {"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(title);"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"        listTitle \u003d title;"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"            setTaskListTitle(DEFAULT_LIST_ID, listTitle);"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"            createTaskList(FIRST_LIST_TITLE);"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"            copyTaskList(FIRST_LIST_TITLE, DEFAULT_LIST_ID);"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"            clearTaskList(DEFAULT_LIST_ID);"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"            InputStream in \u003d"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"                    AddDefaultTasksCommand.class.getResourceAsStream(SOURCE_FILE);"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"            BufferedReader reader \u003d new BufferedReader(new InputStreamReader(in));"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"            String line;"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {"},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"                String title \u003d line;"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"                if (title.equals((\"\"))) {"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"                    break;"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"                } else {"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"                    String notes \u003d reader.readLine();"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"                    String due \u003d reader.readLine();"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"                    createTask(title, DEFAULT_LIST_ID, notes, due);"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"                }"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"            reader.close();"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"            in.close();"},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, listTitle));"},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"        } catch (CommandException ce) {"},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"            throw ce;"},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(CREATE_FAILURE + DEFAULT_LIST_TITLE);"},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":69,"-":16}},{"path":"src/main/java/seedu/progresschecker/logic/commands/ViewTaskListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.AddDefaultTasksCommand.DEFAULT_LIST_ID;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.AddDefaultTasksCommand.DEFAULT_LIST_TITLE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.BufferedWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.URI;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.nio.charset.Charset;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.Task;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.EventsCenter;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.LoadTaskEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.FileUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.task.MyTaskList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":" * View the web view of a particular TaskList (with the name provided)."},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"public class ViewTaskListCommand extends Command {"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_WORD \u003d \"viewtask\";"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_ALIAS \u003d \"vt\";"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    public static final String DATA_FOLDER \u003d \"data/\";"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    public static final String TASK_PAGE \u003d \"tasklist.html\";"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    public static final String FILE_FAILURE \u003d \"Something is wrong with the file system.\";"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \"TASKLIST-TITLE\";"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d \"The title of a task list should not exceed \""},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"            + \"49 characters (as specified by Google Task.\";"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    public static final int MAX_TITLE_LENGTH \u003d 49;"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"            // TODO: change description and parameter range when appropriate"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"            + \": Toggle view to display the task list with the given name.\\n\""},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"            + \"Parameters: TASKLIST-TITLE (max \""},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"            + MAX_TITLE_LENGTH"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"            + \" characters)\\n\""},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Viewing task list: %1$s\";"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"        updateView();"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, DEFAULT_LIST_TITLE));"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"     * Updates the HTML file and refresh the browser panel"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"     * @throws CommandException"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"    public void updateView() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"        List\u003cTask\u003e list \u003d MyTaskList.searchTaskListById(DEFAULT_LIST_ID);"},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"        File htmlFile \u003d new File(DATA_FOLDER + TASK_PAGE);"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"        writeToHtml(list, htmlFile);"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"            EventsCenter.getInstance().post(new LoadTaskEvent(readFile(htmlFile.getAbsolutePath(),"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"                    StandardCharsets.UTF_8)));"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(FILE_FAILURE);"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"     * Writes the loaded task list to an html file.Loads the tasks."},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":"     * @param list task list serialized in a java List."},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"     * @param file File object of the html file."},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":"    void writeToHtml(List\u003cTask\u003e list, File file) throws CommandException {"},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"        double countCompleted \u003d 0;"},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"        double countIncomp \u003d 0;"},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"        int size \u003d list.size();"},{"lineNumber":86,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":88,"author":{"gitID":"EdwardKSG"},"content":"            FileUtil.createIfMissing(file);"},{"lineNumber":89,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":90,"author":{"gitID":"EdwardKSG"},"content":"            FileWriter fw1 \u003d new FileWriter(file, false);"},{"lineNumber":91,"author":{"gitID":"EdwardKSG"},"content":"            BufferedWriter bw1 \u003d new BufferedWriter(fw1);"},{"lineNumber":92,"author":{"gitID":"EdwardKSG"},"content":"            PrintWriter out1 \u003d new PrintWriter(bw1);"},{"lineNumber":93,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":94,"author":{"gitID":"EdwardKSG"},"content":"            out1.print(\"\");"},{"lineNumber":95,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":96,"author":{"gitID":"EdwardKSG"},"content":"            FileWriter fw \u003d new FileWriter(file, true);"},{"lineNumber":97,"author":{"gitID":"EdwardKSG"},"content":"            BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":98,"author":{"gitID":"EdwardKSG"},"content":"            PrintWriter out \u003d new PrintWriter(bw);"},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":"            out.print(\"\u003c!DOCTYPE html\u003e\\n\" + \"\u003chtml\u003e\\n\""},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003cbody style\u003d\\\"background-color:grey;\\\"\u003e\\n\");"},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"            out.print(\"\u003ch1 style\u003d\\\"font-family:verdana; color:white\\\"\u003e\u0026#9764;\""},{"lineNumber":103,"author":{"gitID":"EdwardKSG"},"content":"                    + DEFAULT_LIST_TITLE + \"\u0026#9764;\u003c/h1\u003e\\n\" + \"\u003chr /\u003e\\n\" + \"\u003cdl\u003e\\n\");"},{"lineNumber":104,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":105,"author":{"gitID":"EdwardKSG"},"content":"            for (int i \u003d 0; i \u003c size; i++) {"},{"lineNumber":106,"author":{"gitID":"EdwardKSG"},"content":"                Task task \u003d list.get(i);"},{"lineNumber":107,"author":{"gitID":"EdwardKSG"},"content":"                out.print(\"    \u003cdt style\u003d\\\"font-family:verdana; color:antiquewhite;\\\"\u003e\""},{"lineNumber":108,"author":{"gitID":"EdwardKSG"},"content":"                        + (i + 1) + \". \" + task.getTitle() + \"\u003c/dt\u003e\\n\");"},{"lineNumber":109,"author":{"gitID":"EdwardKSG"},"content":"                out.print(\"    \u003cdd style\u003d\\\"font-family:verdana; color:white;\\\"\u003e\u0026#9888; \u0026nbsp;\""},{"lineNumber":110,"author":{"gitID":"EdwardKSG"},"content":"                        + task.getDue().toString().substring(0, 10) + \"\u003c/dd\u003e\\n\");"},{"lineNumber":111,"author":{"gitID":"EdwardKSG"},"content":"                String status \u003d task.getStatus();"},{"lineNumber":112,"author":{"gitID":"EdwardKSG"},"content":"                if (status.length() \u003e\u003d 11) {"},{"lineNumber":113,"author":{"gitID":"EdwardKSG"},"content":"                    out.print(\"    \u003cdd style\u003d\\\"font-family:verdana; color:red;\\\"\u003e\u0026#9873; \u0026nbsp;\""},{"lineNumber":114,"author":{"gitID":"EdwardKSG"},"content":"                            + \"Please work on it! \" + \"\u0026#9744;\u003c/dd\u003e\\n\");"},{"lineNumber":115,"author":{"gitID":"EdwardKSG"},"content":"                    countIncomp++;"},{"lineNumber":116,"author":{"gitID":"EdwardKSG"},"content":"                } else {"},{"lineNumber":117,"author":{"gitID":"EdwardKSG"},"content":"                    out.print(\"    \u003cdd style\u003d\\\"font-family:verdana; color:darkseagreen;\\\"\u003e\u0026#9873; \u0026nbsp;\""},{"lineNumber":118,"author":{"gitID":"EdwardKSG"},"content":"                            + \"Completed! \" + \"\u0026#9745;\u003c/dd\u003e\\n\");"},{"lineNumber":119,"author":{"gitID":"EdwardKSG"},"content":"                    countCompleted++;"},{"lineNumber":120,"author":{"gitID":"EdwardKSG"},"content":"                }"},{"lineNumber":121,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":122,"author":{"gitID":"EdwardKSG"},"content":"                out.print(\"    \u003cdd style\u003d\\\"font-family:verdana; color:white;\\\"\u003e\u0026#9998; \u0026nbsp;\""},{"lineNumber":123,"author":{"gitID":"EdwardKSG"},"content":"                        + task.getNotes() + \"\u003c/dd\u003e\\n\");"},{"lineNumber":124,"author":{"gitID":"EdwardKSG"},"content":"                out.print(\"    \u003chr /\u003e\\n\");"},{"lineNumber":125,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":126,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":127,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":128,"author":{"gitID":"EdwardKSG"},"content":"            double percent \u003d countCompleted / (countCompleted + countIncomp);"},{"lineNumber":129,"author":{"gitID":"EdwardKSG"},"content":"            String progress \u003d (int) (percent * 100) + \"%\";"},{"lineNumber":130,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":131,"author":{"gitID":"EdwardKSG"},"content":"            out.print(\"\u003c/dl\u003e\\n\");"},{"lineNumber":132,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":133,"author":{"gitID":"EdwardKSG"},"content":"            out.print(\"\u003ch2 style\u003d\\\"font-family:verdana; color:white\\\"\u003e\" + \"You have completed \" + progress"},{"lineNumber":134,"author":{"gitID":"EdwardKSG"},"content":"                    + \" !\" + \"\u003c/h2\u003e\");"},{"lineNumber":135,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":136,"author":{"gitID":"EdwardKSG"},"content":"            out.print(\"\u003c/body\u003e\\n\" + \"\u003c/html\u003e\\n\");"},{"lineNumber":137,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":138,"author":{"gitID":"EdwardKSG"},"content":"            out.close();"},{"lineNumber":139,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":140,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":141,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException e) {"},{"lineNumber":142,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(FILE_FAILURE);"},{"lineNumber":143,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":144,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":147,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"EdwardKSG"},"content":"     * Reads the content of a text file to a String."},{"lineNumber":149,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":150,"author":{"gitID":"EdwardKSG"},"content":"     * @param path file path"},{"lineNumber":151,"author":{"gitID":"EdwardKSG"},"content":"     * @param encoding the encoding standard, such as StandardCharsets.UTF_8."},{"lineNumber":152,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"EdwardKSG"},"content":"    static String readFile(String path, Charset encoding) throws IOException {"},{"lineNumber":154,"author":{"gitID":"EdwardKSG"},"content":"        byte[] encoded \u003d Files.readAllBytes(Paths.get(path));"},{"lineNumber":155,"author":{"gitID":"EdwardKSG"},"content":"        return new String(encoded, encoding);"},{"lineNumber":156,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":158,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"EdwardKSG"},"content":"     * Reads the relative path to the resource directory from the \u003ccode\u003eRESOURCE_PATH\u003c/code\u003e file located in"},{"lineNumber":160,"author":{"gitID":"EdwardKSG"},"content":"     * \u003ccode\u003esrc/main/resources\u003c/code\u003e"},{"lineNumber":161,"author":{"gitID":"EdwardKSG"},"content":"     * @return the relative path to the \u003ccode\u003eresources\u003c/code\u003e in the file system, or"},{"lineNumber":162,"author":{"gitID":"EdwardKSG"},"content":"     *         \u003ccode\u003enull\u003c/code\u003e if there was an error"},{"lineNumber":163,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"EdwardKSG"},"content":"    private static String getResourcePath(String resourcePaths) {"},{"lineNumber":165,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":166,"author":{"gitID":"EdwardKSG"},"content":"            URI resourcePathFile \u003d System.class.getResource(resourcePaths).toURI();"},{"lineNumber":167,"author":{"gitID":"EdwardKSG"},"content":"            String resourcePath \u003d Files.readAllLines(Paths.get(resourcePathFile)).get(0);"},{"lineNumber":168,"author":{"gitID":"EdwardKSG"},"content":"            URI rootUri \u003d new File(\"\").toURI();"},{"lineNumber":169,"author":{"gitID":"EdwardKSG"},"content":"            URI resourceUri \u003d new File(resourcePath).toURI();"},{"lineNumber":170,"author":{"gitID":"EdwardKSG"},"content":"            URI relativeResourceUri \u003d rootUri.relativize(resourceUri);"},{"lineNumber":171,"author":{"gitID":"EdwardKSG"},"content":"            return relativeResourceUri.getPath();"},{"lineNumber":172,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":173,"author":{"gitID":"EdwardKSG"},"content":"            return null;"},{"lineNumber":174,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":151,"-":25}},{"path":"src/main/java/seedu/progresschecker/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.ProgressCheckerParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final ProgressCheckerParser progressCheckerParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        progressCheckerParser \u003d new ProgressCheckerParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Command command \u003d progressCheckerParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":55,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"iNekox3"},"content":"    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"},{"lineNumber":57,"author":{"gitID":"iNekox3"},"content":"        return model.getFilteredExerciseList();"},{"lineNumber":58,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":60,"author":{"gitID":"iNekox3"},"content":"    //@@author"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"iNekox3":7,"-":58}},{"path":"src/main/java/seedu/progresschecker/logic/commands/GitLoginCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_GIT_PASSCODE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_GIT_REPO;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_GIT_USERNAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":" * Logins into github from app for issue creation"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"public class GitLoginCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_WORD \u003d \"gitlogin\";"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_ALIAS \u003d \"gl\";"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_USERNAME + \"USERNAME \""},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_PASSCODE + \"PASSCODE \""},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_REPO + \"REPOSITORY \";"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Logs into github \\n\""},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"            + \"Parameters: \""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_USERNAME + \"USERNAME \""},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_PASSCODE + \"PASSCODE \""},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_REPO + \"REPOSITORY \\n\""},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_USERNAME + \"johndoe \""},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_PASSCODE + \"dummy123 \""},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_REPO + \"CS2103/main \";"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"You have successfully authenticated github!\";"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Oops? Maybe the password or the username is incorrect\";"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    private final GitDetails toAuthenticate;"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"     * Creates an GitDetails object to authenticate with github {@code GitDetails}"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public GitLoginCommand(GitDetails gitDetails) {"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(gitDetails);"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"        toAuthenticate \u003d gitDetails;"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"            model.loginGithub(toAuthenticate);"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException e) {"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":47,"-":12}},{"path":"src/main/java/seedu/progresschecker/logic/commands/CompleteTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.AddDefaultTasksCommand.DEFAULT_LIST_ID;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.MyTask.completeTask;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":" * Sets a task with given index as completed."},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"public class CompleteTaskCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_WORD \u003d \"complete\";"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_ALIAS \u003d \"ct\"; // short for \"complete task\""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"    public static final String DATA_FOLDER \u003d \"data/\";"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    public static final String TASK_PAGE \u003d \"tasklist.html\";"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public static final String FILE_FAILURE \u003d \"Something is wrong with the file system.\";"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \"INDEX\";"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d \"The index should be an index in the task list displayed\""},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"            + \"to you. It must be an integer that does not exceed the number of tasks in the list.\";"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"            + \": Mark task with the given index in the list as completed.\\n\""},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"            + \"Parameters: INDEX (an index in the task list)\\n \""},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Completed task list: %1$s\";"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMPLETE_FAILURE \u003d \"Failed to mark it as completed. Index: %1$s\";"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    private int index;"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"     * Complete the task with index {@code int}"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public CompleteTaskCommand(int index) {"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(index);"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"        this.index \u003d index;"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"            String title \u003d completeTask(index, DEFAULT_LIST_ID);"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"            ViewTaskListCommand view \u003d new ViewTaskListCommand();"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"            view.updateView();"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, index + \". \" + title));"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"        } catch (CommandException ce) {"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"            throw ce;"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(COMPLETE_FAILURE + index);"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":49,"-":9}},{"path":"src/main/java/seedu/progresschecker/logic/commands/EditIssueCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_ASSIGNEES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_BODY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_LABEL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_MILESTONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"import org.kohsuke.github.GHIssue;"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"import org.kohsuke.github.GHLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHRepository;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHUser;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GitHub;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.CollectionUtil;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Assignees;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Body;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Labels;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Milestone;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Title;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":" * Edits the details of an existing issue on Github."},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"public class EditIssueCommand extends Command {"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_WORD \u003d \"editissue\";"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_ALIAS \u003d \"edI\";"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \" + \"INDEX \""},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_TITLE + \"TITLE] \""},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_ASSIGNEES + \"ASSIGNEES] \""},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_MILESTONE + \"MILESTONE] \""},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_BODY + \"BODY] \""},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_LABEL + \"LABEL]...\";"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of an existing issue \""},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"            + \"by the index number used in the issue listing. \""},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_TITLE + \"TITLE] \""},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_ASSIGNEES + \"ASSIGNEES] \""},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_MILESTONE + \"MILESTONE] \""},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_BODY + \"BODY] \""},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_LABEL + \"LABEL]...\""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"            + \"Example: \" + COMMAND_WORD + \" 5 \""},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_TITLE + \"Make a new attribute \""},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_MILESTONE + \"v1.3\";"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_EDIT_ISSUE_SUCCESS \u003d \"Issue #%d was successfully edited.\";"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_ISSUE_INVALID \u003d \"Issue doesn\u0027t exist, enter correct index\";"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"    private final String repoName \u003d new String(\"AdityaA1998/samplerepo-pr-practice\");"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"    private final String userLogin \u003d new String(\"anminkang\");"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"    private final String userAuthentication \u003d new String(\"aditya2018\");"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"    private final Index index;"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"    private final EditIssueCommand.EditIssueDescriptor editIssueDescriptor;"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"    private Issue issueToEdit;"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"    private Issue editedIssue;"},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"     * @param index of the issue on github that is to be edited"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"     * @param editIssueDescriptor details to edit the issue with"},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"    public EditIssueCommand(Index index, EditIssueCommand.EditIssueDescriptor editIssueDescriptor)"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"            throws CommandException, IOException {"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(index);"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(editIssueDescriptor);"},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"        this.index \u003d index;"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"        this.editIssueDescriptor \u003d new EditIssueCommand.EditIssueDescriptor(editIssueDescriptor);"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"        preprocess();"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"            model.updateIssue(index, editedIssue);"},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException io) {"},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":"            throw  new CommandException(io.getLocalizedMessage());"},{"lineNumber":98,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"AdityaA1998"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_ISSUE_SUCCESS, index.getOneBased()));"},{"lineNumber":100,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":102,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"AdityaA1998"},"content":"     * Preprocess data for existing issue"},{"lineNumber":104,"author":{"gitID":"AdityaA1998"},"content":"     * @throws CommandException is thrown when invalid issue index is used"},{"lineNumber":105,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException when the authentication fails"},{"lineNumber":106,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"AdityaA1998"},"content":"    private void preprocess() throws CommandException, IOException {"},{"lineNumber":108,"author":{"gitID":"AdityaA1998"},"content":"        GitHub github \u003d GitHub.connectUsingPassword(userLogin, userAuthentication);"},{"lineNumber":109,"author":{"gitID":"AdityaA1998"},"content":"        GHRepository repository \u003d github.getRepository(repoName);"},{"lineNumber":110,"author":{"gitID":"AdityaA1998"},"content":"        GHIssue issue;"},{"lineNumber":111,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"AdityaA1998"},"content":"            issue \u003d repository.getIssue(index.getOneBased());"},{"lineNumber":113,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException ie) {"},{"lineNumber":114,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_ISSUE_INVALID);"},{"lineNumber":115,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cGHUser\u003e gitAssigneeList \u003d issue.getAssignees();"},{"lineNumber":117,"author":{"gitID":"AdityaA1998"},"content":"        ArrayList\u003cGHLabel\u003e gitLabelsList \u003d new ArrayList\u003c\u003e(issue.getLabels());"},{"lineNumber":118,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cAssignees\u003e assigneesList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":119,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cLabels\u003e labelsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":120,"author":{"gitID":"AdityaA1998"},"content":"        Milestone existingMilestone \u003d null;"},{"lineNumber":121,"author":{"gitID":"AdityaA1998"},"content":"        Body existingBody \u003d new Body(\"\");"},{"lineNumber":122,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":123,"author":{"gitID":"AdityaA1998"},"content":"        if (issue.getMilestone() \u003d\u003d null) {"},{"lineNumber":124,"author":{"gitID":"AdityaA1998"},"content":"            existingMilestone \u003d null;"},{"lineNumber":125,"author":{"gitID":"AdityaA1998"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"AdityaA1998"},"content":"            existingMilestone \u003d new Milestone(issue.getMilestone().getTitle());"},{"lineNumber":127,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":129,"author":{"gitID":"AdityaA1998"},"content":"        for (int i \u003d 0; i \u003c gitAssigneeList.size(); i++) {"},{"lineNumber":130,"author":{"gitID":"AdityaA1998"},"content":"            assigneesList.add(new Assignees(gitAssigneeList.get(i).getLogin()));"},{"lineNumber":131,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":133,"author":{"gitID":"AdityaA1998"},"content":"        for (int i \u003d 0; i \u003c labelsList.size(); i++) {"},{"lineNumber":134,"author":{"gitID":"AdityaA1998"},"content":"            labelsList.add(new Labels(gitLabelsList.get(i).getName()));"},{"lineNumber":135,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":137,"author":{"gitID":"AdityaA1998"},"content":"        issueToEdit \u003d new Issue(new Title(issue.getTitle()), assigneesList, existingMilestone,"},{"lineNumber":138,"author":{"gitID":"AdityaA1998"},"content":"                existingBody, labelsList);"},{"lineNumber":139,"author":{"gitID":"AdityaA1998"},"content":"        editedIssue \u003d createEditedIssue(issueToEdit, editIssueDescriptor);"},{"lineNumber":140,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":141,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"AdityaA1998"},"content":"     * Creates and returns a {@code Issue} with the details of {@code issueToEdit}"},{"lineNumber":144,"author":{"gitID":"AdityaA1998"},"content":"     * edited with {@code editIssueDescriptor}."},{"lineNumber":145,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"AdityaA1998"},"content":"    private static Issue createEditedIssue(Issue issueToEdit,"},{"lineNumber":147,"author":{"gitID":"AdityaA1998"},"content":"                                           EditIssueCommand.EditIssueDescriptor editIssueDescriptor) {"},{"lineNumber":148,"author":{"gitID":"AdityaA1998"},"content":"        assert issueToEdit !\u003d null;"},{"lineNumber":149,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":150,"author":{"gitID":"AdityaA1998"},"content":"        Title updatedTitle \u003d editIssueDescriptor.getTitle().orElse(issueToEdit.getTitle());"},{"lineNumber":151,"author":{"gitID":"AdityaA1998"},"content":"        Set\u003cAssignees\u003e updatedAssignees \u003d editIssueDescriptor.getAssignees()"},{"lineNumber":152,"author":{"gitID":"AdityaA1998"},"content":"                .orElse(new HashSet\u003c\u003e(issueToEdit.getAssignees()));"},{"lineNumber":153,"author":{"gitID":"AdityaA1998"},"content":"        Milestone updatedMilestone \u003d editIssueDescriptor.getMilestone().orElse(issueToEdit.getMilestone());"},{"lineNumber":154,"author":{"gitID":"AdityaA1998"},"content":"        Body updatedBody \u003d editIssueDescriptor.getBody().orElse(issueToEdit.getBody());"},{"lineNumber":155,"author":{"gitID":"AdityaA1998"},"content":"        Set\u003cLabels\u003e updatedLabels \u003d editIssueDescriptor.getLabels().orElse(new HashSet\u003c\u003e(issueToEdit.getLabelsList()));"},{"lineNumber":156,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":157,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cAssignees\u003e updatedAssigneesList \u003d new ArrayList\u003c\u003e(updatedAssignees);"},{"lineNumber":158,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cLabels\u003e updatedLabelsList \u003d new ArrayList\u003c\u003e(updatedLabels);"},{"lineNumber":159,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":160,"author":{"gitID":"AdityaA1998"},"content":"        return new Issue(updatedTitle, updatedAssigneesList, updatedMilestone, updatedBody, updatedLabelsList);"},{"lineNumber":161,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":163,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":164,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":165,"author":{"gitID":"AdityaA1998"},"content":"        // short circuit if same object"},{"lineNumber":166,"author":{"gitID":"AdityaA1998"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":167,"author":{"gitID":"AdityaA1998"},"content":"            return true;"},{"lineNumber":168,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":170,"author":{"gitID":"AdityaA1998"},"content":"        // instanceof handles nulls"},{"lineNumber":171,"author":{"gitID":"AdityaA1998"},"content":"        if (!(other instanceof EditIssueCommand)) {"},{"lineNumber":172,"author":{"gitID":"AdityaA1998"},"content":"            return false;"},{"lineNumber":173,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":175,"author":{"gitID":"AdityaA1998"},"content":"        // state check"},{"lineNumber":176,"author":{"gitID":"AdityaA1998"},"content":"        EditIssueCommand e \u003d (EditIssueCommand) other;"},{"lineNumber":177,"author":{"gitID":"AdityaA1998"},"content":"        return index.equals(e.index)"},{"lineNumber":178,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 editIssueDescriptor.equals(e.editIssueDescriptor)"},{"lineNumber":179,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 Objects.equals(issueToEdit, e.issueToEdit);"},{"lineNumber":180,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":182,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"AdityaA1998"},"content":"     * Stores the details to edit the issue with. Each non-empty field value will replace the"},{"lineNumber":184,"author":{"gitID":"AdityaA1998"},"content":"     * corresponding field value of the Issue."},{"lineNumber":185,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"AdityaA1998"},"content":"    public static class EditIssueDescriptor {"},{"lineNumber":187,"author":{"gitID":"AdityaA1998"},"content":"        private Title title;"},{"lineNumber":188,"author":{"gitID":"AdityaA1998"},"content":"        private Set\u003cAssignees\u003e assignees;"},{"lineNumber":189,"author":{"gitID":"AdityaA1998"},"content":"        private Milestone milestone;"},{"lineNumber":190,"author":{"gitID":"AdityaA1998"},"content":"        private Body body;"},{"lineNumber":191,"author":{"gitID":"AdityaA1998"},"content":"        private Set\u003cLabels\u003e labels;"},{"lineNumber":192,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":193,"author":{"gitID":"AdityaA1998"},"content":"        public EditIssueDescriptor() {}"},{"lineNumber":194,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":195,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":196,"author":{"gitID":"AdityaA1998"},"content":"         * Copy constructor."},{"lineNumber":197,"author":{"gitID":"AdityaA1998"},"content":"         * A defensive copy of {@code labels} is used internally."},{"lineNumber":198,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":199,"author":{"gitID":"AdityaA1998"},"content":"        public EditIssueDescriptor(EditIssueCommand.EditIssueDescriptor toCopy) {"},{"lineNumber":200,"author":{"gitID":"AdityaA1998"},"content":"            setTitle(toCopy.title);"},{"lineNumber":201,"author":{"gitID":"AdityaA1998"},"content":"            setAssignees(toCopy.assignees);"},{"lineNumber":202,"author":{"gitID":"AdityaA1998"},"content":"            setMilestone(toCopy.milestone);"},{"lineNumber":203,"author":{"gitID":"AdityaA1998"},"content":"            setBody(toCopy.body);"},{"lineNumber":204,"author":{"gitID":"AdityaA1998"},"content":"            setLabels(toCopy.labels);"},{"lineNumber":205,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":207,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":208,"author":{"gitID":"AdityaA1998"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":209,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":210,"author":{"gitID":"AdityaA1998"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":211,"author":{"gitID":"AdityaA1998"},"content":"            return CollectionUtil.isAnyNonNull(this.title, this.assignees, this.milestone, this.body,"},{"lineNumber":212,"author":{"gitID":"AdityaA1998"},"content":"                    this.labels);"},{"lineNumber":213,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":215,"author":{"gitID":"AdityaA1998"},"content":"        public void setTitle(Title title) {"},{"lineNumber":216,"author":{"gitID":"AdityaA1998"},"content":"            this.title \u003d title;"},{"lineNumber":217,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":219,"author":{"gitID":"AdityaA1998"},"content":"        public Optional\u003cTitle\u003e getTitle() {"},{"lineNumber":220,"author":{"gitID":"AdityaA1998"},"content":"            return Optional.ofNullable(title);"},{"lineNumber":221,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":223,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":224,"author":{"gitID":"AdityaA1998"},"content":"         * Sets {@code assignees} to this object\u0027s {@code assignees}."},{"lineNumber":225,"author":{"gitID":"AdityaA1998"},"content":"         * A defensive copy of {@code assignees} is used internally."},{"lineNumber":226,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":227,"author":{"gitID":"AdityaA1998"},"content":"        public void setAssignees(Set\u003cAssignees\u003e assignees) {"},{"lineNumber":228,"author":{"gitID":"AdityaA1998"},"content":"            this.assignees \u003d (assignees !\u003d null) ? new HashSet\u003c\u003e(assignees) : null;"},{"lineNumber":229,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":231,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":232,"author":{"gitID":"AdityaA1998"},"content":"         * Returns an unmodifiable assignees set, which throws {@code UnsupportedOperationException}"},{"lineNumber":233,"author":{"gitID":"AdityaA1998"},"content":"         * if modification is attempted."},{"lineNumber":234,"author":{"gitID":"AdityaA1998"},"content":"         * Returns {@code Optional#empty()} if {@code labels} is null."},{"lineNumber":235,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":236,"author":{"gitID":"AdityaA1998"},"content":"        public Optional\u003cSet\u003cAssignees\u003e\u003e getAssignees() {"},{"lineNumber":237,"author":{"gitID":"AdityaA1998"},"content":"            return (assignees !\u003d null) ? Optional.of(Collections.unmodifiableSet(assignees)) : Optional.empty();"},{"lineNumber":238,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":240,"author":{"gitID":"AdityaA1998"},"content":"        public void setMilestone(Milestone milestone) {"},{"lineNumber":241,"author":{"gitID":"AdityaA1998"},"content":"            this.milestone \u003d milestone;"},{"lineNumber":242,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":244,"author":{"gitID":"AdityaA1998"},"content":"        public Optional\u003cMilestone\u003e getMilestone() {"},{"lineNumber":245,"author":{"gitID":"AdityaA1998"},"content":"            return Optional.ofNullable(milestone);"},{"lineNumber":246,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":248,"author":{"gitID":"AdityaA1998"},"content":"        public void setBody(Body body) {"},{"lineNumber":249,"author":{"gitID":"AdityaA1998"},"content":"            this.body \u003d body;"},{"lineNumber":250,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":252,"author":{"gitID":"AdityaA1998"},"content":"        public Optional\u003cBody\u003e getBody() {"},{"lineNumber":253,"author":{"gitID":"AdityaA1998"},"content":"            return Optional.ofNullable(body);"},{"lineNumber":254,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":256,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":257,"author":{"gitID":"AdityaA1998"},"content":"         * Sets {@code labels} to this object\u0027s {@code labels}."},{"lineNumber":258,"author":{"gitID":"AdityaA1998"},"content":"         * A defensive copy of {@code labels} is used internally."},{"lineNumber":259,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":260,"author":{"gitID":"AdityaA1998"},"content":"        public void setLabels(Set\u003cLabels\u003e labels) {"},{"lineNumber":261,"author":{"gitID":"AdityaA1998"},"content":"            this.labels \u003d (labels !\u003d null) ? new HashSet\u003c\u003e(labels) : null;"},{"lineNumber":262,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":264,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":265,"author":{"gitID":"AdityaA1998"},"content":"         * Returns an unmodifiable labels set, which throws {@code UnsupportedOperationException}"},{"lineNumber":266,"author":{"gitID":"AdityaA1998"},"content":"         * if modification is attempted."},{"lineNumber":267,"author":{"gitID":"AdityaA1998"},"content":"         * Returns {@code Optional#empty()} if {@code labels} is null."},{"lineNumber":268,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":269,"author":{"gitID":"AdityaA1998"},"content":"        public Optional\u003cSet\u003cLabels\u003e\u003e getLabels() {"},{"lineNumber":270,"author":{"gitID":"AdityaA1998"},"content":"            return (labels !\u003d null) ? Optional.of(Collections.unmodifiableSet(labels)) : Optional.empty();"},{"lineNumber":271,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":273,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":274,"author":{"gitID":"AdityaA1998"},"content":"        public boolean equals(Object other) {"},{"lineNumber":275,"author":{"gitID":"AdityaA1998"},"content":"            // short circuit if same object"},{"lineNumber":276,"author":{"gitID":"AdityaA1998"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":277,"author":{"gitID":"AdityaA1998"},"content":"                return true;"},{"lineNumber":278,"author":{"gitID":"AdityaA1998"},"content":"            }"},{"lineNumber":279,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":280,"author":{"gitID":"AdityaA1998"},"content":"            // instanceof handles nulls"},{"lineNumber":281,"author":{"gitID":"AdityaA1998"},"content":"            if (!(other instanceof EditCommand.EditPersonDescriptor)) {"},{"lineNumber":282,"author":{"gitID":"AdityaA1998"},"content":"                return false;"},{"lineNumber":283,"author":{"gitID":"AdityaA1998"},"content":"            }"},{"lineNumber":284,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":285,"author":{"gitID":"AdityaA1998"},"content":"            // state check"},{"lineNumber":286,"author":{"gitID":"AdityaA1998"},"content":"            EditIssueCommand.EditIssueDescriptor e \u003d (EditIssueCommand.EditIssueDescriptor) other;"},{"lineNumber":287,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":288,"author":{"gitID":"AdityaA1998"},"content":"            return getTitle().equals(e.getTitle())"},{"lineNumber":289,"author":{"gitID":"AdityaA1998"},"content":"                    \u0026\u0026 getAssignees().equals(e.getAssignees())"},{"lineNumber":290,"author":{"gitID":"AdityaA1998"},"content":"                    \u0026\u0026 getMilestone().equals(e.getMilestone())"},{"lineNumber":291,"author":{"gitID":"AdityaA1998"},"content":"                    \u0026\u0026 getBody().equals(e.getBody())"},{"lineNumber":292,"author":{"gitID":"AdityaA1998"},"content":"                    \u0026\u0026 getLabels().equals(e.getLabels());"},{"lineNumber":293,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":294,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":263,"-":32}},{"path":"src/main/java/seedu/progresschecker/storage/XmlAdaptedExercise.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.ModelAnswer;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Question;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionType;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.StudentAnswer;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":" * JAXB-friendly version of the Exercise."},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"public class XmlAdaptedExercise {"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Exercise\u0027s %s field is missing!\";"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    private String questionIndex;"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    private String questionType;"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"    private String question;"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"    private String studentAnswer;"},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"    private String modelAnswer;"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"     * Constructs an XmlAdaptedExercise."},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":"    public XmlAdaptedExercise() {}"},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"     * Constructs an {@code XmlAdaptedExercise} with the given exercise details."},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":"    public XmlAdaptedExercise("},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"            String questionIndex, String questionType, String question,"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"            String studentAnswer, String modelAnswer) {"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":"        this.questionIndex \u003d questionIndex;"},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":"        this.questionType \u003d questionType;"},{"lineNumber":48,"author":{"gitID":"iNekox3"},"content":"        this.question \u003d question;"},{"lineNumber":49,"author":{"gitID":"iNekox3"},"content":"        this.studentAnswer \u003d studentAnswer;"},{"lineNumber":50,"author":{"gitID":"iNekox3"},"content":"        this.modelAnswer \u003d modelAnswer;"},{"lineNumber":51,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":53,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"iNekox3"},"content":"     * Converts a given Exercise into this class for JAXB use."},{"lineNumber":55,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"iNekox3"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedExercise"},{"lineNumber":57,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"iNekox3"},"content":"    public XmlAdaptedExercise(Exercise source) {"},{"lineNumber":59,"author":{"gitID":"iNekox3"},"content":"        questionIndex \u003d source.getQuestionIndex().value;"},{"lineNumber":60,"author":{"gitID":"iNekox3"},"content":"        questionType \u003d source.getQuestionType().value;"},{"lineNumber":61,"author":{"gitID":"iNekox3"},"content":"        question \u003d source.getQuestion().value;"},{"lineNumber":62,"author":{"gitID":"iNekox3"},"content":"        studentAnswer \u003d source.getStudentAnswer().value;"},{"lineNumber":63,"author":{"gitID":"iNekox3"},"content":"        modelAnswer \u003d source.getModelAnswer().value;"},{"lineNumber":64,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":66,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"iNekox3"},"content":"     * Converts this jaxb-friendly adapted exercise object into the model\u0027s Exercise object."},{"lineNumber":68,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"iNekox3"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted exercise"},{"lineNumber":70,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"iNekox3"},"content":"    public Exercise toModelType() throws IllegalValueException {"},{"lineNumber":72,"author":{"gitID":"iNekox3"},"content":"        if (this.questionIndex \u003d\u003d null) {"},{"lineNumber":73,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException("},{"lineNumber":74,"author":{"gitID":"iNekox3"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":75,"author":{"gitID":"iNekox3"},"content":"                    QuestionIndex.class.getSimpleName()));"},{"lineNumber":76,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"iNekox3"},"content":"        if (!QuestionIndex.isValidIndex(this.questionIndex)) {"},{"lineNumber":78,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException(QuestionIndex.MESSAGE_INDEX_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"iNekox3"},"content":"        final QuestionIndex questionIndex \u003d new QuestionIndex(this.questionIndex);"},{"lineNumber":81,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":82,"author":{"gitID":"iNekox3"},"content":"        if (this.questionType \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException("},{"lineNumber":84,"author":{"gitID":"iNekox3"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":85,"author":{"gitID":"iNekox3"},"content":"                    QuestionType.class.getSimpleName()));"},{"lineNumber":86,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"iNekox3"},"content":"        if (!QuestionType.isValidType(this.questionType)) {"},{"lineNumber":88,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException(QuestionType.MESSAGE_TYPE_CONSTRAINTS);"},{"lineNumber":89,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"iNekox3"},"content":"        final QuestionType questionType \u003d new QuestionType(this.questionType);"},{"lineNumber":91,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":92,"author":{"gitID":"iNekox3"},"content":"        if (this.question \u003d\u003d null) {"},{"lineNumber":93,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException("},{"lineNumber":94,"author":{"gitID":"iNekox3"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":95,"author":{"gitID":"iNekox3"},"content":"                    Question.class.getSimpleName()));"},{"lineNumber":96,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"iNekox3"},"content":"        final Question question \u003d new Question(this.question);"},{"lineNumber":98,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":99,"author":{"gitID":"iNekox3"},"content":"        if (this.studentAnswer \u003d\u003d null) {"},{"lineNumber":100,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException("},{"lineNumber":101,"author":{"gitID":"iNekox3"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":102,"author":{"gitID":"iNekox3"},"content":"                    StudentAnswer.class.getSimpleName()));"},{"lineNumber":103,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"iNekox3"},"content":"        final StudentAnswer studentAnswer \u003d new StudentAnswer(this.studentAnswer);"},{"lineNumber":105,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":106,"author":{"gitID":"iNekox3"},"content":"        if (this.modelAnswer \u003d\u003d null) {"},{"lineNumber":107,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException("},{"lineNumber":108,"author":{"gitID":"iNekox3"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":109,"author":{"gitID":"iNekox3"},"content":"                    ModelAnswer.class.getSimpleName()));"},{"lineNumber":110,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"iNekox3"},"content":"        final ModelAnswer modelAnswer \u003d new ModelAnswer(this.modelAnswer);"},{"lineNumber":112,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":113,"author":{"gitID":"iNekox3"},"content":"        return new Exercise(questionIndex, questionType, question, studentAnswer, modelAnswer);"},{"lineNumber":114,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":116,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"iNekox3"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitID":"iNekox3"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":119,"author":{"gitID":"iNekox3"},"content":"            return true;"},{"lineNumber":120,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":122,"author":{"gitID":"iNekox3"},"content":"        if (!(other instanceof XmlAdaptedExercise)) {"},{"lineNumber":123,"author":{"gitID":"iNekox3"},"content":"            return false;"},{"lineNumber":124,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":126,"author":{"gitID":"iNekox3"},"content":"        XmlAdaptedExercise otherExercise \u003d (XmlAdaptedExercise) other;"},{"lineNumber":127,"author":{"gitID":"iNekox3"},"content":"        return Objects.equals(questionIndex, otherExercise.questionIndex)"},{"lineNumber":128,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 Objects.equals(questionType, otherExercise.questionType)"},{"lineNumber":129,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 Objects.equals(question, otherExercise.question);"},{"lineNumber":130,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":117,"-":14}},{"path":"src/main/java/seedu/progresschecker/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ProgressChecker;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ReadOnlyProgressChecker;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.ModelAnswer;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Question;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionType;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.StudentAnswer;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.DuplicateExerciseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Major;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Year;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code ProgressChecker} with sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@gmail.com\"),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                new GithubUsername(\"AlexGithub\"), new Major(\"Computer Science\"), new Year(\"2\"),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@gmail.com\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                new GithubUsername(\"BerniceGithub\"), new Major(\"Computer Engineering\"), new Year(\"2\"),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@gmail.com\"),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                new GithubUsername(\"CharlotteGithub\"), new Major(\"Information Security\"), new Year(\"2\"),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@gmail.com\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                new GithubUsername(\"DavidGithub\"), new Major(\"Computer Engineering\"), new Year(\"2\"),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@gmail.com\"),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                new GithubUsername(\"IrfanGithub\"), new Major(\"Computer Science\"), new Year(\"2\"),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@gmail.com\"),"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                new GithubUsername(\"RoyGithub\"), new Major(\"Computer Science\"), new Year(\"2\"),"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static ReadOnlyProgressChecker getSampleProgressChecker() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ProgressChecker sampleAb \u003d new ProgressChecker();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            for (Exercise sampleExercise : getSampleExercises()) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                sampleAb.addExercise(sampleExercise);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } catch (DuplicateExerciseException e) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate exercises\", e);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":82,"author":{"gitID":"iNekox3"},"content":"    public static Exercise[] getSampleExercises() {"},{"lineNumber":83,"author":{"gitID":"iNekox3"},"content":"        return new Exercise[] {"},{"lineNumber":84,"author":{"gitID":"iNekox3"},"content":"            // week 11"},{"lineNumber":85,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"11.1.1\"), new QuestionType(\"choice\"),"},{"lineNumber":86,"author":{"gitID":"iNekox3"},"content":"                new Question(\"What is the main difference between a class diagram and and an OO domain model?\\n\""},{"lineNumber":87,"author":{"gitID":"iNekox3"},"content":"                        + \"a. One is about the problem domain while the other is about the solution domain.\\n\""},{"lineNumber":88,"author":{"gitID":"iNekox3"},"content":"                        + \"b. One has more classes than the other.\\n\""},{"lineNumber":89,"author":{"gitID":"iNekox3"},"content":"                        + \"c. One shows more details than the other.\\n\""},{"lineNumber":90,"author":{"gitID":"iNekox3"},"content":"                        + \"d. One is a UML diagram, while the other is not a UML diagram.\"),"},{"lineNumber":91,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":92,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a. Both are UML diagrams, and use the class diagram notation.\""},{"lineNumber":93,"author":{"gitID":"iNekox3"},"content":"                        + \"While it is true that often a class diagram may have more classes and more details,\""},{"lineNumber":94,"author":{"gitID":"iNekox3"},"content":"                        + \"the main difference is that the OO domain model describes the problem domain\""},{"lineNumber":95,"author":{"gitID":"iNekox3"},"content":"                        + \"while the class diagram describes the solution.\")),"},{"lineNumber":96,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"11.3.1\"), new QuestionType(\"text\"),"},{"lineNumber":97,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Here are some common elements of a design pattern: \""},{"lineNumber":98,"author":{"gitID":"iNekox3"},"content":"                        + \"Name, Context, Problem, Solution, Anti-patterns (optional), Consequences (optional),\""},{"lineNumber":99,"author":{"gitID":"iNekox3"},"content":"                        + \"other useful information (optional).\\n\""},{"lineNumber":100,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":101,"author":{"gitID":"iNekox3"},"content":"                        + \"Using similar elements, describe a pattern that is not a design pattern.\""},{"lineNumber":102,"author":{"gitID":"iNekox3"},"content":"                        + \"It must be a pattern you have noticed, not a pattern already documented by others.\""},{"lineNumber":103,"author":{"gitID":"iNekox3"},"content":"                        + \"You may also give a pattern not related to software.\\n\""},{"lineNumber":104,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":105,"author":{"gitID":"iNekox3"},"content":"                        + \"Some examples:\\n\""},{"lineNumber":106,"author":{"gitID":"iNekox3"},"content":"                        + \"- A pattern for testing textual UIs.\\n\""},{"lineNumber":107,"author":{"gitID":"iNekox3"},"content":"                        + \"- A pattern for striking a good bargain at a mall such as Sim-Lim Square.\"),"},{"lineNumber":108,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":109,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"No suggested answer.\")),"},{"lineNumber":110,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"11.4.1\"), new QuestionType(\"choice\"),"},{"lineNumber":111,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Applying the heuristics covered so far, we can determine the precise number of \""},{"lineNumber":112,"author":{"gitID":"iNekox3"},"content":"                        + \"test cases required to test any given SUT effectively.\\n\""},{"lineNumber":113,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":114,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":115,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\"),"},{"lineNumber":116,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":117,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b. False. These heuristics are, well, heuristics only.\""},{"lineNumber":118,"author":{"gitID":"iNekox3"},"content":"                        + \"They will help you to make better decisions about test case design.\""},{"lineNumber":119,"author":{"gitID":"iNekox3"},"content":"                        + \"However, they are speculative in nature (especially, when testing in black-box fashion)\""},{"lineNumber":120,"author":{"gitID":"iNekox3"},"content":"                        + \"and cannot give you precise number of test cases.\")),"},{"lineNumber":121,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"11.4.2\"), new QuestionType(\"choice\"),"},{"lineNumber":122,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which of these contradict the heuristics recommended \""},{"lineNumber":123,"author":{"gitID":"iNekox3"},"content":"                        + \"when creating test cases with multiple inputs?\\n\""},{"lineNumber":124,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":125,"author":{"gitID":"iNekox3"},"content":"                        + \"a. All invalid test inputs must be tested together.\\n\""},{"lineNumber":126,"author":{"gitID":"iNekox3"},"content":"                        + \"b. It is ok to combine valid values for different inputs.\\n\""},{"lineNumber":127,"author":{"gitID":"iNekox3"},"content":"                        + \"c. No more than one invalid test input should be in a given test case.\\n\""},{"lineNumber":128,"author":{"gitID":"iNekox3"},"content":"                        + \"d. Each valid test input should appear at least once \""},{"lineNumber":129,"author":{"gitID":"iNekox3"},"content":"                        + \"in a test case that doesn’t have any invalid inputs.\"),"},{"lineNumber":130,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":131,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a. If you test all invalid test inputs together,\""},{"lineNumber":132,"author":{"gitID":"iNekox3"},"content":"                        + \"you will not know if each one of the invalid inputs are handled correctly by the SUT. \""},{"lineNumber":133,"author":{"gitID":"iNekox3"},"content":"                        + \"This is because most SUTs return an error message \""},{"lineNumber":134,"author":{"gitID":"iNekox3"},"content":"                        + \"upon encountering the first invalid input.\")),"},{"lineNumber":135,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"11.6.1\"), new QuestionType(\"choice\"),"},{"lineNumber":136,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose the correct statements about agile processes.\\n\""},{"lineNumber":137,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":138,"author":{"gitID":"iNekox3"},"content":"                        + \"a. They value working software over comprehensive documentation.\\n\""},{"lineNumber":139,"author":{"gitID":"iNekox3"},"content":"                        + \"b. They value responding to change over following a plan.\\n\""},{"lineNumber":140,"author":{"gitID":"iNekox3"},"content":"                        + \"c. They may not be suitable for some type of projects.\\n\""},{"lineNumber":141,"author":{"gitID":"iNekox3"},"content":"                        + \"d. XP and Scrum are agile processes.\"),"},{"lineNumber":142,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":143,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a b c d.\")),"},{"lineNumber":144,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"11.7.1\"), new QuestionType(\"choice\"),"},{"lineNumber":145,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose the correct statements about the unified process.\\n\""},{"lineNumber":146,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":147,"author":{"gitID":"iNekox3"},"content":"                        + \"a. It was conceived by the three amigos who also created UML.\\n\""},{"lineNumber":148,"author":{"gitID":"iNekox3"},"content":"                        + \"b. The Unified process requires the use of UML.\\n\""},{"lineNumber":149,"author":{"gitID":"iNekox3"},"content":"                        + \"c. The Unified process is actually a process framework rather than a fixed process.\\n\""},{"lineNumber":150,"author":{"gitID":"iNekox3"},"content":"                        + \"d. The Unified process can be iterative and incremental\"),"},{"lineNumber":151,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":152,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a c d. Although UP was created by the same three amigos who created UML,\""},{"lineNumber":153,"author":{"gitID":"iNekox3"},"content":"                        + \"the UP does not require UML.\"))"},{"lineNumber":154,"author":{"gitID":"iNekox3"},"content":"        };"},{"lineNumber":155,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":157,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":77,"-":80}},{"path":"src/main/java/seedu/progresschecker/model/person/GithubUsername.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":7,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"EdwardKSG"},"content":" * Represents a Person\u0027s Github username in the ProgressChecker."},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidUsername(String)}"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"public class GithubUsername {"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_USERNAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"            \"Person Github usernames should only contain alphanumeric characters and spaces, \""},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"                    + \"and it should not be blank\";"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"    /*"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"     * The first character of the username must not be a whitespace,"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    public static final String USERNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"    public final String username;"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"     * Constructs a {@code GithubUsername}."},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"     * @param username A valid username."},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    public GithubUsername(String username) {"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(username);"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"        checkArgument(isValidUsername(username), MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"        this.username \u003d username;"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"     * Returns true if a given string is a valid Github username."},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"    public static boolean isValidUsername(String test) {"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"        return test.matches(USERNAME_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"        return username;"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"                || (other instanceof GithubUsername // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"                \u0026\u0026 this.username.equals(((GithubUsername) other).username)); // state check"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"        return username.hashCode();"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":56,"-":5}},{"path":"src/main/java/seedu/progresschecker/model/person/Year.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":7,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"EdwardKSG"},"content":" * Represents a Person\u0027s year of study in the ProgressChecker."},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidYear(String)}"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"public class Year {"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_YEAR_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"            \"Person years of study can take digits ranging from 1 to 5, it can be left blank\";"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"     * It accepts single digits ranging from 1 to 5."},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"     * empty string will be accepted as well, as \"year\" is an optional field."},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public static final String YEAR_VALIDATION_REGEX \u003d \"(^$|^[1-5]$)\";"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"     * Constructs an {@code Year}."},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"     * @param year A valid year."},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"    public Year(String year) {"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(year);"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"        checkArgument(isValidYear(year), MESSAGE_YEAR_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"        this.value \u003d year;"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"     * Returns true if a given string is a valid year of study."},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public static boolean isValidYear(String test) {"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"        return test.matches(YEAR_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"                || (other instanceof Year // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"                \u0026\u0026 this.value.equals(((Year) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":54,"-":5}},{"path":"src/main/java/seedu/progresschecker/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in ProgressChecker."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static String defaultPath \u003d \"/images/profile_photo.jpg\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final GithubUsername username;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Major major;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Year year;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private String photoPath;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, GithubUsername username, Major major, Year year,"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                  Set\u003cTag\u003e tags) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, username, major, year, tags);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.username \u003d username;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.major \u003d major;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.year \u003d year;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.photoPath \u003d defaultPath;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"    public GithubUsername getUsername() {"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"        return username;"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"    public Major getMajor() {"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"        return major;"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"    public Year getYear() {"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"        return year;"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public String getPhotoPath() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return photoPath;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public String getDefaultPath() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return defaultPath;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void updatePhoto(String path) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.photoPath \u003d path;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getUsername().equals(this.getUsername())"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getMajor().equals(this.getMajor())"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getYear().equals(this.getYear());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, username, major, year, tags);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                .append(\" Github Username: \")"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .append(getUsername())"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .append(\" Major: \")"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .append(getMajor())"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .append(\" Year of Study: \")"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .append(getYear())"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":13,"-":124}},{"path":"src/main/java/seedu/progresschecker/model/person/Major.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":7,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"EdwardKSG"},"content":" * Represents a Person\u0027s major in the ProgressChecker."},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidMajor(String)}"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"public class Major {"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_MAJOR_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"            \"Person majors can take any values, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"     * The first character of the major must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MAJOR_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"     * Constructs an {@code Major}."},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"     * @param major A valid major."},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"    public Major(String major) {"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(major);"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"        checkArgument(isValidMajor(major), MESSAGE_MAJOR_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"        this.value \u003d major;"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"     * Returns true if a given string is a valid person major."},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public static boolean isValidMajor(String test) {"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"        return test.matches(MAJOR_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"                || (other instanceof Major // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"                \u0026\u0026 this.value.equals(((Major) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":54,"-":5}},{"path":"src/main/java/seedu/progresschecker/model/exercise/QuestionIndex.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":" * Represents an Exercise\u0027s question index in the ProgressChecker."},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":"public class QuestionIndex {"},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"    public static final int QUESTION_NUMBER_INDEX \u003d 2;"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"    public static final String MESSAGE_INDEX_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"            \"Indices can only contain numbers, and should be in the format of \""},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"            + \"SECTION NUMBER.PART NUMBER.QUESTION NUMBER\";"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"    public static final String INDEX_VALIDATION_REGEX \u003d \"([2-9]|1[0-3])\\\\.([0-9]|[0-9]{2})\\\\.([0-9]|[0-9]{2})\";"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"     * Constructs a {@code QuestionIndex}."},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"     * @param index A valid index number."},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"    public QuestionIndex(String index) {"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(index);"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"        checkArgument(isValidIndex(index), MESSAGE_INDEX_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"        this.value \u003d index;"},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"     * Returns true if a given string is a valid index number."},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"    public static boolean isValidIndex(String test) {"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"        return test.matches(INDEX_VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"     * Returns the question number in the whole question index."},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":"    public int getQuestionNumber() {"},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"        return Integer.parseInt(value.split(Pattern.quote(\".\"))[QUESTION_NUMBER_INDEX]);"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"iNekox3"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitID":"iNekox3"},"content":"        return value;"},{"lineNumber":50,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":44,"-":7}},{"path":"src/main/java/seedu/progresschecker/model/ProgressChecker.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.UniqueExerciseList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.DuplicateExerciseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.ExerciseNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.GitIssueList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.UniquePersonList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.PhotoPath;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.UniquePhotoList;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.exceptions.DuplicatePhotoException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.UniqueTagList;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Wraps all data at the progresschecker-book level"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class ProgressChecker implements ReadOnlyProgressChecker {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final UniquePhotoList photos;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final UniqueExerciseList exercises;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final GitIssueList issues;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        photos \u003d new UniquePhotoList();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        exercises \u003d new UniqueExerciseList();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        issues \u003d new GitIssueList();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public ProgressChecker() {}"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Creates an ProgressChecker using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public ProgressChecker(ReadOnlyProgressChecker toBeCopied) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":83,"author":{"gitID":"iNekox3"},"content":"    public void setExercises(List\u003cExercise\u003e exercises) throws DuplicateExerciseException {"},{"lineNumber":84,"author":{"gitID":"iNekox3"},"content":"        this.exercises.setExercises(exercises);"},{"lineNumber":85,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":87,"author":{"gitID":"iNekox3"},"content":"    //@@author"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code ProgressChecker} with {@code newData}."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyProgressChecker newData) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            setExercises(newData.getExerciseList());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"ProgressChecker should not have duplicate persons\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } catch (DuplicateExerciseException e) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"ProgressChecker should not have duplicate exercises\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"Livian1107"},"content":"    //@@author Livian1107"},{"lineNumber":109,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"Livian1107"},"content":"     * Sorts the existing {@code UniquePersonList} of this {@code ProgressChecker}"},{"lineNumber":111,"author":{"gitID":"Livian1107"},"content":"     * with their names in alphabetical order."},{"lineNumber":112,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"Livian1107"},"content":"    public void sort() {"},{"lineNumber":114,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(persons);"},{"lineNumber":115,"author":{"gitID":"Livian1107"},"content":"        persons.sort();"},{"lineNumber":116,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":118,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"Livian1107"},"content":"     * Adds a new uploaded photo path to the the list of profile photos"},{"lineNumber":120,"author":{"gitID":"Livian1107"},"content":"     * @param photoPath of a new uploaded photo"},{"lineNumber":121,"author":{"gitID":"Livian1107"},"content":"     * @throws DuplicatePhotoException if there already exists the same photo path"},{"lineNumber":122,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"Livian1107"},"content":"    public void addPhotoPath(PhotoPath photoPath) throws DuplicatePhotoException {"},{"lineNumber":124,"author":{"gitID":"Livian1107"},"content":"        photos.add(photoPath);"},{"lineNumber":125,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Livian1107"},"content":"    //@@author"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Adds a person to the ProgressChecker."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":142,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * {@code ProgressChecker}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":163,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"AdityaA1998"},"content":"    //@@author adityaa1998"},{"lineNumber":167,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":168,"author":{"gitID":"AdityaA1998"},"content":"    //issue-level operations"},{"lineNumber":169,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":170,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"AdityaA1998"},"content":"     * Login to github"},{"lineNumber":172,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":173,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException is there is any problem in authentication"},{"lineNumber":174,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":175,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"AdityaA1998"},"content":"    public void loginGithub(GitDetails gitdetails) throws IOException, CommandException {"},{"lineNumber":177,"author":{"gitID":"AdityaA1998"},"content":"        issues.initialiseCredentials(gitdetails);"},{"lineNumber":178,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":180,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"AdityaA1998"},"content":"     * Creates issue on github"},{"lineNumber":182,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":183,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException if theres any fault in the input values or the authentication fails due to wrong input"},{"lineNumber":184,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"AdityaA1998"},"content":"    public void createIssueOnGitHub(Issue i) throws IOException, CommandException {"},{"lineNumber":186,"author":{"gitID":"AdityaA1998"},"content":"        issues.createIssue(i);"},{"lineNumber":187,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":189,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"AdityaA1998"},"content":"     * Replaces the given issue at {@code index} from github with {@code editedPerson}."},{"lineNumber":191,"author":{"gitID":"AdityaA1998"},"content":"     * reopens an issue on github"},{"lineNumber":192,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":193,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException if the index mentioned is not valid or he\u0027s closed"},{"lineNumber":194,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"AdityaA1998"},"content":"    public void reopenIssueOnGithub(Index index) throws IOException, CommandException {"},{"lineNumber":196,"author":{"gitID":"AdityaA1998"},"content":"        issues.reopenIssue(index);"},{"lineNumber":197,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":199,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"AdityaA1998"},"content":"     * closes an issue on github"},{"lineNumber":201,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":202,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException if the index mentioned is not valid or he\u0027s closed"},{"lineNumber":203,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"AdityaA1998"},"content":"    public void closeIssueOnGithub(Index index) throws IOException, CommandException {"},{"lineNumber":205,"author":{"gitID":"AdityaA1998"},"content":"        issues.closeIssue(index);"},{"lineNumber":206,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":208,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"AdityaA1998"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":210,"author":{"gitID":"AdityaA1998"},"content":"     * {@code ProgressChecker}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":211,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":212,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException if there is any problem in git authentication or parameter"},{"lineNumber":213,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":214,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"AdityaA1998"},"content":"    public void updateIssue(Index index, Issue editedIssue) throws IOException {"},{"lineNumber":216,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(editedIssue);"},{"lineNumber":217,"author":{"gitID":"AdityaA1998"},"content":"        issues.setIssue(index, editedIssue);"},{"lineNumber":218,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":220,"author":{"gitID":"AdityaA1998"},"content":"    //@@author"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":237,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":240,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getUsername(), person.getMajor(),"},{"lineNumber":241,"author":{"gitID":"-"},"content":"                person.getYear(), correctTagReferences);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code ProgressChecker}."},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code ProgressChecker}."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"Livian1107"},"content":"    //@@author Livian1107"},{"lineNumber":257,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"Livian1107"},"content":"     * Uploads the profile photo path of target person"},{"lineNumber":259,"author":{"gitID":"Livian1107"},"content":"     * @param target"},{"lineNumber":260,"author":{"gitID":"Livian1107"},"content":"     * @param path"},{"lineNumber":261,"author":{"gitID":"Livian1107"},"content":"     * @throws PersonNotFoundException"},{"lineNumber":262,"author":{"gitID":"Livian1107"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":263,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"Livian1107"},"content":"    public void uploadPhoto(Person target, String path) throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":265,"author":{"gitID":"Livian1107"},"content":"        Person tempPerson \u003d target;"},{"lineNumber":266,"author":{"gitID":"Livian1107"},"content":"        target.updatePhoto(path);"},{"lineNumber":267,"author":{"gitID":"Livian1107"},"content":"        persons.setPerson(tempPerson, target);"},{"lineNumber":268,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"Livian1107"},"content":"    //@@author"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":278,"author":{"gitID":"iNekox3"},"content":"    //// exercise-level operations"},{"lineNumber":279,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":280,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":281,"author":{"gitID":"iNekox3"},"content":"     * Adds an exercise to the ProgressChecker."},{"lineNumber":282,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":283,"author":{"gitID":"iNekox3"},"content":"     * @throws DuplicateExerciseException if an equivalent exercise already exists."},{"lineNumber":284,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"iNekox3"},"content":"    public void addExercise(Exercise e) throws DuplicateExerciseException {"},{"lineNumber":286,"author":{"gitID":"iNekox3"},"content":"        Exercise exercise \u003d new Exercise("},{"lineNumber":287,"author":{"gitID":"iNekox3"},"content":"                e.getQuestionIndex(), e.getQuestionType(), e.getQuestion(),"},{"lineNumber":288,"author":{"gitID":"iNekox3"},"content":"                e.getStudentAnswer(), e.getModelAnswer());"},{"lineNumber":289,"author":{"gitID":"iNekox3"},"content":"        exercises.add(exercise);"},{"lineNumber":290,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":292,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"iNekox3"},"content":"     * Replaces the given exercise {@code target} in the list with {@code editedExercise}."},{"lineNumber":294,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":295,"author":{"gitID":"iNekox3"},"content":"     * @throws ExerciseNotFoundException if {@code target} could not be found in the list."},{"lineNumber":296,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":297,"author":{"gitID":"iNekox3"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":298,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":299,"author":{"gitID":"iNekox3"},"content":"    public void updateExercise(Exercise target, Exercise editedExercise)"},{"lineNumber":300,"author":{"gitID":"iNekox3"},"content":"            throws ExerciseNotFoundException {"},{"lineNumber":301,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(editedExercise);"},{"lineNumber":302,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":303,"author":{"gitID":"iNekox3"},"content":"        exercises.setExercise(target, editedExercise);"},{"lineNumber":304,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":306,"author":{"gitID":"iNekox3"},"content":"    //@@author"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":321,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":322,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":326,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":327,"author":{"gitID":"iNekox3"},"content":"    public ObservableList\u003cExercise\u003e getExerciseList() {"},{"lineNumber":328,"author":{"gitID":"iNekox3"},"content":"        return exercises.asObservableList();"},{"lineNumber":329,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":331,"author":{"gitID":"iNekox3"},"content":"    //@@author"},{"lineNumber":332,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":333,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":335,"author":{"gitID":"-"},"content":"                || (other instanceof ProgressChecker // instanceof handles nulls"},{"lineNumber":336,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((ProgressChecker) other).persons)"},{"lineNumber":337,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((ProgressChecker) other).tags));"},{"lineNumber":338,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":341,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":342,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":343,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":344,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":345,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":56,"Livian1107":33,"iNekox3":43,"-":213}},{"path":"src/main/java/seedu/progresschecker/model/exercise/Exercise.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":" * Represents an Exercise in the ProgressChecker."},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":"public class Exercise {"},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":"    private final QuestionIndex questionIndex;"},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"    private final QuestionType questionType;"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"    private final Question question;"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"    private final StudentAnswer studentAnswer;"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"    private final ModelAnswer modelAnswer;"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"     * Every field must be present and not null."},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    public Exercise(QuestionIndex questionIndex, QuestionType questionType, Question question,"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"                    StudentAnswer studentAnswer, ModelAnswer modelAnswer) {"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"        requireAllNonNull(questionIndex, questionType, question);"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"        this.questionIndex \u003d questionIndex;"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"        this.questionType \u003d questionType;"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"        this.question \u003d question;"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"        this.studentAnswer \u003d studentAnswer;"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"        this.modelAnswer \u003d modelAnswer;"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"    public QuestionIndex getQuestionIndex() {"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"        return questionIndex;"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"    public QuestionType getQuestionType() {"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"        return questionType;"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":"    public Question getQuestion() {"},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"        return question;"},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":"    public StudentAnswer getStudentAnswer() {"},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"        return studentAnswer;"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":"    public ModelAnswer getModelAnswer() {"},{"lineNumber":48,"author":{"gitID":"iNekox3"},"content":"        return modelAnswer;"},{"lineNumber":49,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":51,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"iNekox3"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitID":"iNekox3"},"content":"        return \"Q\" + questionIndex + \" \" + question + \"\\n\\n\""},{"lineNumber":54,"author":{"gitID":"iNekox3"},"content":"                + \"Your Answer: \" + studentAnswer + \"\\n\\n\""},{"lineNumber":55,"author":{"gitID":"iNekox3"},"content":"                + \"Suggested Answer: \" + modelAnswer;"},{"lineNumber":56,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":53,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/exercise/exceptions/ExerciseNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":4,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"iNekox3"},"content":" * Signals that the operation is unable to find the specified exercise."},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":"public class ExerciseNotFoundException extends Exception {}"}],"authorContributionMap":{"iNekox3":5,"-":2}},{"path":"src/main/java/seedu/progresschecker/model/exercise/Question.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":" * Represents an Exercise\u0027s question in the ProgressChecker."},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":"public class Question {"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":"    public final String value;"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"     * Constructs a {@code Question}."},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"     * @param question A question of any word and character."},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    public Question(String question) {"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(question);"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"        this.value \u003d question;"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"        return value;"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":23,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/exercise/StudentAnswer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":" * Represents an Exercise\u0027s student answer in the ProgressChecker."},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":"public class StudentAnswer {"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":"    public final String value;"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"     * Constructs a {@code StudentAnswer}."},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"     * @param answer An answer of any word and character."},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    public StudentAnswer(String answer) {"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(answer);"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"        this.value \u003d answer;"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"        return value;"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":23,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/exercise/ModelAnswer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":" * Represents an Exercise\u0027s model answer in the ProgressChecker."},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":"public class ModelAnswer {"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":"    public final String value;"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"     * Constructs a {@code ModelAnswer}."},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"     * @param answer An answer of any word and character."},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    public ModelAnswer(String answer) {"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(answer);"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"        this.value \u003d answer;"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"        return value;"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":23,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/exercise/QuestionType.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":" * Represents an Exercise\u0027s question type in the ProgressChecker."},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":"public class QuestionType {"},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":"    public static final String MESSAGE_TYPE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"            \"Type can only be \u0027text\u0027 or \u0027choice\u0027\";"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"    public static final String TYPE_VALIDATION_REGEX \u003d \"text|choice\";"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"     * Constructs a {@code QuestionType}."},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"     * @param type A valid type."},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"    public QuestionType(String type) {"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(type);"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"        checkArgument(isValidType(type), MESSAGE_TYPE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"        this.value \u003d type;"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"     * Returns true if a given string is a valid type."},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"    public static boolean isValidType(String test) {"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"        return test.matches(TYPE_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"        return value;"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":34,"-":5}},{"path":"src/main/java/seedu/progresschecker/model/issues/Title.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":" * Represents an issue\u0027s name and description"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"public class Title {"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"            \"Title of the issue can be anything, but should not be blank space\";"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"     * The first character of the title must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    public static final String TITLE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public final String fullMessage;"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs a {@code Title}."},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"     * @param title A valid description."},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    public Title(String title) {"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(title);"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        checkArgument(isValidTitle(title), MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        this.fullMessage \u003d title;"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"     * Returns true if a given string is a issue title."},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"    public static boolean isValidTitle(String test) {"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        return test.matches(TITLE_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        return fullMessage;"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof seedu.progresschecker.model.issues.Title // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.fullMessage.equals(((Title) other).fullMessage)); // state check"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        return fullMessage.hashCode();"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":54,"-":5}},{"path":"src/main/java/seedu/progresschecker/model/exercise/UniqueExerciseList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.DuplicateExerciseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.ExerciseNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":" * A list of exercises that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":" *"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":" *"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":" * @see Exercise#equals(Object)"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"public class UniqueExerciseList implements Iterable\u003cExercise\u003e {"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"    private final ObservableList\u003cExercise\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"     * Returns true if the list contains an equivalent exercise as the given argument."},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"    public boolean contains(Exercise toCheck) {"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(toCheck);"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":"     * Adds an exercise to the list."},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"     * @throws DuplicateExerciseException if the exercise to add is a duplicate of an existing exercise in the list."},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"    public void add(Exercise toAdd) throws DuplicateExerciseException {"},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"            throw new DuplicateExerciseException();"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":50,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"iNekox3"},"content":"     * Replaces the exercise {@code target} in the list with {@code editedExercise}."},{"lineNumber":52,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"iNekox3"},"content":"     * @throws ExerciseNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"iNekox3"},"content":"    public void setExercise(Exercise target, Exercise editedExercise)"},{"lineNumber":56,"author":{"gitID":"iNekox3"},"content":"            throws ExerciseNotFoundException {"},{"lineNumber":57,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(editedExercise);"},{"lineNumber":58,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":59,"author":{"gitID":"iNekox3"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"iNekox3"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"iNekox3"},"content":"            throw new ExerciseNotFoundException();"},{"lineNumber":62,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":64,"author":{"gitID":"iNekox3"},"content":"        internalList.set(index, editedExercise);"},{"lineNumber":65,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":67,"author":{"gitID":"iNekox3"},"content":"    public void setExercises(UniqueExerciseList replacement) {"},{"lineNumber":68,"author":{"gitID":"iNekox3"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":69,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":71,"author":{"gitID":"iNekox3"},"content":"    public void setExercises(List\u003cExercise\u003e exercises) throws DuplicateExerciseException {"},{"lineNumber":72,"author":{"gitID":"iNekox3"},"content":"        requireAllNonNull(exercises);"},{"lineNumber":73,"author":{"gitID":"iNekox3"},"content":"        final UniqueExerciseList replacement \u003d new UniqueExerciseList();"},{"lineNumber":74,"author":{"gitID":"iNekox3"},"content":"        for (final Exercise exercise : exercises) {"},{"lineNumber":75,"author":{"gitID":"iNekox3"},"content":"            replacement.add(exercise);"},{"lineNumber":76,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"iNekox3"},"content":"        setExercises(replacement);"},{"lineNumber":78,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":80,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"iNekox3"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":82,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"iNekox3"},"content":"    public ObservableList\u003cExercise\u003e asObservableList() {"},{"lineNumber":84,"author":{"gitID":"iNekox3"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":85,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":87,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"iNekox3"},"content":"    public Iterator\u003cExercise\u003e iterator() {"},{"lineNumber":89,"author":{"gitID":"iNekox3"},"content":"        return internalList.iterator();"},{"lineNumber":90,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":92,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"iNekox3"},"content":"    public boolean equals(Object other) {"},{"lineNumber":94,"author":{"gitID":"iNekox3"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":95,"author":{"gitID":"iNekox3"},"content":"                || (other instanceof UniqueExerciseList // instanceof handles nulls"},{"lineNumber":96,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueExerciseList) other).internalList));"},{"lineNumber":97,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":83,"-":15}},{"path":"src/main/java/seedu/progresschecker/model/issues/Body.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":" * Represents an issue\u0027s name and description"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"public class Body {"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"    public final String fullBody;"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs a {@code Body}."},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"     * @param body A valid issue description."},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    public Body(String body) {"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(body);"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"        this.fullBody \u003d body;"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        return fullBody;"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof seedu.progresschecker.model.issues.Body // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.fullBody.equals(((Body) other).fullBody)); // state check"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        return fullBody.hashCode();"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":36,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/issues/Issue.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":" * Represents an Issue."},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"public class Issue {"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    private final Title title;"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    private final List\u003cAssignees\u003e assigneesList;"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    private final Milestone milestone;"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    private final Body body;"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    private final List\u003cLabels\u003e labelsList;"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"     * Every field must be present and not null."},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    public Issue(Title title, List\u003cAssignees\u003e assigneesList, Milestone milestone, Body body, List\u003cLabels\u003e labelsList) {"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        requireAllNonNull(title);"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"        this.title \u003d title;"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"        this.assigneesList \u003d assigneesList;"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        this.milestone \u003d milestone;"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        this.body \u003d body;"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        this.labelsList \u003d labelsList;"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    public Title getTitle() {"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"        return title;"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"    public List\u003cAssignees\u003e getAssignees() {"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        return assigneesList;"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    public Milestone getMilestone() {"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"        return milestone;"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    public Body getBody() {"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        return body;"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    public List\u003cLabels\u003e getLabelsList() {"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"        return labelsList;"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"            return true;"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        if (!(other instanceof seedu.progresschecker.model.issues.Issue)) {"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"            return false;"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"        seedu.progresschecker.model.issues.Issue otherIssue \u003d (seedu.progresschecker.model.issues.Issue) other;"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"        return otherIssue.getTitle().equals(this.getTitle())"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 otherIssue.getAssignees().equals(this.getAssignees())"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 otherIssue.getMilestone().equals(this.getMilestone())"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 otherIssue.getBody().equals(this.getBody())"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 otherIssue.getLabelsList().equals(this.getLabelsList());"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"        return Objects.hash(title, assigneesList, milestone, body, labelsList);"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"        builder.append(getTitle())"},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"                .append(\" Assignees: \")"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"                .append(getAssignees())"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"                .append(\" Milestone: \")"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"                .append(getMilestone())"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"                .append(\" Body: \")"},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"                .append(getBody())"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"                .append(\" Labels: \")"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"                .append(getLabelsList());"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"        return builder.toString();"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":86,"-":7}},{"path":"src/main/java/seedu/progresschecker/model/task/MyTaskList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.Task;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.TaskList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.TaskLists;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.Tasks;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.apisetup.ConnectTasksApi;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":" * Include customized methods (based on Google Tasks API) to manipulate task lists."},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"public class MyTaskList {"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public static final String AUTHORIZE_FAILURE \u003d \"Failed to authorize tasks api client credentials\";"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    public static final String ADD_FAILURE \u003d \"Failed to add new task list to account\";"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public static final String LOAD_FAILURE \u003d \"Failed to load this task list (might be wrong title)\";"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"     * Creates a new task list with title {@code String} and adds to the current list of task lists"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"     * @param listTitle title of the task list we intend to create"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"    public static void createTaskList(String listTitle) throws CommandException {"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"            service.tasklists().insert("},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"                    new TaskList().setTitle(listTitle)"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"            ).execute();"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(ADD_FAILURE);"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"     * Finds the task list with title {@code String} from the current list of task lists"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"     * @param listTitle title of the task list we look for"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"     * @return the List instances containing all tasks in the specified task list"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"    public static List\u003cTask\u003e searchTaskList(String listTitle) throws CommandException {"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"        List\u003cTask\u003e list \u003d null;"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"            TaskLists taskLists \u003d service.tasklists().list().execute();"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"            TaskList taskList \u003d taskLists.getItems().stream()"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"                    .filter(t -\u003e t.getTitle().equals(listTitle))"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"                    .findFirst()"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":"                    .orElse(null);"},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"            String id \u003d taskList.getId();"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"            Tasks tasks \u003d service.tasks().list(id).execute();"},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"            list \u003d tasks.getItems();"},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"        return list;"},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"EdwardKSG"},"content":"     * Finds the task list with ID {@code String} from the current list of task lists"},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId title of the task list we look for"},{"lineNumber":89,"author":{"gitID":"EdwardKSG"},"content":"     * @return the List instances containing all tasks in the specified task list"},{"lineNumber":90,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"EdwardKSG"},"content":"    public static List\u003cTask\u003e searchTaskListById(String listId) throws CommandException {"},{"lineNumber":92,"author":{"gitID":"EdwardKSG"},"content":"        List\u003cTask\u003e list \u003d null;"},{"lineNumber":93,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":94,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":95,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":96,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":98,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":103,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":104,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":106,"author":{"gitID":"EdwardKSG"},"content":"            Tasks tasks \u003d service.tasks().list(listId).execute();"},{"lineNumber":107,"author":{"gitID":"EdwardKSG"},"content":"            list \u003d tasks.getItems();"},{"lineNumber":108,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":109,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":110,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":112,"author":{"gitID":"EdwardKSG"},"content":"        return list;"},{"lineNumber":113,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":115,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"EdwardKSG"},"content":"     * Changes the name of task list with id {@code String} to {@code String}"},{"lineNumber":117,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":118,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId identifier of the target task list whose name will be changed"},{"lineNumber":119,"author":{"gitID":"EdwardKSG"},"content":"     * @param listTitle title of the task list we look for"},{"lineNumber":120,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"EdwardKSG"},"content":"    public static void setTaskListTitle(String listId, String listTitle) throws CommandException {"},{"lineNumber":122,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":123,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":124,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":126,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":127,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":128,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":130,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":131,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":132,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":133,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":134,"author":{"gitID":"EdwardKSG"},"content":"            TaskList taskList \u003d service.tasklists().get(listId).execute();"},{"lineNumber":135,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":136,"author":{"gitID":"EdwardKSG"},"content":"            taskList.setTitle(listTitle);"},{"lineNumber":137,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":138,"author":{"gitID":"EdwardKSG"},"content":"            TaskList result \u003d service.tasklists().update("},{"lineNumber":139,"author":{"gitID":"EdwardKSG"},"content":"                    taskList.getId(),"},{"lineNumber":140,"author":{"gitID":"EdwardKSG"},"content":"                    taskList"},{"lineNumber":141,"author":{"gitID":"EdwardKSG"},"content":"            ).execute();"},{"lineNumber":142,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":143,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":144,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":145,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":148,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"EdwardKSG"},"content":"     * Copies tasks in the task list with id {@code String} to the task list with title {@code String}"},{"lineNumber":150,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":151,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId identifier of the target task list whose name will be changed"},{"lineNumber":152,"author":{"gitID":"EdwardKSG"},"content":"     * @param listTitle title of the task list we look for"},{"lineNumber":153,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"EdwardKSG"},"content":"    public static void copyTaskList(String listTitle, String listId) throws CommandException {"},{"lineNumber":155,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":156,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":157,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":158,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":159,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":160,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":161,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":163,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":164,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":165,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":166,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":167,"author":{"gitID":"EdwardKSG"},"content":"            TaskLists taskLists \u003d service.tasklists().list().execute();"},{"lineNumber":168,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":169,"author":{"gitID":"EdwardKSG"},"content":"            Tasks baseTasks \u003d service.tasks().list(listId).execute();"},{"lineNumber":170,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":171,"author":{"gitID":"EdwardKSG"},"content":"            TaskList targetTaskList \u003d taskLists.getItems().stream()"},{"lineNumber":172,"author":{"gitID":"EdwardKSG"},"content":"                    .filter(t -\u003e t.getTitle().equals(listTitle))"},{"lineNumber":173,"author":{"gitID":"EdwardKSG"},"content":"                    .findFirst()"},{"lineNumber":174,"author":{"gitID":"EdwardKSG"},"content":"                    .orElse(null);"},{"lineNumber":175,"author":{"gitID":"EdwardKSG"},"content":"            String id \u003d targetTaskList.getId();"},{"lineNumber":176,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":177,"author":{"gitID":"EdwardKSG"},"content":"            for (Task task : baseTasks.getItems()) {"},{"lineNumber":178,"author":{"gitID":"EdwardKSG"},"content":"                Task t \u003d new Task();"},{"lineNumber":179,"author":{"gitID":"EdwardKSG"},"content":"                t.setTitle(task.getTitle());"},{"lineNumber":180,"author":{"gitID":"EdwardKSG"},"content":"                t.setStatus(task.getStatus());"},{"lineNumber":181,"author":{"gitID":"EdwardKSG"},"content":"                t.setDue(task.getDue());"},{"lineNumber":182,"author":{"gitID":"EdwardKSG"},"content":"                t.setNotes(task.getNotes());"},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":"                service.tasks().insert(id, t).execute();"},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":188,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":189,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":192,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"EdwardKSG"},"content":"     * Removes all tasks in the task list with id {@code String}"},{"lineNumber":194,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":195,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId identifier of the target task list whose content will be removed"},{"lineNumber":196,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"EdwardKSG"},"content":"    public static void clearTaskList(String listId) throws CommandException {"},{"lineNumber":198,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":199,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":200,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":201,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":202,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":203,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":204,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":206,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":207,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":208,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":209,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":210,"author":{"gitID":"EdwardKSG"},"content":"            Tasks tasks \u003d service.tasks().list(listId).execute();"},{"lineNumber":211,"author":{"gitID":"EdwardKSG"},"content":"            for (Task task : tasks.getItems()) {"},{"lineNumber":212,"author":{"gitID":"EdwardKSG"},"content":"                service.tasks().delete(listId, task.getId()).execute();"},{"lineNumber":213,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":214,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":215,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":216,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":217,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":206,"-":13}},{"path":"src/main/java/seedu/progresschecker/model/issues/MilestoneMap.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":" * Initialises and returns a Hashmap of milestones"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"public final class MilestoneMap {"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"    private static HashMap\u003cMilestone, Integer\u003e milestoneMap;"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    /* Milestone Mappings */"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    private static final Milestone MILESTONE_ONE \u003d new Milestone(\"v1.1\");"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    private static final Milestone MILESTONE_TWO \u003d new Milestone(\"v1.2\");"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    private static final Milestone MILESTONE_THREE \u003d new Milestone(\"v1.3\");"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    private static final Milestone MILESTONE_FOUR \u003d new Milestone(\"v1.4\");"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    private static final Milestone MILESTONE_FIVE_RC \u003d new Milestone(\"v1.5rc\");"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    private static final Milestone MILESTONE_FIVE \u003d new Milestone(\"v1.5\");"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"     * Returns a hashmap of milestones"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    public static HashMap\u003cMilestone, Integer\u003e getMilestoneMap() {"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        milestoneMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"        createMilestoneHashMap();"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"        return milestoneMap;"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"     * creates a map with the milestone values"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    private static void createMilestoneHashMap() {"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"        //Adding values to the map"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"        milestoneMap.put(MILESTONE_ONE, 1);"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"        milestoneMap.put(MILESTONE_TWO, 2);"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        milestoneMap.put(MILESTONE_THREE, 3);"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        milestoneMap.put(MILESTONE_FOUR, 4);"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        milestoneMap.put(MILESTONE_FIVE_RC, 5);"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"        milestoneMap.put(MILESTONE_FIVE, 6);"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":39,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.model.ProgressCheckerChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.ExerciseNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.PhotoPath;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.exceptions.DuplicatePhotoException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the ProgressChecker data."},{"lineNumber":30,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final ProgressChecker progressChecker;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cExercise\u003e filteredExercises;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given progressChecker and userPrefs."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyProgressChecker progressChecker, UserPrefs userPrefs) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        requireAllNonNull(progressChecker, userPrefs);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with ProgressChecker: \" + progressChecker + \" and user prefs \" + userPrefs);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.progressChecker \u003d new ProgressChecker(progressChecker);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.progressChecker.getPersonList());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        filteredExercises \u003d new FilteredList\u003c\u003e(this.progressChecker.getExerciseList());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this(new ProgressChecker(), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyProgressChecker newData) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        progressChecker.resetData(newData);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public ReadOnlyProgressChecker getProgressChecker() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return progressChecker;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void indicateProgressCheckerChanged() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        raise(new ProgressCheckerChangedEvent(progressChecker));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        progressChecker.removePerson(target);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        progressChecker.addPerson(person);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"    //@author adityaa1998"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public synchronized void loginGithub(GitDetails gitdetails) throws IOException, CommandException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        progressChecker.loginGithub(gitdetails);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"    public synchronized void closeIssueOnGithub(Index index) throws IOException, CommandException {"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"        progressChecker.closeIssueOnGithub(index);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public synchronized void createIssueOnGitHub(Issue issue) throws IOException, CommandException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        progressChecker.createIssueOnGitHub(issue);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"content":"    //@@author"},{"lineNumber":104,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public synchronized void sort() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        progressChecker.sort();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"AdityaA1998"},"content":"    //@@author adityaa1998"},{"lineNumber":112,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"AdityaA1998"},"content":"    public synchronized void reopenIssueOnGithub(Index index) throws IOException, CommandException {"},{"lineNumber":114,"author":{"gitID":"AdityaA1998"},"content":"        progressChecker.reopenIssueOnGithub(index);"},{"lineNumber":115,"author":{"gitID":"AdityaA1998"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":116,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"AdityaA1998"},"content":"    //@@author"},{"lineNumber":118,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        progressChecker.updatePerson(target, editedPerson);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":129,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"iNekox3"},"content":"    public void updateExercise(Exercise target, Exercise editedExercise)"},{"lineNumber":131,"author":{"gitID":"iNekox3"},"content":"            throws ExerciseNotFoundException {"},{"lineNumber":132,"author":{"gitID":"iNekox3"},"content":"        requireAllNonNull(target, editedExercise);"},{"lineNumber":133,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":134,"author":{"gitID":"iNekox3"},"content":"        progressChecker.updateExercise(target, editedExercise);"},{"lineNumber":135,"author":{"gitID":"iNekox3"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":136,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":138,"author":{"gitID":"AdityaA1998"},"content":"    //@@author adityaa1998"},{"lineNumber":139,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"AdityaA1998"},"content":"    public void updateIssue(Index index, Issue editedIssue) throws IOException {"},{"lineNumber":141,"author":{"gitID":"AdityaA1998"},"content":"        requireAllNonNull(index, editedIssue);"},{"lineNumber":142,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":143,"author":{"gitID":"AdityaA1998"},"content":"        progressChecker.updateIssue(index, editedIssue);"},{"lineNumber":144,"author":{"gitID":"AdityaA1998"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":145,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"AdityaA1998"},"content":"    //@@author"},{"lineNumber":147,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code progressChecker}"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"Livian1107"},"content":"    //@@author Livian1107"},{"lineNumber":166,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":167,"author":{"gitID":"Livian1107"},"content":"    public void uploadPhoto(Person target, String path)"},{"lineNumber":168,"author":{"gitID":"Livian1107"},"content":"            throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":169,"author":{"gitID":"Livian1107"},"content":"        progressChecker.uploadPhoto(target, path);"},{"lineNumber":170,"author":{"gitID":"Livian1107"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":171,"author":{"gitID":"Livian1107"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":172,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":174,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":175,"author":{"gitID":"Livian1107"},"content":"    public void addPhoto(PhotoPath photoPath) throws DuplicatePhotoException {"},{"lineNumber":176,"author":{"gitID":"Livian1107"},"content":"        progressChecker.addPhotoPath(photoPath);"},{"lineNumber":177,"author":{"gitID":"Livian1107"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":178,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"Livian1107"},"content":"    //@@author"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        return progressChecker.equals(other.progressChecker)"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":200,"author":{"gitID":"iNekox3"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Exercise List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":201,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":202,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"iNekox3"},"content":"     * Returns an unmodifiable view of the list of {@code Exercise} backed by the internal list of"},{"lineNumber":204,"author":{"gitID":"iNekox3"},"content":"     * {@code progressChecker}"},{"lineNumber":205,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":207,"author":{"gitID":"iNekox3"},"content":"    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"},{"lineNumber":208,"author":{"gitID":"iNekox3"},"content":"        return FXCollections.unmodifiableObservableList(filteredExercises);"},{"lineNumber":209,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":211,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":212,"author":{"gitID":"iNekox3"},"content":"    public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"},{"lineNumber":213,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(predicate);"},{"lineNumber":214,"author":{"gitID":"iNekox3"},"content":"        filteredExercises.setPredicate(predicate);"},{"lineNumber":215,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":217,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"null":1,"AdityaA1998":27,"Livian1107":15,"iNekox3":29,"-":145}},{"path":"src/main/java/seedu/progresschecker/model/issues/Labels.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":" * Represents all the Labels of an issue"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"public class Labels {"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"    public final String fullLabels;"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs a {@code Labels}."},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"     * @param labels valid labels."},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    public Labels(String labels) {"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(labels);"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"        this.fullLabels \u003d labels;"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        return fullLabels;"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof seedu.progresschecker.model.issues.Labels // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.fullLabels.equals(((Labels) other).fullLabels)); // state check"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        return fullLabels.hashCode();"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":36,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/issues/Assignees.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":" * Represents all the assignees to an issue"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"public class Assignees {"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_ASSIGNEES_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"            \"Assignees of the issue can be anything, but should not be blank space\";"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    /*"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"     * The first character of the Assignee must not be a whitespace,"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    public final String fullAssignees;"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs a {@code Assignees}."},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"     * @param assignees A valid assignees."},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    public Assignees(String assignees) {"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(assignees);"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        this.fullAssignees \u003d assignees;"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        return fullAssignees;"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof seedu.progresschecker.model.issues.Assignees // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.fullAssignees.equals(((Assignees) other).fullAssignees)); // state check"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"        return fullAssignees.hashCode();"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":44,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/issues/Milestone.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":" * Represents a milestone for an issue"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"public class Milestone {"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_MILESTONE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"            \"Milestone of the issue can be anything, but should not be blank space\";"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"     * The first character of the title must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MILESTONE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public final String fullMilestone;"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs a {@code Milestone}."},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"     * @param milestone A valid milestone."},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    public Milestone(String milestone) {"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(milestone);"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        checkArgument(isValidMilestone(milestone), MESSAGE_MILESTONE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        this.fullMilestone \u003d milestone;"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"     * Returns true if a given string is a issue title."},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"    public static boolean isValidMilestone(String test) {"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        return test.matches(MILESTONE_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        return fullMilestone;"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof seedu.progresschecker.model.issues.Milestone // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.fullMilestone.equals(((Milestone) other).fullMilestone)); // state check"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        return fullMilestone.hashCode();"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":54,"-":5}},{"path":"src/main/java/seedu/progresschecker/model/photo/exceptions/PhotoNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.photo.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":4,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"Livian1107"},"content":" * Signals that the operation is unable to find the specified photo."},{"lineNumber":6,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Livian1107"},"content":"public class PhotoNotFoundException extends Exception {}"}],"authorContributionMap":{"Livian1107":5,"-":2}},{"path":"src/main/java/seedu/progresschecker/model/task/MyTask.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.text.ParseException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.Task;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.TaskList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.TaskLists;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.Tasks;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.apisetup.ConnectTasksApi;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":" * Include customized methods (based on Google Tasks API) to manipulate tasks."},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"public class MyTask {"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    public static final String AUTHORIZE_FAILURE \u003d \"Failed to authorize tasks api client credentials\";"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    public static final String LOAD_FAILURE \u003d \"Failed to load this task list\";"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"    public static final String DATE_FORMAT \u003d \"MM/dd/yyyy HH:mm\";"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMPLETED \u003d \"completed\";"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    public static final String NEEDS_ACTION \u003d \"needsAction\";"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"     * Finds the task with title {@code String} in the tasklist with title {@code String}"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"     * @param taskTitle title of the task we look for"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"     * @param listTitle the title of the list to which the task belongs"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"     * @return the Task instances"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public static Task searchTask(String taskTitle, String listTitle) throws CommandException {"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"        Task task \u003d null;"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"            TaskLists taskLists \u003d service.tasklists().list().execute();"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"            TaskList taskList \u003d taskLists.getItems().stream()"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"                    .filter(t -\u003e t.getTitle().equals(listTitle))"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"                    .findFirst()"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"                    .orElse(null);"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"            Tasks tasks \u003d service.tasks().list(taskList.getId()).execute();"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"            task \u003d tasks.getItems().stream()"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"                    .filter(t -\u003e t.getTitle().equals(taskTitle))"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"                    .findFirst()"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"                    .orElse(null);"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"        return task;"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"     * Creates a task with title {@code String} to the tasklist with title {@code String}"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":"     * @param taskTitle title of the task we want to create"},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId the identifier of the list to which the task will be added"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"     * @param notes description or relevant URL link to this task"},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"     * @param due the date and time of the deadline, in format \"MM/dd/yyyy HH:mm\""},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"    public static void createTask(String taskTitle, String listId, String notes, String due)"},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"            throws CommandException {"},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":86,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":89,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":90,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":91,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"EdwardKSG"},"content":"            TaskLists taskLists \u003d service.tasklists().list().execute();"},{"lineNumber":93,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":94,"author":{"gitID":"EdwardKSG"},"content":"            Task task \u003d service.tasks().insert("},{"lineNumber":95,"author":{"gitID":"EdwardKSG"},"content":"                    listId,"},{"lineNumber":96,"author":{"gitID":"EdwardKSG"},"content":"                    new Task().setTitle(taskTitle)"},{"lineNumber":97,"author":{"gitID":"EdwardKSG"},"content":"                              .setDue(getDate(due))"},{"lineNumber":98,"author":{"gitID":"EdwardKSG"},"content":"                              .setNotes(notes)"},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":"                              .setStatus(NEEDS_ACTION)"},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":"            ).execute();"},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":103,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":104,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":106,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":108,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"EdwardKSG"},"content":"     * Converts a string in format \"MM/dd/yyyy HH:mm\" to a DateTime object"},{"lineNumber":110,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"EdwardKSG"},"content":"     * @param s string in format \"MM/dd/yyyy HH:mm\", representing a date"},{"lineNumber":112,"author":{"gitID":"EdwardKSG"},"content":"     * @return the DateTime instances, or null if encountered error when parsing"},{"lineNumber":113,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"EdwardKSG"},"content":"    public static DateTime getDate(String s) {"},{"lineNumber":115,"author":{"gitID":"EdwardKSG"},"content":"        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(DATE_FORMAT);"},{"lineNumber":116,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"EdwardKSG"},"content":"            Date date \u003d simpleDateFormat.parse(s);"},{"lineNumber":118,"author":{"gitID":"EdwardKSG"},"content":"            return new DateTime(date);"},{"lineNumber":119,"author":{"gitID":"EdwardKSG"},"content":"        } catch (ParseException ex) {"},{"lineNumber":120,"author":{"gitID":"EdwardKSG"},"content":"            return null;"},{"lineNumber":121,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":124,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"EdwardKSG"},"content":"     * Marks the task with title {@code String} in the tasklist with ID {@code String} as completed"},{"lineNumber":126,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":127,"author":{"gitID":"EdwardKSG"},"content":"     * @param index title of the task we look for"},{"lineNumber":128,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId the identifier of the list to which the task belongs"},{"lineNumber":129,"author":{"gitID":"EdwardKSG"},"content":"     * @return title the title of the task with index {@code int}"},{"lineNumber":130,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"EdwardKSG"},"content":"    public static String completeTask(int index, String listId) throws CommandException {"},{"lineNumber":132,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":133,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":134,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":136,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":137,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":138,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":140,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":141,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":142,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":143,"author":{"gitID":"EdwardKSG"},"content":"            Tasks tasks \u003d service.tasks().list(listId).execute();"},{"lineNumber":144,"author":{"gitID":"EdwardKSG"},"content":"            List\u003cTask\u003e list \u003d tasks.getItems();"},{"lineNumber":145,"author":{"gitID":"EdwardKSG"},"content":"            Task task \u003d list.get(index - 1);"},{"lineNumber":146,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":147,"author":{"gitID":"EdwardKSG"},"content":"            task.setStatus(COMPLETED);"},{"lineNumber":148,"author":{"gitID":"EdwardKSG"},"content":"            task \u003d service.tasks().update("},{"lineNumber":149,"author":{"gitID":"EdwardKSG"},"content":"                    listId,"},{"lineNumber":150,"author":{"gitID":"EdwardKSG"},"content":"                    task.getId(),"},{"lineNumber":151,"author":{"gitID":"EdwardKSG"},"content":"                    task"},{"lineNumber":152,"author":{"gitID":"EdwardKSG"},"content":"            ).execute();"},{"lineNumber":153,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":154,"author":{"gitID":"EdwardKSG"},"content":"            return task.getTitle();"},{"lineNumber":155,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":156,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":157,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":158,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":161,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"EdwardKSG"},"content":"     * Marks the task with title {@code String} in the tasklist with ID {@code String} as incompleted"},{"lineNumber":163,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":164,"author":{"gitID":"EdwardKSG"},"content":"     * @param index title of the task we look for"},{"lineNumber":165,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId the identifier of the list to which the task belongs"},{"lineNumber":166,"author":{"gitID":"EdwardKSG"},"content":"     * @return title the title of the task with index {@code int}"},{"lineNumber":167,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"EdwardKSG"},"content":"    public static String undoTask(int index, String listId) throws CommandException {"},{"lineNumber":169,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":170,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":171,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":173,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":174,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":175,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":177,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":178,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":179,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":180,"author":{"gitID":"EdwardKSG"},"content":"            Tasks tasks \u003d service.tasks().list(listId).execute();"},{"lineNumber":181,"author":{"gitID":"EdwardKSG"},"content":"            List\u003cTask\u003e list \u003d tasks.getItems();"},{"lineNumber":182,"author":{"gitID":"EdwardKSG"},"content":"            Task task \u003d list.get(index - 1);"},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":"            task.setCompleted(null);"},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":"            task.setStatus(NEEDS_ACTION);"},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":"            task \u003d service.tasks().update("},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":"                    listId,"},{"lineNumber":188,"author":{"gitID":"EdwardKSG"},"content":"                    task.getId(),"},{"lineNumber":189,"author":{"gitID":"EdwardKSG"},"content":"                    task"},{"lineNumber":190,"author":{"gitID":"EdwardKSG"},"content":"            ).execute();"},{"lineNumber":191,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":192,"author":{"gitID":"EdwardKSG"},"content":"            return task.getTitle();"},{"lineNumber":193,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":194,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":195,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":196,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":181,"-":17}},{"path":"src/main/java/seedu/progresschecker/model/photo/exceptions/DuplicatePhotoException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.photo.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":5,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Livian1107"},"content":" * Signals that the operation will result in duplicate PhotoPath objects."},{"lineNumber":7,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":8,"author":{"gitID":"Livian1107"},"content":"public class DuplicatePhotoException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"Livian1107"},"content":"    public DuplicatePhotoException() {"},{"lineNumber":10,"author":{"gitID":"Livian1107"},"content":"        super(\"Operation would result in duplicate photos\");"},{"lineNumber":11,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":9,"-":3}},{"path":"src/main/java/seedu/progresschecker/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.ExerciseNotFoundException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.PhotoPath;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.exceptions.DuplicatePhotoException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    Predicate\u003cExercise\u003e PREDICATE_SHOW_ALL_EXERCISES \u003d unused -\u003e true;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyProgressChecker newData);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Returns the ProgressChecker */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    ReadOnlyProgressChecker getProgressChecker();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /** Sorts the persons in ProgressChecker according to their names in alphabetical order */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void sort();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"    //@@author adityaa1998"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    /** authenticates git using password */"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    void loginGithub(GitDetails gitdetails) throws IOException, CommandException;"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"    /** creates an issue on github */"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    void createIssueOnGitHub(Issue issue) throws IOException, CommandException;"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"    /** reopen issue on github */"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"    void reopenIssueOnGithub(Index index) throws IOException, CommandException;"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"    /** closes an issue issue on github */"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"    void closeIssueOnGithub(Index index) throws IOException, CommandException;"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"     * Replaces the fields in Issue {@code index} with {@code editedIssue}."},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException if while updating the issue there is some problem in authentication"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"    void updateIssue(Index index, Issue editedIssue) throws IOException;"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"    //@@author"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":86,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"iNekox3"},"content":"     * Replaces the given exercise {@code target} with {@code editedExercise}."},{"lineNumber":88,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":89,"author":{"gitID":"iNekox3"},"content":"     * @throws ExerciseNotFoundException if {@code target} could not be found in the list."},{"lineNumber":90,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"iNekox3"},"content":"    void updateExercise(Exercise target, Exercise editedExercise)"},{"lineNumber":92,"author":{"gitID":"iNekox3"},"content":"            throws ExerciseNotFoundException;"},{"lineNumber":93,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":94,"author":{"gitID":"iNekox3"},"content":"    /** Returns an unmodifiable view of the filtered exercise list */"},{"lineNumber":95,"author":{"gitID":"iNekox3"},"content":"    ObservableList\u003cExercise\u003e getFilteredExerciseList();"},{"lineNumber":96,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":97,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"iNekox3"},"content":"     * Updates the filter of the filtered exercise list to filter by the given {@code predicate}."},{"lineNumber":99,"author":{"gitID":"iNekox3"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":100,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"iNekox3"},"content":"    void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate);"},{"lineNumber":102,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":103,"author":{"gitID":"iNekox3"},"content":"    //@@author"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /** Uploads the given photo with given path */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    void uploadPhoto(Person target, String path)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throws PersonNotFoundException, DuplicatePersonException;"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /** Adds a new uploaded photo path */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    void addPhoto(PhotoPath photoPath) throws DuplicatePhotoException;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":23,"iNekox3":19,"-":68}},{"path":"src/main/java/seedu/progresschecker/model/credentials/Passcode.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.credentials;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":" * Represents a github passcode"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"public class Passcode {"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"    public final String passcode;"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs a {@code Passcode}."},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"     * @param passcode A valid assignees."},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    public Passcode(String passcode) {"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(passcode);"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"        this.passcode \u003d passcode;"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        return passcode;"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof seedu.progresschecker.model.credentials.Passcode // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.passcode.equals(((Passcode) other).passcode)); // state check"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        return passcode.hashCode();"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":37,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/photo/PhotoPath.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.photo;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.FileUtil.isUnderFolder;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.FileUtil.isValidImageFile;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":10,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Livian1107"},"content":" * Represents a Path of Photo in ProgressChecker"},{"lineNumber":12,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Livian1107"},"content":"public class PhotoPath {"},{"lineNumber":14,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":15,"author":{"gitID":"Livian1107"},"content":"    public static final String PHOTO_SAVED_PATH \u003d \"src/main/resources/images/contact/\";"},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_PHOTOPATH_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"            \"The path of the profile photo should start with \u0027\" + PHOTO_SAVED_PATH"},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":"                    + \"\u0027. The extensions of the file to upload should be \u0027jpg\u0027, \u0027jpeg\u0027 or \u0027png\u0027.\";"},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":"     * Builds the path of profile photo in the ProgressChecker"},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":"     * Validates the given String of path"},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":"     * @param path is the String of the profile photo path"},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":"     * @trhows IllegalValueException if the String violates the constraints of photo path"},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":"    public PhotoPath(String path) throws IllegalValueException {"},{"lineNumber":29,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(path);"},{"lineNumber":30,"author":{"gitID":"Livian1107"},"content":"        if (isValidPhotoPath(path)) {"},{"lineNumber":31,"author":{"gitID":"Livian1107"},"content":"            this.value \u003d path;"},{"lineNumber":32,"author":{"gitID":"Livian1107"},"content":"        } else {"},{"lineNumber":33,"author":{"gitID":"Livian1107"},"content":"            throw new IllegalValueException(MESSAGE_PHOTOPATH_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":37,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Livian1107"},"content":"     * Validates the given photo path"},{"lineNumber":39,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Livian1107"},"content":"    public boolean isValidPhotoPath (String path) {"},{"lineNumber":41,"author":{"gitID":"Livian1107"},"content":"        if (path.isEmpty()) { //empty path"},{"lineNumber":42,"author":{"gitID":"Livian1107"},"content":"            return true;"},{"lineNumber":43,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Livian1107"},"content":"        boolean isValidImage \u003d isValidImageFile(path);"},{"lineNumber":45,"author":{"gitID":"Livian1107"},"content":"        boolean isUnderFolder \u003d isUnderFolder(path, PHOTO_SAVED_PATH);"},{"lineNumber":46,"author":{"gitID":"Livian1107"},"content":"        return isValidImage \u0026\u0026 isUnderFolder;"},{"lineNumber":47,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":49,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"Livian1107"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"Livian1107"},"content":"        return this.value;"},{"lineNumber":52,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":54,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"Livian1107"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"Livian1107"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"Livian1107"},"content":"                || (other instanceof PhotoPath // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"Livian1107"},"content":"                \u0026\u0026 this.value.equals(((PhotoPath) other).value)); // state check"},{"lineNumber":59,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":61,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"Livian1107"},"content":"    public int hashCode() {"},{"lineNumber":63,"author":{"gitID":"Livian1107"},"content":"        return value.hashCode();"},{"lineNumber":64,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":57,"-":8}},{"path":"src/main/java/seedu/progresschecker/model/issues/GitIssueList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHIssue;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHIssueBuilder;"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"import org.kohsuke.github.GHIssueState;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHMilestone;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHRepository;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHUser;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GitHub;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.CollectionUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":" *"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":" * Supports a minimal set of list operations."},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":" *"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":" * @see Person#equals(Object)"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"public class GitIssueList implements Iterable\u003cIssue\u003e {"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"    private final ObservableList\u003cIssue\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    private String repoName;"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    private String userLogin;"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    private String userAuthentication;"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    private GitHub github;"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"    private GHRepository repository;"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    private GHIssueBuilder issueBuilder;"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    private GHIssue issue;"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    private GHIssue toEdit;"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"     * Initialises github credentials"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"    public void initialiseCredentials(GitDetails gitdetails) throws CommandException {"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"        repoName \u003d gitdetails.getRepository().toString();"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        userLogin \u003d gitdetails.getUsername().toString();"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"        userAuthentication \u003d gitdetails.getPasscode().toString();"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        authoriseGithub();"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"     * Authorises with github"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"    private void authoriseGithub () throws CommandException {"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"            github \u003d GitHub.connectUsingPassword(userLogin, userAuthentication);"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"            if (!github.isCredentialValid()) {"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"                throw new IOException();"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException ie) {"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(\"Enter correct username and password\");"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"            repository \u003d github.getRepository(repoName);"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException ie) {"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(\"Enter correct repository name\");"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"     * Creates an issue on github"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException if there is any problem creating an issue on github;"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"    public void createIssue(Issue toAdd) throws IOException, CommandException {"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"        checkGitAuthentication();"},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"        issueBuilder \u003d repository.createIssue(toAdd.getTitle().toString());"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"        issueBuilder.body(toAdd.getBody().toString());"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cAssignees\u003e assigneesList \u003d toAdd.getAssignees();"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cLabels\u003e labelsList \u003d toAdd.getLabelsList();"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":"        ArrayList\u003cGHUser\u003e listOfUsers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"        ArrayList\u003cString\u003e listOfLabels \u003d new ArrayList\u003c\u003e();"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"        MilestoneMap obj \u003d new MilestoneMap();"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"        HashMap\u003cMilestone, Integer\u003e getMilestone \u003d obj.getMilestoneMap();"},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":"        for (int ct \u003d 0; ct \u003c assigneesList.size(); ct++) {"},{"lineNumber":98,"author":{"gitID":"AdityaA1998"},"content":"            listOfUsers.add(github.getUser(assigneesList.get(ct).toString()));"},{"lineNumber":99,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":101,"author":{"gitID":"AdityaA1998"},"content":"        for (int ct \u003d 0; ct \u003c labelsList.size(); ct++) {"},{"lineNumber":102,"author":{"gitID":"AdityaA1998"},"content":"            listOfLabels.add(labelsList.get(ct).toString());"},{"lineNumber":103,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":105,"author":{"gitID":"AdityaA1998"},"content":"        GHIssue createdIssue \u003d issueBuilder.create();"},{"lineNumber":106,"author":{"gitID":"AdityaA1998"},"content":"        if (toAdd.getMilestone() !\u003d null) {"},{"lineNumber":107,"author":{"gitID":"AdityaA1998"},"content":"            GHMilestone check \u003d repository.getMilestone(getMilestone.get(toAdd.getMilestone()));"},{"lineNumber":108,"author":{"gitID":"AdityaA1998"},"content":"            createdIssue.setMilestone(check);"},{"lineNumber":109,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"AdityaA1998"},"content":"        createdIssue.setAssignees(listOfUsers);"},{"lineNumber":111,"author":{"gitID":"AdityaA1998"},"content":"        createdIssue.setLabels(listOfLabels.toArray(new String[0]));"},{"lineNumber":112,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":114,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"AdityaA1998"},"content":"     * Reopens an issue on github"},{"lineNumber":116,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"AdityaA1998"},"content":"    public void reopenIssue(Index index) throws IOException, CommandException {"},{"lineNumber":118,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":119,"author":{"gitID":"AdityaA1998"},"content":"        checkGitAuthentication();"},{"lineNumber":120,"author":{"gitID":"AdityaA1998"},"content":"        issue \u003d repository.getIssue(index.getOneBased());"},{"lineNumber":121,"author":{"gitID":"AdityaA1998"},"content":"        if (issue.getState() \u003d\u003d GHIssueState.OPEN) {"},{"lineNumber":122,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(\"Issue #\" + index.getOneBased() + \" is already open\");"},{"lineNumber":123,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"AdityaA1998"},"content":"        issue.reopen();"},{"lineNumber":125,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":127,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"AdityaA1998"},"content":"     * Closes an issue on github"},{"lineNumber":129,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"AdityaA1998"},"content":"    public void closeIssue(Index index) throws IOException, CommandException {"},{"lineNumber":131,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":132,"author":{"gitID":"AdityaA1998"},"content":"        checkGitAuthentication();"},{"lineNumber":133,"author":{"gitID":"AdityaA1998"},"content":"        issue \u003d repository.getIssue(index.getOneBased());"},{"lineNumber":134,"author":{"gitID":"AdityaA1998"},"content":"        if (issue.getState() \u003d\u003d GHIssueState.CLOSED) {"},{"lineNumber":135,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(\"Issue #\" + index.getOneBased() + \" is already closed\");"},{"lineNumber":136,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"AdityaA1998"},"content":"        issue.close();"},{"lineNumber":138,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":140,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"AdityaA1998"},"content":"     * Check if the github credentials are authorised"},{"lineNumber":142,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"AdityaA1998"},"content":"    private void checkGitAuthentication() throws CommandException {"},{"lineNumber":144,"author":{"gitID":"AdityaA1998"},"content":"        if (github \u003d\u003d null) {"},{"lineNumber":145,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(\"Github not authenticated. \""},{"lineNumber":146,"author":{"gitID":"AdityaA1998"},"content":"                    + \"Use \u0027gitlogin\u0027 command to first authenticate your github account\");"},{"lineNumber":147,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":150,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"AdityaA1998"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":152,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":153,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException if the replacement is equivalent to another existing person in the list."},{"lineNumber":154,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"AdityaA1998"},"content":"    public void setIssue(Index index, Issue editedIssue)"},{"lineNumber":156,"author":{"gitID":"AdityaA1998"},"content":"            throws IOException {"},{"lineNumber":157,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(editedIssue);"},{"lineNumber":158,"author":{"gitID":"AdityaA1998"},"content":"        toEdit \u003d repository.getIssue(index.getOneBased());"},{"lineNumber":159,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":160,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cAssignees\u003e assigneesList \u003d editedIssue.getAssignees();"},{"lineNumber":161,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cLabels\u003e labelsList \u003d editedIssue.getLabelsList();"},{"lineNumber":162,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":163,"author":{"gitID":"AdityaA1998"},"content":"        ArrayList\u003cGHUser\u003e listOfUsers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":164,"author":{"gitID":"AdityaA1998"},"content":"        ArrayList\u003cString\u003e listOfLabels \u003d new ArrayList\u003c\u003e();"},{"lineNumber":165,"author":{"gitID":"AdityaA1998"},"content":"        MilestoneMap obj \u003d new MilestoneMap();"},{"lineNumber":166,"author":{"gitID":"AdityaA1998"},"content":"        HashMap\u003cMilestone, Integer\u003e getMilestone \u003d obj.getMilestoneMap();"},{"lineNumber":167,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":168,"author":{"gitID":"AdityaA1998"},"content":"        for (Assignees assignee : assigneesList) {"},{"lineNumber":169,"author":{"gitID":"AdityaA1998"},"content":"            listOfUsers.add(github.getUser(assignee.toString()));"},{"lineNumber":170,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":172,"author":{"gitID":"AdityaA1998"},"content":"        for (Labels label : labelsList) {"},{"lineNumber":173,"author":{"gitID":"AdityaA1998"},"content":"            listOfLabels.add(label.toString());"},{"lineNumber":174,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":176,"author":{"gitID":"AdityaA1998"},"content":"        if (editedIssue.getMilestone() !\u003d null) {"},{"lineNumber":177,"author":{"gitID":"AdityaA1998"},"content":"            GHMilestone check \u003d repository.getMilestone(getMilestone.get(editedIssue.getMilestone()));"},{"lineNumber":178,"author":{"gitID":"AdityaA1998"},"content":"            toEdit.setMilestone(check);"},{"lineNumber":179,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"AdityaA1998"},"content":"        toEdit.setTitle(editedIssue.getTitle().toString());"},{"lineNumber":181,"author":{"gitID":"AdityaA1998"},"content":"        toEdit.setBody(editedIssue.getBody().toString());"},{"lineNumber":182,"author":{"gitID":"AdityaA1998"},"content":"        toEdit.setAssignees(listOfUsers);"},{"lineNumber":183,"author":{"gitID":"AdityaA1998"},"content":"        toEdit.setLabels(listOfLabels.toArray(new String[0]));"},{"lineNumber":184,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":186,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"AdityaA1998"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":188,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"AdityaA1998"},"content":"    public ObservableList\u003cIssue\u003e asObservableList() {"},{"lineNumber":190,"author":{"gitID":"AdityaA1998"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":191,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":193,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":194,"author":{"gitID":"AdityaA1998"},"content":"    public Iterator\u003cIssue\u003e iterator() {"},{"lineNumber":195,"author":{"gitID":"AdityaA1998"},"content":"        return internalList.iterator();"},{"lineNumber":196,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":198,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":199,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":200,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":201,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof GitIssueList // instanceof handles nulls"},{"lineNumber":202,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.internalList.equals(((GitIssueList) other).internalList));"},{"lineNumber":203,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":205,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":206,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":207,"author":{"gitID":"AdityaA1998"},"content":"        return internalList.hashCode();"},{"lineNumber":208,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":210,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":184,"-":26}},{"path":"src/main/java/seedu/progresschecker/model/credentials/Username.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.credentials;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":" * Represents the username of a user on github"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"public class Username {"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"    public final String username;"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs a {@code Username}."},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"     * @param username A valid username."},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    public Username(String username) {"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(username);"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"        this.username \u003d username;"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        return username;"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof seedu.progresschecker.model.credentials.Username // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.username.equals(((Username) other).username)); // state check"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        return username.hashCode();"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":36,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/photo/UniquePhotoList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.photo;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.exceptions.DuplicatePhotoException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.exceptions.PhotoNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":" * A list of photo paths that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":" *"},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":" *"},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":" * @see PhotoPath#equals(Object)"},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":"public class UniquePhotoList implements Iterable\u003cPhotoPath\u003e {"},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":"    private final ObservableList\u003cPhotoPath\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":29,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Livian1107"},"content":"     * Returns true if the list contains an equivalent photo path as the given argument."},{"lineNumber":31,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"Livian1107"},"content":"    public boolean contains(PhotoPath toCheck) {"},{"lineNumber":33,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(toCheck);"},{"lineNumber":34,"author":{"gitID":"Livian1107"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":35,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":37,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Livian1107"},"content":"     * Adds a photo path to the list."},{"lineNumber":39,"author":{"gitID":"Livian1107"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"Livian1107"},"content":"     * @throws DuplicatePhotoException if the photo path to add is a duplicate of an existing photo path in the list."},{"lineNumber":41,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"Livian1107"},"content":"    public void add(PhotoPath toAdd) throws DuplicatePhotoException {"},{"lineNumber":43,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitID":"Livian1107"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitID":"Livian1107"},"content":"            throw new DuplicatePhotoException();"},{"lineNumber":46,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"Livian1107"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":50,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"Livian1107"},"content":"     * Replaces the photo path {@code target} in the list with {@code editedPhoto}."},{"lineNumber":52,"author":{"gitID":"Livian1107"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"Livian1107"},"content":"     * @throws DuplicatePhotoException if the replacement is equivalent to another existing photo path in the list."},{"lineNumber":54,"author":{"gitID":"Livian1107"},"content":"     * @throws PhotoNotFoundException if {@code target} could not be found in the list."},{"lineNumber":55,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"Livian1107"},"content":"    public void setPhoto(PhotoPath target, PhotoPath editedPhoto)"},{"lineNumber":57,"author":{"gitID":"Livian1107"},"content":"            throws DuplicatePhotoException, PhotoNotFoundException {"},{"lineNumber":58,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(editedPhoto);"},{"lineNumber":59,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":60,"author":{"gitID":"Livian1107"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitID":"Livian1107"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitID":"Livian1107"},"content":"            throw new PhotoNotFoundException();"},{"lineNumber":63,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":65,"author":{"gitID":"Livian1107"},"content":"        if (!target.equals(editedPhoto) \u0026\u0026 internalList.contains(editedPhoto)) {"},{"lineNumber":66,"author":{"gitID":"Livian1107"},"content":"            throw new DuplicatePhotoException();"},{"lineNumber":67,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":69,"author":{"gitID":"Livian1107"},"content":"        internalList.set(index, editedPhoto);"},{"lineNumber":70,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":72,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"Livian1107"},"content":"     * Removes the equivalent photo path from the list."},{"lineNumber":74,"author":{"gitID":"Livian1107"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"Livian1107"},"content":"     * @throws PhotoNotFoundException if no such person could be found in the list."},{"lineNumber":76,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"Livian1107"},"content":"    public boolean remove(PhotoPath toRemove) throws PhotoNotFoundException {"},{"lineNumber":78,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(toRemove);"},{"lineNumber":79,"author":{"gitID":"Livian1107"},"content":"        final boolean photoFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":80,"author":{"gitID":"Livian1107"},"content":"        if (!photoFoundAndDeleted) {"},{"lineNumber":81,"author":{"gitID":"Livian1107"},"content":"            throw new PhotoNotFoundException();"},{"lineNumber":82,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"Livian1107"},"content":"        return photoFoundAndDeleted;"},{"lineNumber":84,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":86,"author":{"gitID":"Livian1107"},"content":"    public void setPhotos(UniquePhotoList replacement) {"},{"lineNumber":87,"author":{"gitID":"Livian1107"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":88,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":90,"author":{"gitID":"Livian1107"},"content":"    public void setPhotos(List\u003cPhotoPath\u003e photos) throws DuplicatePhotoException {"},{"lineNumber":91,"author":{"gitID":"Livian1107"},"content":"        requireAllNonNull(photos);"},{"lineNumber":92,"author":{"gitID":"Livian1107"},"content":"        final UniquePhotoList replacement \u003d new UniquePhotoList();"},{"lineNumber":93,"author":{"gitID":"Livian1107"},"content":"        for (final PhotoPath photo : photos) {"},{"lineNumber":94,"author":{"gitID":"Livian1107"},"content":"            replacement.add(photo);"},{"lineNumber":95,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"Livian1107"},"content":"        setPhotos(replacement);"},{"lineNumber":97,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":99,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"Livian1107"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":101,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"Livian1107"},"content":"    public ObservableList\u003cPhotoPath\u003e asObservableList() {"},{"lineNumber":103,"author":{"gitID":"Livian1107"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":104,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":106,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"Livian1107"},"content":"    public Iterator\u003cPhotoPath\u003e iterator() {"},{"lineNumber":108,"author":{"gitID":"Livian1107"},"content":"        return internalList.iterator();"},{"lineNumber":109,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":111,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"Livian1107"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitID":"Livian1107"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"Livian1107"},"content":"                || (other instanceof UniquePhotoList // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"Livian1107"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePhotoList) other).internalList));"},{"lineNumber":116,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":118,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"Livian1107"},"content":"    public int hashCode() {"},{"lineNumber":120,"author":{"gitID":"Livian1107"},"content":"        return internalList.hashCode();"},{"lineNumber":121,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":107,"-":15}},{"path":"src/main/java/seedu/progresschecker/model/credentials/GitDetails.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.credentials;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":" * Represents an Issue."},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"public class GitDetails {"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    private final Username username;"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    private final Repository repository;"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    private final Passcode passcode;"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"     * Every field must be present and not null."},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public GitDetails(Username username, Passcode passcode, Repository repository) {"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"        requireAllNonNull(username, repository, passcode);"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"        this.username \u003d username;"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"        this.repository \u003d repository;"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        this.passcode \u003d passcode;"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    public Username getUsername() {"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        return username;"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    public Repository getRepository() {"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        return repository;"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    public Passcode getPasscode() {"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        return passcode;"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"            return true;"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        if (!(other instanceof seedu.progresschecker.model.credentials.GitDetails)) {"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"            return false;"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"        seedu.progresschecker.model.credentials.GitDetails otherGitDetails \u003d"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"                (seedu.progresschecker.model.credentials.GitDetails) other;"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"        return otherGitDetails.getUsername().equals(this.getUsername())"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 otherGitDetails.getRepository().equals(this.getRepository())"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 otherGitDetails.getPasscode().equals(this.getPasscode());"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"        return Objects.hash(username, repository, passcode);"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"        builder.append(\" Username: \")"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"                .append(getUsername())"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"                .append(\" Repository: \")"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"                .append(getRepository());"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"        return builder.toString();"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":68,"-":6}}]
